
Micro1_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000022a4  00002318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e78  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000104c  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000051fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000533c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000054ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000070f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000917d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000994b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <main>
      7a:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidSetPortDirection>:

#include "DIO_Register.h"
#include "DIO_Interface.h"

void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_voidSetPortDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_voidSetPortDirection+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	3c 83       	std	Y+4, r19	; 0x04
     b4e:	2b 83       	std	Y+3, r18	; 0x03
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	91 05       	cpc	r25, r1
     b58:	d1 f0       	breq	.+52     	; 0xb8e <DIO_voidSetPortDirection+0x58>
     b5a:	2b 81       	ldd	r18, Y+3	; 0x03
     b5c:	3c 81       	ldd	r19, Y+4	; 0x04
     b5e:	22 30       	cpi	r18, 0x02	; 2
     b60:	31 05       	cpc	r19, r1
     b62:	2c f4       	brge	.+10     	; 0xb6e <DIO_voidSetPortDirection+0x38>
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	61 f0       	breq	.+24     	; 0xb84 <DIO_voidSetPortDirection+0x4e>
     b6c:	1e c0       	rjmp	.+60     	; 0xbaa <DIO_voidSetPortDirection+0x74>
     b6e:	2b 81       	ldd	r18, Y+3	; 0x03
     b70:	3c 81       	ldd	r19, Y+4	; 0x04
     b72:	22 30       	cpi	r18, 0x02	; 2
     b74:	31 05       	cpc	r19, r1
     b76:	81 f0       	breq	.+32     	; 0xb98 <DIO_voidSetPortDirection+0x62>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	83 30       	cpi	r24, 0x03	; 3
     b7e:	91 05       	cpc	r25, r1
     b80:	81 f0       	breq	.+32     	; 0xba2 <DIO_voidSetPortDirection+0x6c>
     b82:	13 c0       	rjmp	.+38     	; 0xbaa <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA : DDRA = Copy_u8Direction ; break;
     b84:	ea e3       	ldi	r30, 0x3A	; 58
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	80 83       	st	Z, r24
     b8c:	0e c0       	rjmp	.+28     	; 0xbaa <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB : DDRB = Copy_u8Direction ; break;
     b8e:	e7 e3       	ldi	r30, 0x37	; 55
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	80 83       	st	Z, r24
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC : DDRC = Copy_u8Direction ; break;
     b98:	e4 e3       	ldi	r30, 0x34	; 52
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	80 83       	st	Z, r24
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD : DDRD = Copy_u8Direction ; break;
     ba2:	e1 e3       	ldi	r30, 0x31	; 49
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	80 83       	st	Z, r24
		default        : break;
	}
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <DIO_voidSetPortValue+0x6>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <DIO_voidSetPortValue+0x8>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3c 83       	std	Y+4, r19	; 0x04
     bd0:	2b 83       	std	Y+3, r18	; 0x03
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	d1 f0       	breq	.+52     	; 0xc10 <DIO_voidSetPortValue+0x58>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	2c f4       	brge	.+10     	; 0xbf0 <DIO_voidSetPortValue+0x38>
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	61 f0       	breq	.+24     	; 0xc06 <DIO_voidSetPortValue+0x4e>
     bee:	1e c0       	rjmp	.+60     	; 0xc2c <DIO_voidSetPortValue+0x74>
     bf0:	2b 81       	ldd	r18, Y+3	; 0x03
     bf2:	3c 81       	ldd	r19, Y+4	; 0x04
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	81 f0       	breq	.+32     	; 0xc1a <DIO_voidSetPortValue+0x62>
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	91 05       	cpc	r25, r1
     c02:	81 f0       	breq	.+32     	; 0xc24 <DIO_voidSetPortValue+0x6c>
     c04:	13 c0       	rjmp	.+38     	; 0xc2c <DIO_voidSetPortValue+0x74>
	{
		case DIO_PORTA : PORTA = Copy_u8Value ; break;
     c06:	eb e3       	ldi	r30, 0x3B	; 59
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	80 83       	st	Z, r24
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <DIO_voidSetPortValue+0x74>
		case DIO_PORTB : PORTB = Copy_u8Value ; break;
     c10:	e8 e3       	ldi	r30, 0x38	; 56
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	80 83       	st	Z, r24
     c18:	09 c0       	rjmp	.+18     	; 0xc2c <DIO_voidSetPortValue+0x74>
		case DIO_PORTC : PORTC = Copy_u8Value ; break;
     c1a:	e5 e3       	ldi	r30, 0x35	; 53
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	80 83       	st	Z, r24
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <DIO_voidSetPortValue+0x74>
		case DIO_PORTD : PORTD = Copy_u8Value ; break;
     c24:	e2 e3       	ldi	r30, 0x32	; 50
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	80 83       	st	Z, r24
		default        : break;
	}
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	27 97       	sbiw	r28, 0x07	; 7
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	6a 83       	std	Y+2, r22	; 0x02
     c52:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == OUTPUT_PIN)
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	09 f0       	breq	.+2      	; 0xc5c <DIO_voidSetPinDirection+0x22>
     c5a:	6f c0       	rjmp	.+222    	; 0xd3a <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	3f 83       	std	Y+7, r19	; 0x07
     c64:	2e 83       	std	Y+6, r18	; 0x06
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	9f 81       	ldd	r25, Y+7	; 0x07
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	91 05       	cpc	r25, r1
     c6e:	49 f1       	breq	.+82     	; 0xcc2 <DIO_voidSetPinDirection+0x88>
     c70:	2e 81       	ldd	r18, Y+6	; 0x06
     c72:	3f 81       	ldd	r19, Y+7	; 0x07
     c74:	22 30       	cpi	r18, 0x02	; 2
     c76:	31 05       	cpc	r19, r1
     c78:	2c f4       	brge	.+10     	; 0xc84 <DIO_voidSetPinDirection+0x4a>
     c7a:	8e 81       	ldd	r24, Y+6	; 0x06
     c7c:	9f 81       	ldd	r25, Y+7	; 0x07
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	61 f0       	breq	.+24     	; 0xc9a <DIO_voidSetPinDirection+0x60>
     c82:	d2 c0       	rjmp	.+420    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
     c84:	2e 81       	ldd	r18, Y+6	; 0x06
     c86:	3f 81       	ldd	r19, Y+7	; 0x07
     c88:	22 30       	cpi	r18, 0x02	; 2
     c8a:	31 05       	cpc	r19, r1
     c8c:	71 f1       	breq	.+92     	; 0xcea <DIO_voidSetPinDirection+0xb0>
     c8e:	8e 81       	ldd	r24, Y+6	; 0x06
     c90:	9f 81       	ldd	r25, Y+7	; 0x07
     c92:	83 30       	cpi	r24, 0x03	; 3
     c94:	91 05       	cpc	r25, r1
     c96:	e9 f1       	breq	.+122    	; 0xd12 <DIO_voidSetPinDirection+0xd8>
     c98:	c7 c0       	rjmp	.+398    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin) ; break;
     c9a:	aa e3       	ldi	r26, 0x3A	; 58
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ea e3       	ldi	r30, 0x3A	; 58
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_voidSetPinDirection+0x7e>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_voidSetPinDirection+0x7a>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	b3 c0       	rjmp	.+358    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin) ; break;
     cc2:	a7 e3       	ldi	r26, 0x37	; 55
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e3       	ldi	r30, 0x37	; 55
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_voidSetPinDirection+0xa6>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_voidSetPinDirection+0xa2>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	9f c0       	rjmp	.+318    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin) ; break;
     cea:	a4 e3       	ldi	r26, 0x34	; 52
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e4 e3       	ldi	r30, 0x34	; 52
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_voidSetPinDirection+0xce>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_voidSetPinDirection+0xca>
     d0c:	84 2b       	or	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	8b c0       	rjmp	.+278    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin) ; break;
     d12:	a1 e3       	ldi	r26, 0x31	; 49
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e1 e3       	ldi	r30, 0x31	; 49
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_voidSetPinDirection+0xf6>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_voidSetPinDirection+0xf2>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	77 c0       	rjmp	.+238    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
			default        : break;
		}
	}
	else if(Copy_u8Direction == INPUT_PIN)
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	88 23       	and	r24, r24
     d3e:	09 f0       	breq	.+2      	; 0xd42 <DIO_voidSetPinDirection+0x108>
     d40:	73 c0       	rjmp	.+230    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	3d 83       	std	Y+5, r19	; 0x05
     d4a:	2c 83       	std	Y+4, r18	; 0x04
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	9d 81       	ldd	r25, Y+5	; 0x05
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	91 05       	cpc	r25, r1
     d54:	59 f1       	breq	.+86     	; 0xdac <DIO_voidSetPinDirection+0x172>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <DIO_voidSetPinDirection+0x130>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f0       	breq	.+26     	; 0xd82 <DIO_voidSetPinDirection+0x148>
     d68:	5f c0       	rjmp	.+190    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	89 f1       	breq	.+98     	; 0xdd6 <DIO_voidSetPinDirection+0x19c>
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <DIO_voidSetPinDirection+0x146>
     d7e:	40 c0       	rjmp	.+128    	; 0xe00 <DIO_voidSetPinDirection+0x1c6>
     d80:	53 c0       	rjmp	.+166    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin) ; break;
     d82:	aa e3       	ldi	r26, 0x3A	; 58
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e3       	ldi	r30, 0x3A	; 58
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_voidSetPinDirection+0x166>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_voidSetPinDirection+0x162>
     da4:	80 95       	com	r24
     da6:	84 23       	and	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	3e c0       	rjmp	.+124    	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin) ; break;
     dac:	a7 e3       	ldi	r26, 0x37	; 55
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e7 e3       	ldi	r30, 0x37	; 55
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_voidSetPinDirection+0x190>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_voidSetPinDirection+0x18c>
     dce:	80 95       	com	r24
     dd0:	84 23       	and	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	29 c0       	rjmp	.+82     	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin) ; break;
     dd6:	a4 e3       	ldi	r26, 0x34	; 52
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e4 e3       	ldi	r30, 0x34	; 52
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_voidSetPinDirection+0x1ba>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_voidSetPinDirection+0x1b6>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin) ; break;
     e00:	a1 e3       	ldi	r26, 0x31	; 49
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e1 e3       	ldi	r30, 0x31	; 49
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_voidSetPinDirection+0x1e4>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_voidSetPinDirection+0x1e0>
     e22:	80 95       	com	r24
     e24:	84 23       	and	r24, r20
     e26:	8c 93       	st	X, r24
			default        : break;
		}
	}
}
     e28:	27 96       	adiw	r28, 0x07	; 7
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	29 97       	sbiw	r28, 0x09	; 9
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	6a 83       	std	Y+2, r22	; 0x02
     e52:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == HIGH)
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	09 f0       	breq	.+2      	; 0xe5c <DIO_voidSetPinValue+0x22>
     e5a:	6f c0       	rjmp	.+222    	; 0xf3a <DIO_voidSetPinValue+0x100>
	{
		switch (Copy_u8Port)
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	39 87       	std	Y+9, r19	; 0x09
     e64:	28 87       	std	Y+8, r18	; 0x08
     e66:	88 85       	ldd	r24, Y+8	; 0x08
     e68:	99 85       	ldd	r25, Y+9	; 0x09
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	91 05       	cpc	r25, r1
     e6e:	49 f1       	breq	.+82     	; 0xec2 <DIO_voidSetPinValue+0x88>
     e70:	28 85       	ldd	r18, Y+8	; 0x08
     e72:	39 85       	ldd	r19, Y+9	; 0x09
     e74:	22 30       	cpi	r18, 0x02	; 2
     e76:	31 05       	cpc	r19, r1
     e78:	2c f4       	brge	.+10     	; 0xe84 <DIO_voidSetPinValue+0x4a>
     e7a:	88 85       	ldd	r24, Y+8	; 0x08
     e7c:	99 85       	ldd	r25, Y+9	; 0x09
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	61 f0       	breq	.+24     	; 0xe9a <DIO_voidSetPinValue+0x60>
     e82:	45 c1       	rjmp	.+650    	; 0x110e <DIO_voidSetPinValue+0x2d4>
     e84:	28 85       	ldd	r18, Y+8	; 0x08
     e86:	39 85       	ldd	r19, Y+9	; 0x09
     e88:	22 30       	cpi	r18, 0x02	; 2
     e8a:	31 05       	cpc	r19, r1
     e8c:	71 f1       	breq	.+92     	; 0xeea <DIO_voidSetPinValue+0xb0>
     e8e:	88 85       	ldd	r24, Y+8	; 0x08
     e90:	99 85       	ldd	r25, Y+9	; 0x09
     e92:	83 30       	cpi	r24, 0x03	; 3
     e94:	91 05       	cpc	r25, r1
     e96:	e9 f1       	breq	.+122    	; 0xf12 <DIO_voidSetPinValue+0xd8>
     e98:	3a c1       	rjmp	.+628    	; 0x110e <DIO_voidSetPinValue+0x2d4>
		{
			case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin) ; break;
     e9a:	ab e3       	ldi	r26, 0x3B	; 59
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e3       	ldi	r30, 0x3B	; 59
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_voidSetPinValue+0x7e>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_voidSetPinValue+0x7a>
     ebc:	84 2b       	or	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	26 c1       	rjmp	.+588    	; 0x110e <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin) ; break;
     ec2:	a8 e3       	ldi	r26, 0x38	; 56
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e8 e3       	ldi	r30, 0x38	; 56
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_voidSetPinValue+0xa6>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_voidSetPinValue+0xa2>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	12 c1       	rjmp	.+548    	; 0x110e <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin) ; break;
     eea:	a5 e3       	ldi	r26, 0x35	; 53
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e3       	ldi	r30, 0x35	; 53
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_voidSetPinValue+0xce>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_voidSetPinValue+0xca>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	fe c0       	rjmp	.+508    	; 0x110e <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin) ; break;
     f12:	a2 e3       	ldi	r26, 0x32	; 50
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e2 e3       	ldi	r30, 0x32	; 50
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_voidSetPinValue+0xf6>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_voidSetPinValue+0xf2>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	ea c0       	rjmp	.+468    	; 0x110e <DIO_voidSetPinValue+0x2d4>
			default        : break;
		}
	}
	else if(Copy_u8Value == LOW)
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 23       	and	r24, r24
     f3e:	09 f0       	breq	.+2      	; 0xf42 <DIO_voidSetPinValue+0x108>
     f40:	74 c0       	rjmp	.+232    	; 0x102a <DIO_voidSetPinValue+0x1f0>
	{
		switch (Copy_u8Port)
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	3f 83       	std	Y+7, r19	; 0x07
     f4a:	2e 83       	std	Y+6, r18	; 0x06
     f4c:	8e 81       	ldd	r24, Y+6	; 0x06
     f4e:	9f 81       	ldd	r25, Y+7	; 0x07
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	91 05       	cpc	r25, r1
     f54:	59 f1       	breq	.+86     	; 0xfac <DIO_voidSetPinValue+0x172>
     f56:	2e 81       	ldd	r18, Y+6	; 0x06
     f58:	3f 81       	ldd	r19, Y+7	; 0x07
     f5a:	22 30       	cpi	r18, 0x02	; 2
     f5c:	31 05       	cpc	r19, r1
     f5e:	2c f4       	brge	.+10     	; 0xf6a <DIO_voidSetPinValue+0x130>
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	9f 81       	ldd	r25, Y+7	; 0x07
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	69 f0       	breq	.+26     	; 0xf82 <DIO_voidSetPinValue+0x148>
     f68:	d2 c0       	rjmp	.+420    	; 0x110e <DIO_voidSetPinValue+0x2d4>
     f6a:	2e 81       	ldd	r18, Y+6	; 0x06
     f6c:	3f 81       	ldd	r19, Y+7	; 0x07
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	89 f1       	breq	.+98     	; 0xfd6 <DIO_voidSetPinValue+0x19c>
     f74:	8e 81       	ldd	r24, Y+6	; 0x06
     f76:	9f 81       	ldd	r25, Y+7	; 0x07
     f78:	83 30       	cpi	r24, 0x03	; 3
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <DIO_voidSetPinValue+0x146>
     f7e:	40 c0       	rjmp	.+128    	; 0x1000 <DIO_voidSetPinValue+0x1c6>
     f80:	c6 c0       	rjmp	.+396    	; 0x110e <DIO_voidSetPinValue+0x2d4>
		{
			case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin) ; break;
     f82:	ab e3       	ldi	r26, 0x3B	; 59
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	eb e3       	ldi	r30, 0x3B	; 59
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_voidSetPinValue+0x166>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_voidSetPinValue+0x162>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	b1 c0       	rjmp	.+354    	; 0x110e <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin) ; break;
     fac:	a8 e3       	ldi	r26, 0x38	; 56
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e8 e3       	ldi	r30, 0x38	; 56
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_voidSetPinValue+0x190>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_voidSetPinValue+0x18c>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	9c c0       	rjmp	.+312    	; 0x110e <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin) ; break;
     fd6:	a5 e3       	ldi	r26, 0x35	; 53
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e5 e3       	ldi	r30, 0x35	; 53
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_voidSetPinValue+0x1ba>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_voidSetPinValue+0x1b6>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	87 c0       	rjmp	.+270    	; 0x110e <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin) ; break;
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_voidSetPinValue+0x1e4>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_voidSetPinValue+0x1e0>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	72 c0       	rjmp	.+228    	; 0x110e <DIO_voidSetPinValue+0x2d4>
			default        : break;
		}
	}
	else if(Copy_u8Value == TOGG)
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	09 f0       	breq	.+2      	; 0x1032 <DIO_voidSetPinValue+0x1f8>
    1030:	6e c0       	rjmp	.+220    	; 0x110e <DIO_voidSetPinValue+0x2d4>
	{
		switch (Copy_u8Port)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3d 83       	std	Y+5, r19	; 0x05
    103a:	2c 83       	std	Y+4, r18	; 0x04
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	49 f1       	breq	.+82     	; 0x1098 <DIO_voidSetPinValue+0x25e>
    1046:	2c 81       	ldd	r18, Y+4	; 0x04
    1048:	3d 81       	ldd	r19, Y+5	; 0x05
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	2c f4       	brge	.+10     	; 0x105a <DIO_voidSetPinValue+0x220>
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	61 f0       	breq	.+24     	; 0x1070 <DIO_voidSetPinValue+0x236>
    1058:	5a c0       	rjmp	.+180    	; 0x110e <DIO_voidSetPinValue+0x2d4>
    105a:	2c 81       	ldd	r18, Y+4	; 0x04
    105c:	3d 81       	ldd	r19, Y+5	; 0x05
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	71 f1       	breq	.+92     	; 0x10c0 <DIO_voidSetPinValue+0x286>
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	83 30       	cpi	r24, 0x03	; 3
    106a:	91 05       	cpc	r25, r1
    106c:	e9 f1       	breq	.+122    	; 0x10e8 <DIO_voidSetPinValue+0x2ae>
    106e:	4f c0       	rjmp	.+158    	; 0x110e <DIO_voidSetPinValue+0x2d4>
		{
			case DIO_PORTA : TOG_BIT(PORTA,Copy_u8Pin) ; break;
    1070:	ab e3       	ldi	r26, 0x3B	; 59
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	eb e3       	ldi	r30, 0x3B	; 59
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_voidSetPinValue+0x254>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_voidSetPinValue+0x250>
    1092:	84 27       	eor	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	3b c0       	rjmp	.+118    	; 0x110e <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTB : TOG_BIT(PORTB,Copy_u8Pin) ; break;
    1098:	a8 e3       	ldi	r26, 0x38	; 56
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e3       	ldi	r30, 0x38	; 56
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_voidSetPinValue+0x27c>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_voidSetPinValue+0x278>
    10ba:	84 27       	eor	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	27 c0       	rjmp	.+78     	; 0x110e <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTC : TOG_BIT(PORTC,Copy_u8Pin) ; break;
    10c0:	a5 e3       	ldi	r26, 0x35	; 53
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e3       	ldi	r30, 0x35	; 53
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_voidSetPinValue+0x2a4>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_voidSetPinValue+0x2a0>
    10e2:	84 27       	eor	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	13 c0       	rjmp	.+38     	; 0x110e <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTD : TOG_BIT(PORTD,Copy_u8Pin) ; break;
    10e8:	a2 e3       	ldi	r26, 0x32	; 50
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e2 e3       	ldi	r30, 0x32	; 50
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_voidSetPinValue+0x2cc>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_voidSetPinValue+0x2c8>
    110a:	84 27       	eor	r24, r20
    110c:	8c 93       	st	X, r24
			default        : break;
		}
	}
}
    110e:	29 96       	adiw	r28, 0x09	; 9
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <DIO_u8GetPinValue+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <DIO_u8GetPinValue+0x8>
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnPinValue;
	switch (Copy_u8Port)
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3d 83       	std	Y+5, r19	; 0x05
    113a:	2c 83       	std	Y+4, r18	; 0x04
    113c:	4c 81       	ldd	r20, Y+4	; 0x04
    113e:	5d 81       	ldd	r21, Y+5	; 0x05
    1140:	41 30       	cpi	r20, 0x01	; 1
    1142:	51 05       	cpc	r21, r1
    1144:	41 f1       	breq	.+80     	; 0x1196 <DIO_u8GetPinValue+0x76>
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	91 05       	cpc	r25, r1
    114e:	34 f4       	brge	.+12     	; 0x115c <DIO_u8GetPinValue+0x3c>
    1150:	2c 81       	ldd	r18, Y+4	; 0x04
    1152:	3d 81       	ldd	r19, Y+5	; 0x05
    1154:	21 15       	cp	r18, r1
    1156:	31 05       	cpc	r19, r1
    1158:	61 f0       	breq	.+24     	; 0x1172 <DIO_u8GetPinValue+0x52>
    115a:	52 c0       	rjmp	.+164    	; 0x1200 <DIO_u8GetPinValue+0xe0>
    115c:	4c 81       	ldd	r20, Y+4	; 0x04
    115e:	5d 81       	ldd	r21, Y+5	; 0x05
    1160:	42 30       	cpi	r20, 0x02	; 2
    1162:	51 05       	cpc	r21, r1
    1164:	51 f1       	breq	.+84     	; 0x11ba <DIO_u8GetPinValue+0x9a>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	b9 f1       	breq	.+110    	; 0x11de <DIO_u8GetPinValue+0xbe>
    1170:	47 c0       	rjmp	.+142    	; 0x1200 <DIO_u8GetPinValue+0xe0>
	{
		case DIO_PORTA : Local_u8ReturnPinValue = GET_BIT(PINA,Copy_u8Pin) ; break;
    1172:	e9 e3       	ldi	r30, 0x39	; 57
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_u8GetPinValue+0x6a>
    1186:	55 95       	asr	r21
    1188:	47 95       	ror	r20
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_u8GetPinValue+0x66>
    118e:	ca 01       	movw	r24, r20
    1190:	81 70       	andi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	35 c0       	rjmp	.+106    	; 0x1200 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTB : Local_u8ReturnPinValue = GET_BIT(PINB,Copy_u8Pin) ; break;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a9 01       	movw	r20, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_u8GetPinValue+0x8e>
    11aa:	55 95       	asr	r21
    11ac:	47 95       	ror	r20
    11ae:	8a 95       	dec	r24
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_u8GetPinValue+0x8a>
    11b2:	ca 01       	movw	r24, r20
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	23 c0       	rjmp	.+70     	; 0x1200 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTC : Local_u8ReturnPinValue = GET_BIT(PINC,Copy_u8Pin) ; break;
    11ba:	e3 e3       	ldi	r30, 0x33	; 51
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_u8GetPinValue+0xb2>
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_u8GetPinValue+0xae>
    11d6:	ca 01       	movw	r24, r20
    11d8:	81 70       	andi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	11 c0       	rjmp	.+34     	; 0x1200 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTD : Local_u8ReturnPinValue = GET_BIT(PIND,Copy_u8Pin) ; break;
    11de:	e0 e3       	ldi	r30, 0x30	; 48
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_u8GetPinValue+0xd6>
    11f2:	55 95       	asr	r21
    11f4:	47 95       	ror	r20
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_u8GetPinValue+0xd2>
    11fa:	ca 01       	movw	r24, r20
    11fc:	81 70       	andi	r24, 0x01	; 1
    11fe:	89 83       	std	Y+1, r24	; 0x01
		default        : break;
	}
	return Local_u8ReturnPinValue;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <KeyPad_voidInit>:
#include <util/delay.h>

u8 Rows[4] = {KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN, KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN};
u8 Cols[4] = {KEYPAD_COL1_PIN, KEYPAD_COL2_PIN, KEYPAD_COL3_PIN, KEYPAD_COL4_PIN};

void KeyPad_voidInit(void){
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <KeyPad_voidInit+0x6>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62

	for(u8 rowCounter = 0; rowCounter<4;rowCounter++){
    121c:	1a 82       	std	Y+2, r1	; 0x02
    121e:	1b c0       	rjmp	.+54     	; 0x1256 <KeyPad_voidInit+0x44>
		DIO_voidSetPinDirection(KEYPAD_PORT,Rows[rowCounter],OUTPUT_PIN);
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	fc 01       	movw	r30, r24
    1228:	e8 59       	subi	r30, 0x98	; 152
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	90 81       	ld	r25, Z
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	69 2f       	mov	r22, r25
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KEYPAD_PORT,Rows[rowCounter],HIGH);
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	fc 01       	movw	r30, r24
    1240:	e8 59       	subi	r30, 0x98	; 152
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	90 81       	ld	r25, Z
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	69 2f       	mov	r22, r25
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
u8 Rows[4] = {KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN, KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN};
u8 Cols[4] = {KEYPAD_COL1_PIN, KEYPAD_COL2_PIN, KEYPAD_COL3_PIN, KEYPAD_COL4_PIN};

void KeyPad_voidInit(void){

	for(u8 rowCounter = 0; rowCounter<4;rowCounter++){
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	8a 83       	std	Y+2, r24	; 0x02
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	10 f3       	brcs	.-60     	; 0x1220 <KeyPad_voidInit+0xe>
		DIO_voidSetPinDirection(KEYPAD_PORT,Rows[rowCounter],OUTPUT_PIN);
		DIO_voidSetPinValue(KEYPAD_PORT,Rows[rowCounter],HIGH);
	}

	for(u8 colCounter = 0; colCounter<4;colCounter++){
    125c:	19 82       	std	Y+1, r1	; 0x01
    125e:	1b c0       	rjmp	.+54     	; 0x1296 <KeyPad_voidInit+0x84>
		DIO_voidSetPinDirection(KEYPAD_PORT,Cols[colCounter],INPUT_PIN);
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	fc 01       	movw	r30, r24
    1268:	e4 59       	subi	r30, 0x94	; 148
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	90 81       	ld	r25, Z
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	69 2f       	mov	r22, r25
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KEYPAD_PORT,Cols[colCounter],HIGH);
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	fc 01       	movw	r30, r24
    1280:	e4 59       	subi	r30, 0x94	; 148
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	90 81       	ld	r25, Z
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	69 2f       	mov	r22, r25
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
	for(u8 rowCounter = 0; rowCounter<4;rowCounter++){
		DIO_voidSetPinDirection(KEYPAD_PORT,Rows[rowCounter],OUTPUT_PIN);
		DIO_voidSetPinValue(KEYPAD_PORT,Rows[rowCounter],HIGH);
	}

	for(u8 colCounter = 0; colCounter<4;colCounter++){
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	10 f3       	brcs	.-60     	; 0x1260 <KeyPad_voidInit+0x4e>
		DIO_voidSetPinDirection(KEYPAD_PORT,Cols[colCounter],INPUT_PIN);
		DIO_voidSetPinValue(KEYPAD_PORT,Cols[colCounter],HIGH);
	}
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <KeyPad_u8GetPress>:

u8 KeyPad_u8GetPress(void){
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	61 97       	sbiw	r28, 0x11	; 17
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Col;
	u8 x = KEYPAD_NOT_PRESSED;
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 rowCounter=0; rowCounter<4;rowCounter++){
    12be:	1f 86       	std	Y+15, r1	; 0x0f
    12c0:	96 c0       	rjmp	.+300    	; 0x13ee <KeyPad_u8GetPress+0x148>
		KeyPad_voidSelectLine(Rows[rowCounter]);
    12c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	fc 01       	movw	r30, r24
    12ca:	e8 59       	subi	r30, 0x98	; 152
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 81       	ld	r24, Z
    12d0:	0e 94 3d 0a 	call	0x147a	; 0x147a <KeyPad_voidSelectLine>
		Local_u8Col = KeyPad_u8ReadButton(Rows[rowCounter]);
    12d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	fc 01       	movw	r30, r24
    12dc:	e8 59       	subi	r30, 0x98	; 152
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	80 81       	ld	r24, Z
    12e2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <KeyPad_u8ReadButton>
    12e6:	89 8b       	std	Y+17, r24	; 0x11
		if(Local_u8Col != KEYPAD_NOT_PRESSED)
    12e8:	89 89       	ldd	r24, Y+17	; 0x11
    12ea:	8f 3f       	cpi	r24, 0xFF	; 255
    12ec:	59 f0       	breq	.+22     	; 0x1304 <KeyPad_u8GetPress+0x5e>
			x = (rowCounter*4)+Local_u8Col;
    12ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	98 2f       	mov	r25, r24
    12fe:	89 89       	ldd	r24, Y+17	; 0x11
    1300:	89 0f       	add	r24, r25
    1302:	88 8b       	std	Y+16, r24	; 0x10
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e4       	ldi	r27, 0x40	; 64
    130c:	8b 87       	std	Y+11, r24	; 0x0b
    130e:	9c 87       	std	Y+12, r25	; 0x0c
    1310:	ad 87       	std	Y+13, r26	; 0x0d
    1312:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1314:	6b 85       	ldd	r22, Y+11	; 0x0b
    1316:	7c 85       	ldd	r23, Y+12	; 0x0c
    1318:	8d 85       	ldd	r24, Y+13	; 0x0d
    131a:	9e 85       	ldd	r25, Y+14	; 0x0e
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	4a ef       	ldi	r20, 0xFA	; 250
    1322:	54 e4       	ldi	r21, 0x44	; 68
    1324:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	8f 83       	std	Y+7, r24	; 0x07
    132e:	98 87       	std	Y+8, r25	; 0x08
    1330:	a9 87       	std	Y+9, r26	; 0x09
    1332:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1334:	6f 81       	ldd	r22, Y+7	; 0x07
    1336:	78 85       	ldd	r23, Y+8	; 0x08
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	5f e3       	ldi	r21, 0x3F	; 63
    1344:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1348:	88 23       	and	r24, r24
    134a:	2c f4       	brge	.+10     	; 0x1356 <KeyPad_u8GetPress+0xb0>
		__ticks = 1;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
    1354:	3f c0       	rjmp	.+126    	; 0x13d4 <KeyPad_u8GetPress+0x12e>
	else if (__tmp > 65535)
    1356:	6f 81       	ldd	r22, Y+7	; 0x07
    1358:	78 85       	ldd	r23, Y+8	; 0x08
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	3f ef       	ldi	r19, 0xFF	; 255
    1362:	4f e7       	ldi	r20, 0x7F	; 127
    1364:	57 e4       	ldi	r21, 0x47	; 71
    1366:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    136a:	18 16       	cp	r1, r24
    136c:	4c f5       	brge	.+82     	; 0x13c0 <KeyPad_u8GetPress+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1370:	7c 85       	ldd	r23, Y+12	; 0x0c
    1372:	8d 85       	ldd	r24, Y+13	; 0x0d
    1374:	9e 85       	ldd	r25, Y+14	; 0x0e
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e2       	ldi	r20, 0x20	; 32
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	0f c0       	rjmp	.+30     	; 0x13b6 <KeyPad_u8GetPress+0x110>
    1398:	88 ec       	ldi	r24, 0xC8	; 200
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <KeyPad_u8GetPress+0xfe>
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	9e 83       	std	Y+6, r25	; 0x06
    13b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	69 f7       	brne	.-38     	; 0x1398 <KeyPad_u8GetPress+0xf2>
    13be:	14 c0       	rjmp	.+40     	; 0x13e8 <KeyPad_u8GetPress+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c0:	6f 81       	ldd	r22, Y+7	; 0x07
    13c2:	78 85       	ldd	r23, Y+8	; 0x08
    13c4:	89 85       	ldd	r24, Y+9	; 0x09
    13c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	9e 81       	ldd	r25, Y+6	; 0x06
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <KeyPad_u8GetPress+0x13a>
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01
}

u8 KeyPad_u8GetPress(void){
	u8 Local_u8Col;
	u8 x = KEYPAD_NOT_PRESSED;
	for(u8 rowCounter=0; rowCounter<4;rowCounter++){
    13e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ea:	8f 5f       	subi	r24, 0xFF	; 255
    13ec:	8f 87       	std	Y+15, r24	; 0x0f
    13ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	08 f4       	brcc	.+2      	; 0x13f6 <KeyPad_u8GetPress+0x150>
    13f4:	66 cf       	rjmp	.-308    	; 0x12c2 <KeyPad_u8GetPress+0x1c>
		Local_u8Col = KeyPad_u8ReadButton(Rows[rowCounter]);
		if(Local_u8Col != KEYPAD_NOT_PRESSED)
			x = (rowCounter*4)+Local_u8Col;
		_delay_ms(2);
	}
	return Keypad_Char[x];
    13f6:	88 89       	ldd	r24, Y+16	; 0x10
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	fc 01       	movw	r30, r24
    13fe:	e0 59       	subi	r30, 0x90	; 144
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	80 81       	ld	r24, Z
}
    1404:	61 96       	adiw	r28, 0x11	; 17
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <KeyPad_u8ReadButton>:

u8 KeyPad_u8ReadButton(u8 Copy_u8Line){
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <KeyPad_u8ReadButton+0x6>
    141c:	0f 92       	push	r0
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 colCounter=0; colCounter<4;colCounter++){
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	18 c0       	rjmp	.+48     	; 0x1458 <KeyPad_u8ReadButton+0x42>
		if(DIO_u8GetPinValue(KEYPAD_PORT, Cols[colCounter]) == LOW){
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	fc 01       	movw	r30, r24
    1430:	e4 59       	subi	r30, 0x94	; 148
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	90 81       	ld	r25, Z
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	69 2f       	mov	r22, r25
    143a:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_u8GetPinValue>
    143e:	88 23       	and	r24, r24
    1440:	41 f4       	brne	.+16     	; 0x1452 <KeyPad_u8ReadButton+0x3c>
			DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, HIGH);
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	6a 81       	ldd	r22, Y+2	; 0x02
    1446:	41 e0       	ldi	r20, 0x01	; 1
    1448:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
			return colCounter;
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	8b 83       	std	Y+3, r24	; 0x03
    1450:	0d c0       	rjmp	.+26     	; 0x146c <KeyPad_u8ReadButton+0x56>
	return Keypad_Char[x];
}

u8 KeyPad_u8ReadButton(u8 Copy_u8Line){

	for(u8 colCounter=0; colCounter<4;colCounter++){
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	84 30       	cpi	r24, 0x04	; 4
    145c:	28 f3       	brcs	.-54     	; 0x1428 <KeyPad_u8ReadButton+0x12>
			DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, HIGH);
			return colCounter;
		}
	}

	DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, HIGH);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	6a 81       	ldd	r22, Y+2	; 0x02
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
	return KEYPAD_NOT_PRESSED;
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	8b 83       	std	Y+3, r24	; 0x03
    146c:	8b 81       	ldd	r24, Y+3	; 0x03


}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <KeyPad_voidSelectLine>:
void KeyPad_voidSelectLine(u8 Copy_u8Line){
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, LOW);
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	69 81       	ldd	r22, Y+1	; 0x01
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
}
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <LCD_voidSendCommand>:
#include "LCD_Interface.h"

#include <util/delay.h>

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	2f 97       	sbiw	r28, 0x0f	; 15
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS by Low for Command*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_RS_PIN , LOW);
    14ae:	83 e0       	ldi	r24, 0x03	; 3
    14b0:	62 e0       	ldi	r22, 0x02	; 2
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>

	/*Set RW by Low for Write*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_RW_PIN , LOW);
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	63 e0       	ldi	r22, 0x03	; 3
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>

	/*Send the Command*/
	DIO_voidSetPortValue(LCD_DATA_PORT , Copy_u8Command);
    14c2:	82 e0       	ldi	r24, 0x02	; 2
    14c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    14c6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>

	/*Enable LCD*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_E_PIN , HIGH);
    14ca:	83 e0       	ldi	r24, 0x03	; 3
    14cc:	64 e0       	ldi	r22, 0x04	; 4
    14ce:	41 e0       	ldi	r20, 0x01	; 1
    14d0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a0 e0       	ldi	r26, 0x00	; 0
    14da:	b0 e4       	ldi	r27, 0x40	; 64
    14dc:	8b 87       	std	Y+11, r24	; 0x0b
    14de:	9c 87       	std	Y+12, r25	; 0x0c
    14e0:	ad 87       	std	Y+13, r26	; 0x0d
    14e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a ef       	ldi	r20, 0xFA	; 250
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8f 83       	std	Y+7, r24	; 0x07
    14fe:	98 87       	std	Y+8, r25	; 0x08
    1500:	a9 87       	std	Y+9, r26	; 0x09
    1502:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1526:	6f 81       	ldd	r22, Y+7	; 0x07
    1528:	78 85       	ldd	r23, Y+8	; 0x08
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1540:	7c 85       	ldd	r23, Y+12	; 0x0c
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <LCD_voidSendCommand+0xee>
    1568:	88 ec       	ldi	r24, 0xC8	; 200
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <LCD_voidSendCommand+0xdc>
    1578:	9c 83       	std	Y+4, r25	; 0x04
    157a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <LCD_voidSendCommand+0xd0>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <LCD_voidSendCommand+0x118>
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // wait till it become high
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_E_PIN , LOW);
    15b8:	83 e0       	ldi	r24, 0x03	; 3
    15ba:	64 e0       	ldi	r22, 0x04	; 4
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
}
    15c2:	2f 96       	adiw	r28, 0x0f	; 15
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	2f 97       	sbiw	r28, 0x0f	; 15
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS by High for Data*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_RS_PIN , HIGH);
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	62 e0       	ldi	r22, 0x02	; 2
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>

	/*Set RW by Low for Write*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_RW_PIN , LOW);
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	63 e0       	ldi	r22, 0x03	; 3
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>

	/*Send the Data*/
	DIO_voidSetPortValue(LCD_DATA_PORT , Copy_u8Data);
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	6f 85       	ldd	r22, Y+15	; 0x0f
    1602:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>

	/*Enable LCD*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_E_PIN , HIGH);
    1606:	83 e0       	ldi	r24, 0x03	; 3
    1608:	64 e0       	ldi	r22, 0x04	; 4
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a0 e0       	ldi	r26, 0x00	; 0
    1616:	b0 e4       	ldi	r27, 0x40	; 64
    1618:	8b 87       	std	Y+11, r24	; 0x0b
    161a:	9c 87       	std	Y+12, r25	; 0x0c
    161c:	ad 87       	std	Y+13, r26	; 0x0d
    161e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1620:	6b 85       	ldd	r22, Y+11	; 0x0b
    1622:	7c 85       	ldd	r23, Y+12	; 0x0c
    1624:	8d 85       	ldd	r24, Y+13	; 0x0d
    1626:	9e 85       	ldd	r25, Y+14	; 0x0e
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a ef       	ldi	r20, 0xFA	; 250
    162e:	54 e4       	ldi	r21, 0x44	; 68
    1630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	8f 83       	std	Y+7, r24	; 0x07
    163a:	98 87       	std	Y+8, r25	; 0x08
    163c:	a9 87       	std	Y+9, r26	; 0x09
    163e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	2c f4       	brge	.+10     	; 0x1662 <LCD_voidSendData+0x8e>
		__ticks = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
    1660:	3f c0       	rjmp	.+126    	; 0x16e0 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1676:	18 16       	cp	r1, r24
    1678:	4c f5       	brge	.+82     	; 0x16cc <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	7c 85       	ldd	r23, Y+12	; 0x0c
    167e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1680:	9e 85       	ldd	r25, Y+14	; 0x0e
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
    168a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	8d 83       	std	Y+5, r24	; 0x05
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <LCD_voidSendData+0xee>
    16a4:	88 ec       	ldi	r24, 0xC8	; 200
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_voidSendData+0xdc>
    16b4:	9c 83       	std	Y+4, r25	; 0x04
    16b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f7       	brne	.-38     	; 0x16a4 <LCD_voidSendData+0xd0>
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	6f 81       	ldd	r22, Y+7	; 0x07
    16ce:	78 85       	ldd	r23, Y+8	; 0x08
    16d0:	89 85       	ldd	r24, Y+9	; 0x09
    16d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_voidSendData+0x118>
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // wait till it become high
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_E_PIN , LOW);
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	64 e0       	ldi	r22, 0x04	; 4
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>

}
    16fe:	2f 96       	adiw	r28, 0x0f	; 15
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <LCD_voidInit>:

void LCD_voidInit()
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	2e 97       	sbiw	r28, 0x0e	; 14
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	ac e0       	ldi	r26, 0x0C	; 12
    172a:	b2 e4       	ldi	r27, 0x42	; 66
    172c:	8b 87       	std	Y+11, r24	; 0x0b
    172e:	9c 87       	std	Y+12, r25	; 0x0c
    1730:	ad 87       	std	Y+13, r26	; 0x0d
    1732:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4a ef       	ldi	r20, 0xFA	; 250
    1742:	54 e4       	ldi	r21, 0x44	; 68
    1744:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	8f 83       	std	Y+7, r24	; 0x07
    174e:	98 87       	std	Y+8, r25	; 0x08
    1750:	a9 87       	std	Y+9, r26	; 0x09
    1752:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1754:	6f 81       	ldd	r22, Y+7	; 0x07
    1756:	78 85       	ldd	r23, Y+8	; 0x08
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	9a 85       	ldd	r25, Y+10	; 0x0a
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	2c f4       	brge	.+10     	; 0x1776 <LCD_voidInit+0x66>
		__ticks = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	3f c0       	rjmp	.+126    	; 0x17f4 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	3f ef       	ldi	r19, 0xFF	; 255
    1782:	4f e7       	ldi	r20, 0x7F	; 127
    1784:	57 e4       	ldi	r21, 0x47	; 71
    1786:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    178a:	18 16       	cp	r1, r24
    178c:	4c f5       	brge	.+82     	; 0x17e0 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1790:	7c 85       	ldd	r23, Y+12	; 0x0c
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	9e 85       	ldd	r25, Y+14	; 0x0e
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e2       	ldi	r20, 0x20	; 32
    179c:	51 e4       	ldi	r21, 0x41	; 65
    179e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <LCD_voidInit+0xc6>
    17b8:	88 ec       	ldi	r24, 0xC8	; 200
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	8b 83       	std	Y+3, r24	; 0x03
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <LCD_voidInit+0xb4>
    17c8:	9c 83       	std	Y+4, r25	; 0x04
    17ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <LCD_voidInit+0xa8>
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <LCD_voidInit+0xf0>
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
	/*Wait after the power on for 35 ms*/
	_delay_ms(35);

	/*Function Set
	 * 2 Lines  - 5x8 size */
	LCD_voidSendCommand(0b00111100);
    1808:	8c e3       	ldi	r24, 0x3C	; 60
    180a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LCD_voidSendCommand>

	/*Display on/off Control
	 * Display on  -  Cursor off  -  Blink off */
	LCD_voidSendCommand(0b00001100);
    180e:	8c e0       	ldi	r24, 0x0C	; 12
    1810:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LCD_voidSendCommand>

	/*Display Clear */
	LCD_voidSendCommand(0b00000001);
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LCD_voidSendCommand>

}
    181a:	2e 96       	adiw	r28, 0x0e	; 14
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_u8String)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <LCD_voidWriteString+0x6>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	9b 83       	std	Y+3, r25	; 0x03
    183a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    183c:	19 82       	std	Y+1, r1	; 0x01
    183e:	0e c0       	rjmp	.+28     	; 0x185c <LCD_voidWriteString+0x30>

	while(Copy_u8String[Local_u8Counter] != '\0')
	{
		LCD_voidSendData(Copy_u8String[Local_u8Counter]);
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	9b 81       	ldd	r25, Y+3	; 0x03
    184a:	fc 01       	movw	r30, r24
    184c:	e2 0f       	add	r30, r18
    184e:	f3 1f       	adc	r31, r19
    1850:	80 81       	ld	r24, Z
    1852:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_voidSendData>
		Local_u8Counter++;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8* Copy_u8String)
{
	u8 Local_u8Counter = 0;

	while(Copy_u8String[Local_u8Counter] != '\0')
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	9b 81       	ldd	r25, Y+3	; 0x03
    1866:	fc 01       	movw	r30, r24
    1868:	e2 0f       	add	r30, r18
    186a:	f3 1f       	adc	r31, r19
    186c:	80 81       	ld	r24, Z
    186e:	88 23       	and	r24, r24
    1870:	39 f7       	brne	.-50     	; 0x1840 <LCD_voidWriteString+0x14>
	{
		LCD_voidSendData(Copy_u8String[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <LCD_voidWriteDecimalNumber>:

void LCD_voidWriteDecimalNumber(s16 Copy_s16Number)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <LCD_voidWriteDecimalNumber+0x6>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_s16Number>=0 && Copy_s16Number<=9)
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	99 23       	and	r25, r25
    1892:	54 f0       	brlt	.+20     	; 0x18a8 <LCD_voidWriteDecimalNumber+0x2a>
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	8a 30       	cpi	r24, 0x0A	; 10
    189a:	91 05       	cpc	r25, r1
    189c:	2c f4       	brge	.+10     	; 0x18a8 <LCD_voidWriteDecimalNumber+0x2a>
	LCD_voidSendData(Copy_s16Number+48);
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	80 5d       	subi	r24, 0xD0	; 208
    18a2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_voidSendData>
    18a6:	71 c0       	rjmp	.+226    	; 0x198a <LCD_voidWriteDecimalNumber+0x10c>
	else if(Copy_s16Number>(-10000) && Copy_s16Number<=(-1))
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	28 ed       	ldi	r18, 0xD8	; 216
    18ae:	81 3f       	cpi	r24, 0xF1	; 241
    18b0:	92 07       	cpc	r25, r18
    18b2:	7c f0       	brlt	.+30     	; 0x18d2 <LCD_voidWriteDecimalNumber+0x54>
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	99 23       	and	r25, r25
    18ba:	5c f4       	brge	.+22     	; 0x18d2 <LCD_voidWriteDecimalNumber+0x54>
	{
		LCD_voidSendData('-');
    18bc:	8d e2       	ldi	r24, 0x2D	; 45
    18be:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_voidSendData>
		LCD_voidWriteDecimalNumber((-1)*Copy_s16Number);
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	90 95       	com	r25
    18c8:	81 95       	neg	r24
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>
    18d0:	5c c0       	rjmp	.+184    	; 0x198a <LCD_voidWriteDecimalNumber+0x10c>
	}
	else if(Copy_s16Number>9 && Copy_s16Number<100)
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	8a 30       	cpi	r24, 0x0A	; 10
    18d8:	91 05       	cpc	r25, r1
    18da:	cc f0       	brlt	.+50     	; 0x190e <LCD_voidWriteDecimalNumber+0x90>
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	84 36       	cpi	r24, 0x64	; 100
    18e2:	91 05       	cpc	r25, r1
    18e4:	a4 f4       	brge	.+40     	; 0x190e <LCD_voidWriteDecimalNumber+0x90>
	{
		LCD_voidWriteDecimalNumber(Copy_s16Number/10);
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	2a e0       	ldi	r18, 0x0A	; 10
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	b9 01       	movw	r22, r18
    18f0:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodhi4>
    18f4:	cb 01       	movw	r24, r22
    18f6:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>
		LCD_voidWriteDecimalNumber(Copy_s16Number%10);
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	2a e0       	ldi	r18, 0x0A	; 10
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	b9 01       	movw	r22, r18
    1904:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodhi4>
    1908:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>
    190c:	3e c0       	rjmp	.+124    	; 0x198a <LCD_voidWriteDecimalNumber+0x10c>
	}
	else if(Copy_s16Number>=100 && Copy_s16Number<1000)
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	84 36       	cpi	r24, 0x64	; 100
    1914:	91 05       	cpc	r25, r1
    1916:	d4 f0       	brlt	.+52     	; 0x194c <LCD_voidWriteDecimalNumber+0xce>
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	23 e0       	ldi	r18, 0x03	; 3
    191e:	88 3e       	cpi	r24, 0xE8	; 232
    1920:	92 07       	cpc	r25, r18
    1922:	a4 f4       	brge	.+40     	; 0x194c <LCD_voidWriteDecimalNumber+0xce>
	{
		LCD_voidWriteDecimalNumber(Copy_s16Number/10);
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	2a e0       	ldi	r18, 0x0A	; 10
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	b9 01       	movw	r22, r18
    192e:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodhi4>
    1932:	cb 01       	movw	r24, r22
    1934:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>
		LCD_voidWriteDecimalNumber(Copy_s16Number%10);
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	2a e0       	ldi	r18, 0x0A	; 10
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	b9 01       	movw	r22, r18
    1942:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodhi4>
    1946:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>
    194a:	1f c0       	rjmp	.+62     	; 0x198a <LCD_voidWriteDecimalNumber+0x10c>
	}
	else if(Copy_s16Number>=1000 && Copy_s16Number<10000)
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	23 e0       	ldi	r18, 0x03	; 3
    1952:	88 3e       	cpi	r24, 0xE8	; 232
    1954:	92 07       	cpc	r25, r18
    1956:	cc f0       	brlt	.+50     	; 0x198a <LCD_voidWriteDecimalNumber+0x10c>
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	27 e2       	ldi	r18, 0x27	; 39
    195e:	80 31       	cpi	r24, 0x10	; 16
    1960:	92 07       	cpc	r25, r18
    1962:	9c f4       	brge	.+38     	; 0x198a <LCD_voidWriteDecimalNumber+0x10c>
	{
		LCD_voidWriteDecimalNumber(Copy_s16Number/10);
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	2a e0       	ldi	r18, 0x0A	; 10
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	b9 01       	movw	r22, r18
    196e:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodhi4>
    1972:	cb 01       	movw	r24, r22
    1974:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>
		LCD_voidWriteDecimalNumber(Copy_s16Number%10);
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	2a e0       	ldi	r18, 0x0A	; 10
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	b9 01       	movw	r22, r18
    1982:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodhi4>
    1986:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>
	}
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <LCD_voidWriteFloatNumber>:

void LCD_voidWriteFloatNumber(f32 Copy_f32Number)
{
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <LCD_voidWriteFloatNumber+0xa>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <LCD_voidWriteFloatNumber+0xc>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	69 83       	std	Y+1, r22	; 0x01
    19a6:	7a 83       	std	Y+2, r23	; 0x02
    19a8:	8b 83       	std	Y+3, r24	; 0x03
    19aa:	9c 83       	std	Y+4, r25	; 0x04
	LCD_voidWriteDecimalNumber((s16)Copy_f32Number);
    19ac:	69 81       	ldd	r22, Y+1	; 0x01
    19ae:	7a 81       	ldd	r23, Y+2	; 0x02
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>
	LCD_voidSendData('.');
    19c0:	8e e2       	ldi	r24, 0x2E	; 46
    19c2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_voidSendData>
	if(((s16)(Copy_f32Number*10))%((s16)(Copy_f32Number)) > 0)
    19c6:	69 81       	ldd	r22, Y+1	; 0x01
    19c8:	7a 81       	ldd	r23, Y+2	; 0x02
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8c 01       	movw	r16, r24
    19ec:	69 81       	ldd	r22, Y+1	; 0x01
    19ee:	7a 81       	ldd	r23, Y+2	; 0x02
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9c 01       	movw	r18, r24
    19fe:	c8 01       	movw	r24, r16
    1a00:	b9 01       	movw	r22, r18
    1a02:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodhi4>
    1a06:	18 16       	cp	r1, r24
    1a08:	19 06       	cpc	r1, r25
    1a0a:	1c f5       	brge	.+70     	; 0x1a52 <LCD_voidWriteFloatNumber+0xbe>
		LCD_voidWriteDecimalNumber(((s16)(Copy_f32Number*10))%((s16)(Copy_f32Number)));
    1a0c:	69 81       	ldd	r22, Y+1	; 0x01
    1a0e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8c 01       	movw	r16, r24
    1a32:	69 81       	ldd	r22, Y+1	; 0x01
    1a34:	7a 81       	ldd	r23, Y+2	; 0x02
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9c 01       	movw	r18, r24
    1a44:	c8 01       	movw	r24, r16
    1a46:	b9 01       	movw	r22, r18
    1a48:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodhi4>
    1a4c:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>
    1a50:	25 c0       	rjmp	.+74     	; 0x1a9c <LCD_voidWriteFloatNumber+0x108>
	else
		LCD_voidWriteDecimalNumber(((s16)(Copy_f32Number*(-10)))%((s16)((-1)*Copy_f32Number)));
    1a52:	69 81       	ldd	r22, Y+1	; 0x01
    1a54:	7a 81       	ldd	r23, Y+2	; 0x02
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e2       	ldi	r20, 0x20	; 32
    1a60:	51 ec       	ldi	r21, 0xC1	; 193
    1a62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8c 01       	movw	r16, r24
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	ab 81       	ldd	r26, Y+3	; 0x03
    1a7e:	bc 81       	ldd	r27, Y+4	; 0x04
    1a80:	b0 58       	subi	r27, 0x80	; 128
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9c 01       	movw	r18, r24
    1a90:	c8 01       	movw	r24, r16
    1a92:	b9 01       	movw	r22, r18
    1a94:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodhi4>
    1a98:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_voidWriteDecimalNumber>

}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	08 95       	ret

00001aae <LCD_voidWriteStringNumber>:

void LCD_voidWriteStringNumber(u16 Copy_u16Number)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	a2 97       	sbiw	r28, 0x22	; 34
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	9a a3       	std	Y+34, r25	; 0x22
    1ac4:	89 a3       	std	Y+33, r24	; 0x21
	u32 num[8];
	itoa(Copy_u16Number,num,10);
    1ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aca:	9e 01       	movw	r18, r28
    1acc:	2f 5f       	subi	r18, 0xFF	; 255
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	b9 01       	movw	r22, r18
    1ad2:	4a e0       	ldi	r20, 0x0A	; 10
    1ad4:	50 e0       	ldi	r21, 0x00	; 0
    1ad6:	0e 94 1f 11 	call	0x223e	; 0x223e <itoa>
	LCD_voidWriteString(num);
    1ada:	ce 01       	movw	r24, r28
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	0e 94 16 0c 	call	0x182c	; 0x182c <LCD_voidWriteString>
}
    1ae2:	a2 96       	adiw	r28, 0x22	; 34
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <LCD_voidConfigDirection>:

void LCD_voidConfigDirection()
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
	/*Set the direction for LCD pins */
	DIO_voidSetPortDirection(LCD_DATA_PORT, OUTPUT_PORT);
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	6f ef       	ldi	r22, 0xFF	; 255
    1b00:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(LCD_CRTL_PORT , LCD_RS_PIN , OUTPUT_PIN);
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CRTL_PORT , LCD_RW_PIN , OUTPUT_PIN);
    1b0e:	83 e0       	ldi	r24, 0x03	; 3
    1b10:	63 e0       	ldi	r22, 0x03	; 3
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CRTL_PORT , LCD_E_PIN  , OUTPUT_PIN);
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	64 e0       	ldi	r22, 0x04	; 4
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
}
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <LCD_voidGoToXY+0x6>
    1b2e:	0f 92       	push	r0
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	8a 83       	std	Y+2, r24	; 0x02
    1b36:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAM_Address;
	if(Copy_u8YPos == LCD_LINE_ONE)
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	88 23       	and	r24, r24
    1b3c:	19 f4       	brne	.+6      	; 0x1b44 <LCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAM_Address = Copy_u8XPos;
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	06 c0       	rjmp	.+12     	; 0x1b50 <LCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos == LCD_LINE_TWO)
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	19 f4       	brne	.+6      	; 0x1b50 <LCD_voidGoToXY+0x28>
	{
		Local_u8DDRAM_Address = Copy_u8XPos+0x40;
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	80 5c       	subi	r24, 0xC0	; 192
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_voidSendCommand(Local_u8DDRAM_Address+128);
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	80 58       	subi	r24, 0x80	; 128
    1b54:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LCD_voidSendCommand>
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <LCD_voidWriteSpecialCharacter>:


void LCD_voidWriteSpecialCharacter(u8 *Copy_u8XPattern,u8 Copy_u8XPatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	27 97       	sbiw	r28, 0x07	; 7
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	9c 83       	std	Y+4, r25	; 0x04
    1b7a:	8b 83       	std	Y+3, r24	; 0x03
    1b7c:	6d 83       	std	Y+5, r22	; 0x05
    1b7e:	4e 83       	std	Y+6, r20	; 0x06
    1b80:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAM_Address = Copy_u8XPatternNumber*8; //Address at CGRAM with number =Copy_u8XPatternNumber
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidSendCommand(Local_u8CGRAM_Address+64);
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	80 5c       	subi	r24, 0xC0	; 192
    1b9a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LCD_voidSendCommand>

	for(u8 Local_u8Counter=0 ; Local_u8Counter<8 ; Local_u8Counter++)
    1b9e:	19 82       	std	Y+1, r1	; 0x01
    1ba0:	0e c0       	rjmp	.+28     	; 0x1bbe <LCD_voidWriteSpecialCharacter+0x5a>
	{
		LCD_voidSendData(Copy_u8XPattern[Local_u8Counter]);
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	fc 01       	movw	r30, r24
    1bae:	e2 0f       	add	r30, r18
    1bb0:	f3 1f       	adc	r31, r19
    1bb2:	80 81       	ld	r24, Z
    1bb4:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_voidSendData>
{
	u8 Local_u8CGRAM_Address = Copy_u8XPatternNumber*8; //Address at CGRAM with number =Copy_u8XPatternNumber

	LCD_voidSendCommand(Local_u8CGRAM_Address+64);

	for(u8 Local_u8Counter=0 ; Local_u8Counter<8 ; Local_u8Counter++)
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	8f 5f       	subi	r24, 0xFF	; 255
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	88 30       	cpi	r24, 0x08	; 8
    1bc2:	78 f3       	brcs	.-34     	; 0x1ba2 <LCD_voidWriteSpecialCharacter+0x3e>
	{
		LCD_voidSendData(Copy_u8XPattern[Local_u8Counter]);
	}

	LCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos); //DDRAM Location selection
    1bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc8:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_voidGoToXY>

	LCD_voidSendData(Copy_u8XPatternNumber); //DDRAM prints the value saved at address Copy_u8XPatternNumber
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_voidSendData>
}
    1bd2:	27 96       	adiw	r28, 0x07	; 7
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <Seven_voidSegmentInit>:
#include "DIO_Interface.h"
#include "SevenSegment_Config.h"
#include "SevenSegment_Intereface.h"

void Seven_voidSegmentInit()
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(SEGMENT_PORT,SEGMENT_PIN0,OUTPUT_PIN);
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PORT,SEGMENT_PIN1,OUTPUT_PIN);
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	41 e0       	ldi	r20, 0x01	; 1
    1bfc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PORT,SEGMENT_PIN2,OUTPUT_PIN);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	62 e0       	ldi	r22, 0x02	; 2
    1c04:	41 e0       	ldi	r20, 0x01	; 1
    1c06:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PORT,SEGMENT_PIN3,OUTPUT_PIN);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	63 e0       	ldi	r22, 0x03	; 3
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PORT,SEGMENT_PIN4,OUTPUT_PIN);
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	64 e0       	ldi	r22, 0x04	; 4
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PORT,SEGMENT_PIN5,OUTPUT_PIN);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	65 e0       	ldi	r22, 0x05	; 5
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PORT,SEGMENT_PIN6,OUTPUT_PIN);
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	66 e0       	ldi	r22, 0x06	; 6
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <Seven_voidSegmentClear>:

void Seven_voidSegmentClear()
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	0f 92       	push	r0
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	u8 NotUsed = DIO_u8GetPinValue(SEGMENT_PORT,SEGMENT_NOT_USED_PIN);
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	67 e0       	ldi	r22, 0x07	; 7
    1c46:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_u8GetPinValue>
    1c4a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortValue(SEGMENT_PORT,LOW)  ;
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(SEGMENT_PORT,SEGMENT_NOT_USED_PIN,NotUsed);
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	67 e0       	ldi	r22, 0x07	; 7
    1c58:	49 81       	ldd	r20, Y+1	; 0x01
    1c5a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
}
    1c5e:	0f 90       	pop	r0
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <Seven_voidlightSegment>:

void Seven_voidlightSegment(u8 Number)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <Seven_voidlightSegment+0x6>
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <Seven_voidlightSegment+0x8>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	8a 83       	std	Y+2, r24	; 0x02
	u8 NotUsed = DIO_u8GetPinValue(SEGMENT_PORT,SEGMENT_NOT_USED_PIN);
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	67 e0       	ldi	r22, 0x07	; 7
    1c78:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_u8GetPinValue>
    1c7c:	89 83       	std	Y+1, r24	; 0x01
	switch (Number)
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	3c 83       	std	Y+4, r19	; 0x04
    1c86:	2b 83       	std	Y+3, r18	; 0x03
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	91 05       	cpc	r25, r1
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <Seven_voidlightSegment+0x2e>
    1c92:	55 c0       	rjmp	.+170    	; 0x1d3e <Seven_voidlightSegment+0xd8>
    1c94:	2b 81       	ldd	r18, Y+3	; 0x03
    1c96:	3c 81       	ldd	r19, Y+4	; 0x04
    1c98:	25 30       	cpi	r18, 0x05	; 5
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	dc f4       	brge	.+54     	; 0x1cd4 <Seven_voidlightSegment+0x6e>
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <Seven_voidlightSegment+0x44>
    1ca8:	3b c0       	rjmp	.+118    	; 0x1d20 <Seven_voidlightSegment+0xba>
    1caa:	2b 81       	ldd	r18, Y+3	; 0x03
    1cac:	3c 81       	ldd	r19, Y+4	; 0x04
    1cae:	22 30       	cpi	r18, 0x02	; 2
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <Seven_voidlightSegment+0x58>
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	69 f1       	breq	.+90     	; 0x1d16 <Seven_voidlightSegment+0xb0>
    1cbc:	5d c0       	rjmp	.+186    	; 0x1d78 <Seven_voidlightSegment+0x112>
    1cbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc2:	22 30       	cpi	r18, 0x02	; 2
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	89 f1       	breq	.+98     	; 0x1d2a <Seven_voidlightSegment+0xc4>
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	83 30       	cpi	r24, 0x03	; 3
    1cce:	91 05       	cpc	r25, r1
    1cd0:	89 f1       	breq	.+98     	; 0x1d34 <Seven_voidlightSegment+0xce>
    1cd2:	52 c0       	rjmp	.+164    	; 0x1d78 <Seven_voidlightSegment+0x112>
    1cd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd8:	27 30       	cpi	r18, 0x07	; 7
    1cda:	31 05       	cpc	r19, r1
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <Seven_voidlightSegment+0x7a>
    1cde:	3e c0       	rjmp	.+124    	; 0x1d5c <Seven_voidlightSegment+0xf6>
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	88 30       	cpi	r24, 0x08	; 8
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	5c f4       	brge	.+22     	; 0x1d00 <Seven_voidlightSegment+0x9a>
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	25 30       	cpi	r18, 0x05	; 5
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	51 f1       	breq	.+84     	; 0x1d48 <Seven_voidlightSegment+0xe2>
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	86 30       	cpi	r24, 0x06	; 6
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	51 f1       	breq	.+84     	; 0x1d52 <Seven_voidlightSegment+0xec>
    1cfe:	3c c0       	rjmp	.+120    	; 0x1d78 <Seven_voidlightSegment+0x112>
    1d00:	2b 81       	ldd	r18, Y+3	; 0x03
    1d02:	3c 81       	ldd	r19, Y+4	; 0x04
    1d04:	28 30       	cpi	r18, 0x08	; 8
    1d06:	31 05       	cpc	r19, r1
    1d08:	71 f1       	breq	.+92     	; 0x1d66 <Seven_voidlightSegment+0x100>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	89 30       	cpi	r24, 0x09	; 9
    1d10:	91 05       	cpc	r25, r1
    1d12:	71 f1       	breq	.+92     	; 0x1d70 <Seven_voidlightSegment+0x10a>
    1d14:	31 c0       	rjmp	.+98     	; 0x1d78 <Seven_voidlightSegment+0x112>
	{
		case (0) : DIO_voidSetPortValue(SEGMENT_PORT,63)  ; break ;
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	6f e3       	ldi	r22, 0x3F	; 63
    1d1a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
    1d1e:	2c c0       	rjmp	.+88     	; 0x1d78 <Seven_voidlightSegment+0x112>
		case (1) : DIO_voidSetPortValue(SEGMENT_PORT,6)   ; break ;
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	66 e0       	ldi	r22, 0x06	; 6
    1d24:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
    1d28:	27 c0       	rjmp	.+78     	; 0x1d78 <Seven_voidlightSegment+0x112>
		case (2) : DIO_voidSetPortValue(SEGMENT_PORT,91)  ; break ;
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	6b e5       	ldi	r22, 0x5B	; 91
    1d2e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
    1d32:	22 c0       	rjmp	.+68     	; 0x1d78 <Seven_voidlightSegment+0x112>
		case (3) : DIO_voidSetPortValue(SEGMENT_PORT,79)  ; break ;
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	6f e4       	ldi	r22, 0x4F	; 79
    1d38:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
    1d3c:	1d c0       	rjmp	.+58     	; 0x1d78 <Seven_voidlightSegment+0x112>
		case (4) : DIO_voidSetPortValue(SEGMENT_PORT,102) ; break ;
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	66 e6       	ldi	r22, 0x66	; 102
    1d42:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
    1d46:	18 c0       	rjmp	.+48     	; 0x1d78 <Seven_voidlightSegment+0x112>
		case (5) : DIO_voidSetPortValue(SEGMENT_PORT,109) ; break ;
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	6d e6       	ldi	r22, 0x6D	; 109
    1d4c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
    1d50:	13 c0       	rjmp	.+38     	; 0x1d78 <Seven_voidlightSegment+0x112>
		case (6) : DIO_voidSetPortValue(SEGMENT_PORT,125) ; break ;
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	6d e7       	ldi	r22, 0x7D	; 125
    1d56:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
    1d5a:	0e c0       	rjmp	.+28     	; 0x1d78 <Seven_voidlightSegment+0x112>
		case (7) : DIO_voidSetPortValue(SEGMENT_PORT,7)   ; break ;
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	67 e0       	ldi	r22, 0x07	; 7
    1d60:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
    1d64:	09 c0       	rjmp	.+18     	; 0x1d78 <Seven_voidlightSegment+0x112>
		case (8) : DIO_voidSetPortValue(SEGMENT_PORT,127) ; break ;
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	6f e7       	ldi	r22, 0x7F	; 127
    1d6a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <Seven_voidlightSegment+0x112>
		case (9) : DIO_voidSetPortValue(SEGMENT_PORT,111) ; break ;
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	6f e6       	ldi	r22, 0x6F	; 111
    1d74:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_voidSetPortValue>
		default  : break ;
	}
	DIO_voidSetPinValue(SEGMENT_PORT,SEGMENT_NOT_USED_PIN,NotUsed);
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	67 e0       	ldi	r22, 0x07	; 7
    1d7c:	49 81       	ldd	r20, Y+1	; 0x01
    1d7e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <UART_voidInit>:

#include "UART_Register.h"
#include "UART_Interface.h"

void UART_voidInit()
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
	/*Select the character size in bit 2*/
	CLR_BIT(UCSRB , UCSRB_UCSZ2);
    1d98:	aa e2       	ldi	r26, 0x2A	; 42
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ea e2       	ldi	r30, 0x2A	; 42
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8b 7f       	andi	r24, 0xFB	; 251
    1da4:	8c 93       	st	X, r24
	 * - Asynchronous mode
	 * - no parity
	 * - 1 stop bit
	 * - 8 bit character size
	 * - polarity = 0*/
	UCSRC = 0b10000110;
    1da6:	e0 e4       	ldi	r30, 0x40	; 64
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	86 e8       	ldi	r24, 0x86	; 134
    1dac:	80 83       	st	Z, r24

	/*Set the baudrate 9600 bps*/
	UBRRL = 51;
    1dae:	e9 e2       	ldi	r30, 0x29	; 41
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	83 e3       	ldi	r24, 0x33	; 51
    1db4:	80 83       	st	Z, r24

	/*Enable the RX and TX*/
	SET_BIT(UCSRB , UCSRB_RXEN);
    1db6:	aa e2       	ldi	r26, 0x2A	; 42
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	ea e2       	ldi	r30, 0x2A	; 42
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 61       	ori	r24, 0x10	; 16
    1dc2:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
    1dc4:	aa e2       	ldi	r26, 0x2A	; 42
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	ea e2       	ldi	r30, 0x2A	; 42
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 60       	ori	r24, 0x08	; 8
    1dd0:	8c 93       	st	X, r24
}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <UART_voidWriteData>:

void UART_voidWriteData(u8 Copy_u8Data)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	0f 92       	push	r0
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	89 83       	std	Y+1, r24	; 0x01
	/*Waiting until the transmit buffer empty and ready for new data*/
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
    1de4:	eb e2       	ldi	r30, 0x2B	; 43
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	82 95       	swap	r24
    1dec:	86 95       	lsr	r24
    1dee:	87 70       	andi	r24, 0x07	; 7
    1df0:	88 2f       	mov	r24, r24
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	81 70       	andi	r24, 0x01	; 1
    1df6:	90 70       	andi	r25, 0x00	; 0
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	a1 f3       	breq	.-24     	; 0x1de4 <UART_voidWriteData+0xc>

	/*Put the new data*/
	UDR = Copy_u8Data;
    1dfc:	ec e2       	ldi	r30, 0x2C	; 44
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	80 83       	st	Z, r24
}
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <UART_u8ReadData>:

u8 UART_u8ReadData()
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	/*Waiting until the receive buffer complete and the data be ready in UDR*/
	while(GET_BIT(UCSRA , UCSRA_RXC) == 0);
    1e14:	eb e2       	ldi	r30, 0x2B	; 43
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 23       	and	r24, r24
    1e1c:	dc f7       	brge	.-10     	; 0x1e14 <UART_u8ReadData+0x8>

	/*Read or return the data */
	return UDR;
    1e1e:	ec e2       	ldi	r30, 0x2C	; 44
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
}
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <main>:
#define DONE		'='

u8 CompareArray(u8 *Array1,u8 *Array2);

void main(void)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	a2 97       	sbiw	r28, 0x22	; 34
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8User[4]     = {1,2,3,4};
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	8b 8b       	std	Y+19, r24	; 0x13
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	8c 8b       	std	Y+20, r24	; 0x14
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	8d 8b       	std	Y+21, r24	; 0x15
    1e4a:	84 e0       	ldi	r24, 0x04	; 4
    1e4c:	8e 8b       	std	Y+22, r24	; 0x16
	u8 Local_u8Password[4] = {1,2,3,4};
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	8f 8b       	std	Y+23, r24	; 0x17
    1e52:	82 e0       	ldi	r24, 0x02	; 2
    1e54:	88 8f       	std	Y+24, r24	; 0x18
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	89 8f       	std	Y+25, r24	; 0x19
    1e5a:	84 e0       	ldi	r24, 0x04	; 4
    1e5c:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8Trails=3;
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	8a 8b       	std	Y+18, r24	; 0x12

	//Button
	DIO_voidSetPinDirection(DIO_PORTA,PIN7,INPUT_PIN);
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	67 e0       	ldi	r22, 0x07	; 7
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_PORTA,PIN7,HIGH);
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	67 e0       	ldi	r22, 0x07	; 7
    1e70:	41 e0       	ldi	r20, 0x01	; 1
    1e72:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_voidSetPinValue>

	UART_voidInit();
    1e76:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <UART_voidInit>
	KeyPad_voidInit();
    1e7a:	0e 94 09 09 	call	0x1212	; 0x1212 <KeyPad_voidInit>
	Seven_voidSegmentInit();
    1e7e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Seven_voidSegmentInit>
    1e82:	77 c0       	rjmp	.+238    	; 0x1f72 <main+0x148>

	while(1)
	{
		while(DIO_u8GetPinValue(DIO_PORTA,PIN7) != LOW)
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a8 ec       	ldi	r26, 0xC8	; 200
    1e8a:	b2 e4       	ldi	r27, 0x42	; 66
    1e8c:	8b 87       	std	Y+11, r24	; 0x0b
    1e8e:	9c 87       	std	Y+12, r25	; 0x0c
    1e90:	ad 87       	std	Y+13, r26	; 0x0d
    1e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a ef       	ldi	r20, 0xFA	; 250
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8f 83       	std	Y+7, r24	; 0x07
    1eae:	98 87       	std	Y+8, r25	; 0x08
    1eb0:	a9 87       	std	Y+9, r26	; 0x09
    1eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <main+0xac>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	3f c0       	rjmp	.+126    	; 0x1f54 <main+0x12a>
	else if (__tmp > 65535)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	4c f5       	brge	.+82     	; 0x1f40 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <main+0x10c>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <main+0xfa>
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	69 f7       	brne	.-38     	; 0x1f18 <main+0xee>
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <main+0x136>
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(100);
			UART_voidWriteData(DISABLE);
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
			Seven_voidSegmentClear();
    1f6e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Seven_voidSegmentClear>
	KeyPad_voidInit();
	Seven_voidSegmentInit();

	while(1)
	{
		while(DIO_u8GetPinValue(DIO_PORTA,PIN7) != LOW)
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	67 e0       	ldi	r22, 0x07	; 7
    1f76:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_u8GetPinValue>
    1f7a:	88 23       	and	r24, r24
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <main+0x156>
    1f7e:	82 cf       	rjmp	.-252    	; 0x1e84 <main+0x5a>
		{
			_delay_ms(100);
			UART_voidWriteData(DISABLE);
			Seven_voidSegmentClear();
		}
		Seven_voidlightSegment(Local_u8Trails);
    1f80:	8a 89       	ldd	r24, Y+18	; 0x12
    1f82:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <Seven_voidlightSegment>
		UART_voidWriteData(ENABLE);
    1f86:	83 e0       	ldi	r24, 0x03	; 3
    1f88:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
		while(UART_u8ReadData()!=DONE);
    1f8c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <UART_u8ReadData>
    1f90:	8d 33       	cpi	r24, 0x3D	; 61
    1f92:	e1 f7       	brne	.-8      	; 0x1f8c <main+0x162>
		u8 i=0;
    1f94:	19 8a       	std	Y+17, r1	; 0x11
		u8 j=0;
    1f96:	18 8a       	std	Y+16, r1	; 0x10
		u8 Num=0;
    1f98:	1f 86       	std	Y+15, r1	; 0x0f
    1f9a:	b2 c0       	rjmp	.+356    	; 0x2100 <main+0x2d6>
		while(Local_u8Trails>0)
		{
			u8 Local_u8UserBuffer[4]={0};
    1f9c:	1b 8e       	std	Y+27, r1	; 0x1b
    1f9e:	1c 8e       	std	Y+28, r1	; 0x1c
    1fa0:	1d 8e       	std	Y+29, r1	; 0x1d
    1fa2:	1e 8e       	std	Y+30, r1	; 0x1e
			u8 Local_u8PasswordBuffer[4]={0};
    1fa4:	1f 8e       	std	Y+31, r1	; 0x1f
    1fa6:	18 a2       	std	Y+32, r1	; 0x20
    1fa8:	19 a2       	std	Y+33, r1	; 0x21
    1faa:	1a a2       	std	Y+34, r1	; 0x22
    1fac:	26 c0       	rjmp	.+76     	; 0x1ffa <main+0x1d0>
			//User Entry
			while(Num != DONE)
			{
				Num=KeyPad_u8GetPress();
    1fae:	0e 94 53 09 	call	0x12a6	; 0x12a6 <KeyPad_u8GetPress>
    1fb2:	8f 87       	std	Y+15, r24	; 0x0f
				if(Num >='0' && Num<='9' && i<4 )
    1fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb6:	80 33       	cpi	r24, 0x30	; 48
    1fb8:	00 f1       	brcs	.+64     	; 0x1ffa <main+0x1d0>
    1fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fbc:	8a 33       	cpi	r24, 0x3A	; 58
    1fbe:	e8 f4       	brcc	.+58     	; 0x1ffa <main+0x1d0>
    1fc0:	89 89       	ldd	r24, Y+17	; 0x11
    1fc2:	84 30       	cpi	r24, 0x04	; 4
    1fc4:	d0 f4       	brcc	.+52     	; 0x1ffa <main+0x1d0>
				{
					while(KeyPad_u8GetPress() >= '0' && KeyPad_u8GetPress() <= '9');
    1fc6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <KeyPad_u8GetPress>
    1fca:	80 33       	cpi	r24, 0x30	; 48
    1fcc:	20 f0       	brcs	.+8      	; 0x1fd6 <main+0x1ac>
    1fce:	0e 94 53 09 	call	0x12a6	; 0x12a6 <KeyPad_u8GetPress>
    1fd2:	8a 33       	cpi	r24, 0x3A	; 58
    1fd4:	c0 f3       	brcs	.-16     	; 0x1fc6 <main+0x19c>
					UART_voidWriteData(Num);
    1fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd8:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
					Local_u8UserBuffer[i]=Num-48;
    1fdc:	89 89       	ldd	r24, Y+17	; 0x11
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	40 53       	subi	r20, 0x30	; 48
    1fe8:	ce 01       	movw	r24, r28
    1fea:	4b 96       	adiw	r24, 0x1b	; 27
    1fec:	fc 01       	movw	r30, r24
    1fee:	e2 0f       	add	r30, r18
    1ff0:	f3 1f       	adc	r31, r19
    1ff2:	40 83       	st	Z, r20
					i++;
    1ff4:	89 89       	ldd	r24, Y+17	; 0x11
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(Local_u8Trails>0)
		{
			u8 Local_u8UserBuffer[4]={0};
			u8 Local_u8PasswordBuffer[4]={0};
			//User Entry
			while(Num != DONE)
    1ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ffc:	8d 33       	cpi	r24, 0x3D	; 61
    1ffe:	b9 f6       	brne	.-82     	; 0x1fae <main+0x184>
					UART_voidWriteData(Num);
					Local_u8UserBuffer[i]=Num-48;
					i++;
				}
			}
			i=0;
    2000:	19 8a       	std	Y+17, r1	; 0x11
			while(KeyPad_u8GetPress() == DONE);
    2002:	0e 94 53 09 	call	0x12a6	; 0x12a6 <KeyPad_u8GetPress>
    2006:	8d 33       	cpi	r24, 0x3D	; 61
    2008:	e1 f3       	breq	.-8      	; 0x2002 <main+0x1d8>
			UART_voidWriteData(DONE);
    200a:	8d e3       	ldi	r24, 0x3D	; 61
    200c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
			Num=0;
    2010:	1f 86       	std	Y+15, r1	; 0x0f
			if(CompareArray(Local_u8User,Local_u8UserBuffer) == TRUE)
    2012:	ce 01       	movw	r24, r28
    2014:	43 96       	adiw	r24, 0x13	; 19
    2016:	9e 01       	movw	r18, r28
    2018:	25 5e       	subi	r18, 0xE5	; 229
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	b9 01       	movw	r22, r18
    201e:	0e 94 8b 10 	call	0x2116	; 0x2116 <CompareArray>
    2022:	87 30       	cpi	r24, 0x07	; 7
    2024:	09 f0       	breq	.+2      	; 0x2028 <main+0x1fe>
    2026:	59 c0       	rjmp	.+178    	; 0x20da <main+0x2b0>
			{
				UART_voidWriteData(RIGHT);
    2028:	85 e0       	ldi	r24, 0x05	; 5
    202a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
    202e:	26 c0       	rjmp	.+76     	; 0x207c <main+0x252>
				//Password Entry
				while(Num != DONE)
				{
					Num=KeyPad_u8GetPress();
    2030:	0e 94 53 09 	call	0x12a6	; 0x12a6 <KeyPad_u8GetPress>
    2034:	8f 87       	std	Y+15, r24	; 0x0f
					if(Num >='0' && Num<='9' && j<4 )
    2036:	8f 85       	ldd	r24, Y+15	; 0x0f
    2038:	80 33       	cpi	r24, 0x30	; 48
    203a:	00 f1       	brcs	.+64     	; 0x207c <main+0x252>
    203c:	8f 85       	ldd	r24, Y+15	; 0x0f
    203e:	8a 33       	cpi	r24, 0x3A	; 58
    2040:	e8 f4       	brcc	.+58     	; 0x207c <main+0x252>
    2042:	88 89       	ldd	r24, Y+16	; 0x10
    2044:	84 30       	cpi	r24, 0x04	; 4
    2046:	d0 f4       	brcc	.+52     	; 0x207c <main+0x252>
					{
						while(KeyPad_u8GetPress() >= '0' && KeyPad_u8GetPress() <= '9');
    2048:	0e 94 53 09 	call	0x12a6	; 0x12a6 <KeyPad_u8GetPress>
    204c:	80 33       	cpi	r24, 0x30	; 48
    204e:	20 f0       	brcs	.+8      	; 0x2058 <main+0x22e>
    2050:	0e 94 53 09 	call	0x12a6	; 0x12a6 <KeyPad_u8GetPress>
    2054:	8a 33       	cpi	r24, 0x3A	; 58
    2056:	c0 f3       	brcs	.-16     	; 0x2048 <main+0x21e>
						UART_voidWriteData(Num);
    2058:	8f 85       	ldd	r24, Y+15	; 0x0f
    205a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
						Local_u8PasswordBuffer[j]=Num-48;
    205e:	88 89       	ldd	r24, Y+16	; 0x10
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	8f 85       	ldd	r24, Y+15	; 0x0f
    2066:	48 2f       	mov	r20, r24
    2068:	40 53       	subi	r20, 0x30	; 48
    206a:	ce 01       	movw	r24, r28
    206c:	4f 96       	adiw	r24, 0x1f	; 31
    206e:	fc 01       	movw	r30, r24
    2070:	e2 0f       	add	r30, r18
    2072:	f3 1f       	adc	r31, r19
    2074:	40 83       	st	Z, r20
						j++;
    2076:	88 89       	ldd	r24, Y+16	; 0x10
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	88 8b       	std	Y+16, r24	; 0x10
			Num=0;
			if(CompareArray(Local_u8User,Local_u8UserBuffer) == TRUE)
			{
				UART_voidWriteData(RIGHT);
				//Password Entry
				while(Num != DONE)
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	8d 33       	cpi	r24, 0x3D	; 61
    2080:	b9 f6       	brne	.-82     	; 0x2030 <main+0x206>
						UART_voidWriteData(Num);
						Local_u8PasswordBuffer[j]=Num-48;
						j++;
					}
				}
				j=0;
    2082:	18 8a       	std	Y+16, r1	; 0x10
				while(KeyPad_u8GetPress() == DONE);
    2084:	0e 94 53 09 	call	0x12a6	; 0x12a6 <KeyPad_u8GetPress>
    2088:	8d 33       	cpi	r24, 0x3D	; 61
    208a:	e1 f3       	breq	.-8      	; 0x2084 <main+0x25a>
				UART_voidWriteData(DONE);
    208c:	8d e3       	ldi	r24, 0x3D	; 61
    208e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
				Num=0;
    2092:	1f 86       	std	Y+15, r1	; 0x0f
				if(CompareArray(Local_u8Password,Local_u8PasswordBuffer) == TRUE)
    2094:	ce 01       	movw	r24, r28
    2096:	47 96       	adiw	r24, 0x17	; 23
    2098:	9e 01       	movw	r18, r28
    209a:	21 5e       	subi	r18, 0xE1	; 225
    209c:	3f 4f       	sbci	r19, 0xFF	; 255
    209e:	b9 01       	movw	r22, r18
    20a0:	0e 94 8b 10 	call	0x2116	; 0x2116 <CompareArray>
    20a4:	87 30       	cpi	r24, 0x07	; 7
    20a6:	29 f4       	brne	.+10     	; 0x20b2 <main+0x288>
				{
					UART_voidWriteData(RIGHT);
    20a8:	85 e0       	ldi	r24, 0x05	; 5
    20aa:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
					Local_u8Trails=0;
    20ae:	1a 8a       	std	Y+18, r1	; 0x12
    20b0:	27 c0       	rjmp	.+78     	; 0x2100 <main+0x2d6>
				}
				else if(CompareArray(Local_u8Password,Local_u8PasswordBuffer) == FALSE)
    20b2:	ce 01       	movw	r24, r28
    20b4:	47 96       	adiw	r24, 0x17	; 23
    20b6:	9e 01       	movw	r18, r28
    20b8:	21 5e       	subi	r18, 0xE1	; 225
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	b9 01       	movw	r22, r18
    20be:	0e 94 8b 10 	call	0x2116	; 0x2116 <CompareArray>
    20c2:	86 30       	cpi	r24, 0x06	; 6
    20c4:	e9 f4       	brne	.+58     	; 0x2100 <main+0x2d6>
				{
					UART_voidWriteData(WRONG);
    20c6:	84 e0       	ldi	r24, 0x04	; 4
    20c8:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
					Local_u8Trails--;
    20cc:	8a 89       	ldd	r24, Y+18	; 0x12
    20ce:	81 50       	subi	r24, 0x01	; 1
    20d0:	8a 8b       	std	Y+18, r24	; 0x12
					Seven_voidlightSegment(Local_u8Trails);
    20d2:	8a 89       	ldd	r24, Y+18	; 0x12
    20d4:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <Seven_voidlightSegment>
    20d8:	13 c0       	rjmp	.+38     	; 0x2100 <main+0x2d6>
				}
			}
			else if (CompareArray(Local_u8User,Local_u8UserBuffer) == FALSE)
    20da:	ce 01       	movw	r24, r28
    20dc:	43 96       	adiw	r24, 0x13	; 19
    20de:	9e 01       	movw	r18, r28
    20e0:	25 5e       	subi	r18, 0xE5	; 229
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255
    20e4:	b9 01       	movw	r22, r18
    20e6:	0e 94 8b 10 	call	0x2116	; 0x2116 <CompareArray>
    20ea:	86 30       	cpi	r24, 0x06	; 6
    20ec:	49 f4       	brne	.+18     	; 0x2100 <main+0x2d6>
			{
				UART_voidWriteData(WRONG);
    20ee:	84 e0       	ldi	r24, 0x04	; 4
    20f0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UART_voidWriteData>
				Local_u8Trails--;
    20f4:	8a 89       	ldd	r24, Y+18	; 0x12
    20f6:	81 50       	subi	r24, 0x01	; 1
    20f8:	8a 8b       	std	Y+18, r24	; 0x12
				Seven_voidlightSegment(Local_u8Trails);
    20fa:	8a 89       	ldd	r24, Y+18	; 0x12
    20fc:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <Seven_voidlightSegment>
		UART_voidWriteData(ENABLE);
		while(UART_u8ReadData()!=DONE);
		u8 i=0;
		u8 j=0;
		u8 Num=0;
		while(Local_u8Trails>0)
    2100:	8a 89       	ldd	r24, Y+18	; 0x12
    2102:	88 23       	and	r24, r24
    2104:	09 f0       	breq	.+2      	; 0x2108 <main+0x2de>
    2106:	4a cf       	rjmp	.-364    	; 0x1f9c <main+0x172>
				Local_u8Trails--;
				Seven_voidlightSegment(Local_u8Trails);
			}
		}

		if(Local_u8Trails==0)
    2108:	8a 89       	ldd	r24, Y+18	; 0x12
    210a:	88 23       	and	r24, r24
    210c:	09 f0       	breq	.+2      	; 0x2110 <main+0x2e6>
    210e:	31 cf       	rjmp	.-414    	; 0x1f72 <main+0x148>
			Local_u8Trails=3;
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	8a 8b       	std	Y+18, r24	; 0x12
    2114:	2e cf       	rjmp	.-420    	; 0x1f72 <main+0x148>

00002116 <CompareArray>:

	}
}

u8 CompareArray(u8 *Array1,u8 *Array2)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	00 d0       	rcall	.+0      	; 0x211c <CompareArray+0x6>
    211c:	00 d0       	rcall	.+0      	; 0x211e <CompareArray+0x8>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <CompareArray+0xa>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	9b 83       	std	Y+3, r25	; 0x03
    2126:	8a 83       	std	Y+2, r24	; 0x02
    2128:	7d 83       	std	Y+5, r23	; 0x05
    212a:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 i =0 ; i<4 ; i++)
    212c:	19 82       	std	Y+1, r1	; 0x01
    212e:	1a c0       	rjmp	.+52     	; 0x2164 <CompareArray+0x4e>
	{
		if(Array1[i]!=Array2[i])
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	9b 81       	ldd	r25, Y+3	; 0x03
    213a:	fc 01       	movw	r30, r24
    213c:	e2 0f       	add	r30, r18
    213e:	f3 1f       	adc	r31, r19
    2140:	40 81       	ld	r20, Z
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	8c 81       	ldd	r24, Y+4	; 0x04
    214a:	9d 81       	ldd	r25, Y+5	; 0x05
    214c:	fc 01       	movw	r30, r24
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
    2152:	80 81       	ld	r24, Z
    2154:	48 17       	cp	r20, r24
    2156:	19 f0       	breq	.+6      	; 0x215e <CompareArray+0x48>
			return FALSE;
    2158:	86 e0       	ldi	r24, 0x06	; 6
    215a:	8e 83       	std	Y+6, r24	; 0x06
    215c:	08 c0       	rjmp	.+16     	; 0x216e <CompareArray+0x58>
	}
}

u8 CompareArray(u8 *Array1,u8 *Array2)
{
	for(u8 i =0 ; i<4 ; i++)
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	84 30       	cpi	r24, 0x04	; 4
    2168:	18 f3       	brcs	.-58     	; 0x2130 <CompareArray+0x1a>
	{
		if(Array1[i]!=Array2[i])
			return FALSE;
	}
	return TRUE;
    216a:	87 e0       	ldi	r24, 0x07	; 7
    216c:	8e 83       	std	Y+6, r24	; 0x06
    216e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2170:	26 96       	adiw	r28, 0x06	; 6
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <__divmodhi4>:
    2182:	97 fb       	bst	r25, 7
    2184:	09 2e       	mov	r0, r25
    2186:	07 26       	eor	r0, r23
    2188:	0a d0       	rcall	.+20     	; 0x219e <__divmodhi4_neg1>
    218a:	77 fd       	sbrc	r23, 7
    218c:	04 d0       	rcall	.+8      	; 0x2196 <__divmodhi4_neg2>
    218e:	0c d0       	rcall	.+24     	; 0x21a8 <__udivmodhi4>
    2190:	06 d0       	rcall	.+12     	; 0x219e <__divmodhi4_neg1>
    2192:	00 20       	and	r0, r0
    2194:	1a f4       	brpl	.+6      	; 0x219c <__divmodhi4_exit>

00002196 <__divmodhi4_neg2>:
    2196:	70 95       	com	r23
    2198:	61 95       	neg	r22
    219a:	7f 4f       	sbci	r23, 0xFF	; 255

0000219c <__divmodhi4_exit>:
    219c:	08 95       	ret

0000219e <__divmodhi4_neg1>:
    219e:	f6 f7       	brtc	.-4      	; 0x219c <__divmodhi4_exit>
    21a0:	90 95       	com	r25
    21a2:	81 95       	neg	r24
    21a4:	9f 4f       	sbci	r25, 0xFF	; 255
    21a6:	08 95       	ret

000021a8 <__udivmodhi4>:
    21a8:	aa 1b       	sub	r26, r26
    21aa:	bb 1b       	sub	r27, r27
    21ac:	51 e1       	ldi	r21, 0x11	; 17
    21ae:	07 c0       	rjmp	.+14     	; 0x21be <__udivmodhi4_ep>

000021b0 <__udivmodhi4_loop>:
    21b0:	aa 1f       	adc	r26, r26
    21b2:	bb 1f       	adc	r27, r27
    21b4:	a6 17       	cp	r26, r22
    21b6:	b7 07       	cpc	r27, r23
    21b8:	10 f0       	brcs	.+4      	; 0x21be <__udivmodhi4_ep>
    21ba:	a6 1b       	sub	r26, r22
    21bc:	b7 0b       	sbc	r27, r23

000021be <__udivmodhi4_ep>:
    21be:	88 1f       	adc	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	5a 95       	dec	r21
    21c4:	a9 f7       	brne	.-22     	; 0x21b0 <__udivmodhi4_loop>
    21c6:	80 95       	com	r24
    21c8:	90 95       	com	r25
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	08 95       	ret

000021d0 <__prologue_saves__>:
    21d0:	2f 92       	push	r2
    21d2:	3f 92       	push	r3
    21d4:	4f 92       	push	r4
    21d6:	5f 92       	push	r5
    21d8:	6f 92       	push	r6
    21da:	7f 92       	push	r7
    21dc:	8f 92       	push	r8
    21de:	9f 92       	push	r9
    21e0:	af 92       	push	r10
    21e2:	bf 92       	push	r11
    21e4:	cf 92       	push	r12
    21e6:	df 92       	push	r13
    21e8:	ef 92       	push	r14
    21ea:	ff 92       	push	r15
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	ca 1b       	sub	r28, r26
    21fa:	db 0b       	sbc	r29, r27
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	09 94       	ijmp

00002208 <__epilogue_restores__>:
    2208:	2a 88       	ldd	r2, Y+18	; 0x12
    220a:	39 88       	ldd	r3, Y+17	; 0x11
    220c:	48 88       	ldd	r4, Y+16	; 0x10
    220e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2210:	6e 84       	ldd	r6, Y+14	; 0x0e
    2212:	7d 84       	ldd	r7, Y+13	; 0x0d
    2214:	8c 84       	ldd	r8, Y+12	; 0x0c
    2216:	9b 84       	ldd	r9, Y+11	; 0x0b
    2218:	aa 84       	ldd	r10, Y+10	; 0x0a
    221a:	b9 84       	ldd	r11, Y+9	; 0x09
    221c:	c8 84       	ldd	r12, Y+8	; 0x08
    221e:	df 80       	ldd	r13, Y+7	; 0x07
    2220:	ee 80       	ldd	r14, Y+6	; 0x06
    2222:	fd 80       	ldd	r15, Y+5	; 0x05
    2224:	0c 81       	ldd	r16, Y+4	; 0x04
    2226:	1b 81       	ldd	r17, Y+3	; 0x03
    2228:	aa 81       	ldd	r26, Y+2	; 0x02
    222a:	b9 81       	ldd	r27, Y+1	; 0x01
    222c:	ce 0f       	add	r28, r30
    222e:	d1 1d       	adc	r29, r1
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	ed 01       	movw	r28, r26
    223c:	08 95       	ret

0000223e <itoa>:
    223e:	fb 01       	movw	r30, r22
    2240:	9f 01       	movw	r18, r30
    2242:	e8 94       	clt
    2244:	42 30       	cpi	r20, 0x02	; 2
    2246:	c4 f0       	brlt	.+48     	; 0x2278 <itoa+0x3a>
    2248:	45 32       	cpi	r20, 0x25	; 37
    224a:	b4 f4       	brge	.+44     	; 0x2278 <itoa+0x3a>
    224c:	4a 30       	cpi	r20, 0x0A	; 10
    224e:	29 f4       	brne	.+10     	; 0x225a <itoa+0x1c>
    2250:	97 fb       	bst	r25, 7
    2252:	1e f4       	brtc	.+6      	; 0x225a <itoa+0x1c>
    2254:	90 95       	com	r25
    2256:	81 95       	neg	r24
    2258:	9f 4f       	sbci	r25, 0xFF	; 255
    225a:	64 2f       	mov	r22, r20
    225c:	77 27       	eor	r23, r23
    225e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__udivmodhi4>
    2262:	80 5d       	subi	r24, 0xD0	; 208
    2264:	8a 33       	cpi	r24, 0x3A	; 58
    2266:	0c f0       	brlt	.+2      	; 0x226a <itoa+0x2c>
    2268:	89 5d       	subi	r24, 0xD9	; 217
    226a:	81 93       	st	Z+, r24
    226c:	cb 01       	movw	r24, r22
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	a1 f7       	brne	.-24     	; 0x225a <itoa+0x1c>
    2272:	16 f4       	brtc	.+4      	; 0x2278 <itoa+0x3a>
    2274:	5d e2       	ldi	r21, 0x2D	; 45
    2276:	51 93       	st	Z+, r21
    2278:	10 82       	st	Z, r1
    227a:	c9 01       	movw	r24, r18
    227c:	0c 94 40 11 	jmp	0x2280	; 0x2280 <strrev>

00002280 <strrev>:
    2280:	dc 01       	movw	r26, r24
    2282:	fc 01       	movw	r30, r24
    2284:	67 2f       	mov	r22, r23
    2286:	71 91       	ld	r23, Z+
    2288:	77 23       	and	r23, r23
    228a:	e1 f7       	brne	.-8      	; 0x2284 <strrev+0x4>
    228c:	32 97       	sbiw	r30, 0x02	; 2
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <strrev+0x18>
    2290:	7c 91       	ld	r23, X
    2292:	6d 93       	st	X+, r22
    2294:	70 83       	st	Z, r23
    2296:	62 91       	ld	r22, -Z
    2298:	ae 17       	cp	r26, r30
    229a:	bf 07       	cpc	r27, r31
    229c:	c8 f3       	brcs	.-14     	; 0x2290 <strrev+0x10>
    229e:	08 95       	ret

000022a0 <_exit>:
    22a0:	f8 94       	cli

000022a2 <__stop_program>:
    22a2:	ff cf       	rjmp	.-2      	; 0x22a2 <__stop_program>
