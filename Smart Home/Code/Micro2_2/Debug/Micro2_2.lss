
Micro2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017c  00800060  00003398  0000340c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027b4  00000000  00000000  00003588  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000119d  00000000  00000000  00005d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00007079  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  0000726b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00009676  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000bbd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000bd94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000c08a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4e 10 	call	0x209c	; 0x209c <main>
      7a:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 ed       	ldi	r26, 0xD4	; 212
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 ed       	ldi	r24, 0xD4	; 212
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	64 ed       	ldi	r22, 0xD4	; 212
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 86 19 	jmp	0x330c	; 0x330c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 86 19 	jmp	0x330c	; 0x330c <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e4 52       	subi	r30, 0x24	; 36
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_voidInit>:
#include "ADC_Interface.h"
#include "ADC_Config.h"
#include "ADC_private.h"


void ADC_voidInit(void){
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	ADMUX = ADC_REF <<6;	// Voltage reference source
     e26:	e7 e2       	ldi	r30, 0x27	; 39
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	10 82       	st	Z, r1
	ADMUX |= ADC_LA  <<5;	// Left adjustment value
     e2c:	a7 e2       	ldi	r26, 0x27	; 39
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e7 e2       	ldi	r30, 0x27	; 39
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8c 93       	st	X, r24

	ADCSRA = ADATE <<5;		// Select the enable state of the auto trigger mode
     e38:	e6 e2       	ldi	r30, 0x26	; 38
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	10 82       	st	Z, r1
	SET_BIT(ADCSRA, 4);		// Resets the ADC interrupt flag just in case
     e3e:	a6 e2       	ldi	r26, 0x26	; 38
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e6 e2       	ldi	r30, 0x26	; 38
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	80 61       	ori	r24, 0x10	; 16
     e4a:	8c 93       	st	X, r24
	ADCSRA |= ADPS<<0;		// Configure the prescaler value of the ADC clock
     e4c:	a6 e2       	ldi	r26, 0x26	; 38
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e6 e2       	ldi	r30, 0x26	; 38
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	86 60       	ori	r24, 0x06	; 6
     e58:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 7);		// Enables the ADC
     e5a:	a6 e2       	ldi	r26, 0x26	; 38
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e6 e2       	ldi	r30, 0x26	; 38
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 68       	ori	r24, 0x80	; 128
     e66:	8c 93       	st	X, r24
}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <ADC_u16Read>:


u16 ADC_u16Read(ADC_Channel_options_t Copy_u8ADCchannel){
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
     e7a:	a7 e2       	ldi	r26, 0x27	; 39
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e7 e2       	ldi	r30, 0x27	; 39
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 7e       	andi	r24, 0xE0	; 224
     e86:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ADCchannel;
     e88:	a7 e2       	ldi	r26, 0x27	; 39
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e7 e2       	ldi	r30, 0x27	; 39
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	90 81       	ld	r25, Z
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	89 2b       	or	r24, r25
     e96:	8c 93       	st	X, r24
	//ADMUX |= Copy_u8ADCchannel<<0;	// Selects the ADC channel
	SET_BIT(ADCSRA, 6);				// Starts the ADC conversion
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 64       	ori	r24, 0x40	; 64
     ea4:	8c 93       	st	X, r24
	while(!GET_BIT(ADCSRA, 4));		// Wait until the conversion is completed
     ea6:	e6 e2       	ldi	r30, 0x26	; 38
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	82 95       	swap	r24
     eae:	8f 70       	andi	r24, 0x0F	; 15
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	81 70       	andi	r24, 0x01	; 1
     eb6:	90 70       	andi	r25, 0x00	; 0
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	a9 f3       	breq	.-22     	; 0xea6 <ADC_u16Read+0x38>
	SET_BIT(ADCSRA, 4);				// Clear the ADC Interrupt Flag
     ebc:	a6 e2       	ldi	r26, 0x26	; 38
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e6 e2       	ldi	r30, 0x26	; 38
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 61       	ori	r24, 0x10	; 16
     ec8:	8c 93       	st	X, r24
	return ADC_DATA;
     eca:	e4 e2       	ldi	r30, 0x24	; 36
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	91 81       	ldd	r25, Z+1	; 0x01
}
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <ADC_f32ADCtoVolt>:

f32 ADC_f32ADCtoVolt(u16 Copy_u16ADCVal){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <ADC_f32ADCtoVolt+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <ADC_f32ADCtoVolt+0x8>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <ADC_f32ADCtoVolt+0xa>
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	9e 83       	std	Y+6, r25	; 0x06
     eea:	8d 83       	std	Y+5, r24	; 0x05
	f32 temp_f32VoltVal = (Copy_u16ADCVal/1024.0)*ADC_V_REF;
     eec:	8d 81       	ldd	r24, Y+5	; 0x05
     eee:	9e 81       	ldd	r25, Y+6	; 0x06
     ef0:	cc 01       	movw	r24, r24
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e8       	ldi	r20, 0x80	; 128
     f0c:	54 e4       	ldi	r21, 0x44	; 68
     f0e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	bc 01       	movw	r22, r24
     f18:	cd 01       	movw	r24, r26
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 ea       	ldi	r20, 0xA0	; 160
     f20:	50 e4       	ldi	r21, 0x40	; 64
     f22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	ab 83       	std	Y+3, r26	; 0x03
     f30:	bc 83       	std	Y+4, r27	; 0x04
	return temp_f32VoltVal;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	ab 81       	ldd	r26, Y+3	; 0x03
     f38:	bc 81       	ldd	r27, Y+4	; 0x04
}
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	26 96       	adiw	r28, 0x06	; 6
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <DIO_voidSetPortDirection>:

#include "DIO_Register.h"
#include "DIO_Interface.h"

void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <DIO_voidSetPortDirection+0x6>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <DIO_voidSetPortDirection+0x8>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	3c 83       	std	Y+4, r19	; 0x04
     f68:	2b 83       	std	Y+3, r18	; 0x03
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	91 05       	cpc	r25, r1
     f72:	d1 f0       	breq	.+52     	; 0xfa8 <DIO_voidSetPortDirection+0x58>
     f74:	2b 81       	ldd	r18, Y+3	; 0x03
     f76:	3c 81       	ldd	r19, Y+4	; 0x04
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	2c f4       	brge	.+10     	; 0xf88 <DIO_voidSetPortDirection+0x38>
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	61 f0       	breq	.+24     	; 0xf9e <DIO_voidSetPortDirection+0x4e>
     f86:	1e c0       	rjmp	.+60     	; 0xfc4 <DIO_voidSetPortDirection+0x74>
     f88:	2b 81       	ldd	r18, Y+3	; 0x03
     f8a:	3c 81       	ldd	r19, Y+4	; 0x04
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	81 f0       	breq	.+32     	; 0xfb2 <DIO_voidSetPortDirection+0x62>
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	91 05       	cpc	r25, r1
     f9a:	81 f0       	breq	.+32     	; 0xfbc <DIO_voidSetPortDirection+0x6c>
     f9c:	13 c0       	rjmp	.+38     	; 0xfc4 <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA : DDRA = Copy_u8Direction ; break;
     f9e:	ea e3       	ldi	r30, 0x3A	; 58
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	80 83       	st	Z, r24
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB : DDRB = Copy_u8Direction ; break;
     fa8:	e7 e3       	ldi	r30, 0x37	; 55
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	80 83       	st	Z, r24
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC : DDRC = Copy_u8Direction ; break;
     fb2:	e4 e3       	ldi	r30, 0x34	; 52
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	80 83       	st	Z, r24
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD : DDRD = Copy_u8Direction ; break;
     fbc:	e1 e3       	ldi	r30, 0x31	; 49
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	80 83       	st	Z, r24
		default        : break;
	}
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <DIO_voidSetPortValue+0x6>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <DIO_voidSetPortValue+0x8>
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3c 83       	std	Y+4, r19	; 0x04
     fea:	2b 83       	std	Y+3, r18	; 0x03
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	d1 f0       	breq	.+52     	; 0x102a <DIO_voidSetPortValue+0x58>
     ff6:	2b 81       	ldd	r18, Y+3	; 0x03
     ff8:	3c 81       	ldd	r19, Y+4	; 0x04
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	2c f4       	brge	.+10     	; 0x100a <DIO_voidSetPortValue+0x38>
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	61 f0       	breq	.+24     	; 0x1020 <DIO_voidSetPortValue+0x4e>
    1008:	1e c0       	rjmp	.+60     	; 0x1046 <DIO_voidSetPortValue+0x74>
    100a:	2b 81       	ldd	r18, Y+3	; 0x03
    100c:	3c 81       	ldd	r19, Y+4	; 0x04
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	81 f0       	breq	.+32     	; 0x1034 <DIO_voidSetPortValue+0x62>
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	91 05       	cpc	r25, r1
    101c:	81 f0       	breq	.+32     	; 0x103e <DIO_voidSetPortValue+0x6c>
    101e:	13 c0       	rjmp	.+38     	; 0x1046 <DIO_voidSetPortValue+0x74>
	{
		case DIO_PORTA : PORTA = Copy_u8Value ; break;
    1020:	eb e3       	ldi	r30, 0x3B	; 59
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	80 83       	st	Z, r24
    1028:	0e c0       	rjmp	.+28     	; 0x1046 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB : PORTB = Copy_u8Value ; break;
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	80 83       	st	Z, r24
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC : PORTC = Copy_u8Value ; break;
    1034:	e5 e3       	ldi	r30, 0x35	; 53
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	80 83       	st	Z, r24
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD : PORTD = Copy_u8Value ; break;
    103e:	e2 e3       	ldi	r30, 0x32	; 50
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	80 83       	st	Z, r24
		default        : break;
	}
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	27 97       	sbiw	r28, 0x07	; 7
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	6a 83       	std	Y+2, r22	; 0x02
    106c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == OUTPUT_PIN)
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	09 f0       	breq	.+2      	; 0x1076 <DIO_voidSetPinDirection+0x22>
    1074:	6f c0       	rjmp	.+222    	; 0x1154 <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3f 83       	std	Y+7, r19	; 0x07
    107e:	2e 83       	std	Y+6, r18	; 0x06
    1080:	8e 81       	ldd	r24, Y+6	; 0x06
    1082:	9f 81       	ldd	r25, Y+7	; 0x07
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	49 f1       	breq	.+82     	; 0x10dc <DIO_voidSetPinDirection+0x88>
    108a:	2e 81       	ldd	r18, Y+6	; 0x06
    108c:	3f 81       	ldd	r19, Y+7	; 0x07
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	2c f4       	brge	.+10     	; 0x109e <DIO_voidSetPinDirection+0x4a>
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	9f 81       	ldd	r25, Y+7	; 0x07
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	61 f0       	breq	.+24     	; 0x10b4 <DIO_voidSetPinDirection+0x60>
    109c:	d2 c0       	rjmp	.+420    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
    109e:	2e 81       	ldd	r18, Y+6	; 0x06
    10a0:	3f 81       	ldd	r19, Y+7	; 0x07
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	71 f1       	breq	.+92     	; 0x1104 <DIO_voidSetPinDirection+0xb0>
    10a8:	8e 81       	ldd	r24, Y+6	; 0x06
    10aa:	9f 81       	ldd	r25, Y+7	; 0x07
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	91 05       	cpc	r25, r1
    10b0:	e9 f1       	breq	.+122    	; 0x112c <DIO_voidSetPinDirection+0xd8>
    10b2:	c7 c0       	rjmp	.+398    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin) ; break;
    10b4:	aa e3       	ldi	r26, 0x3A	; 58
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ea e3       	ldi	r30, 0x3A	; 58
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_voidSetPinDirection+0x7e>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_voidSetPinDirection+0x7a>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	b3 c0       	rjmp	.+358    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin) ; break;
    10dc:	a7 e3       	ldi	r26, 0x37	; 55
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e7 e3       	ldi	r30, 0x37	; 55
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_voidSetPinDirection+0xa6>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_voidSetPinDirection+0xa2>
    10fe:	84 2b       	or	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	9f c0       	rjmp	.+318    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin) ; break;
    1104:	a4 e3       	ldi	r26, 0x34	; 52
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e4 e3       	ldi	r30, 0x34	; 52
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_voidSetPinDirection+0xce>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_voidSetPinDirection+0xca>
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	8b c0       	rjmp	.+278    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin) ; break;
    112c:	a1 e3       	ldi	r26, 0x31	; 49
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e1 e3       	ldi	r30, 0x31	; 49
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_voidSetPinDirection+0xf6>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_voidSetPinDirection+0xf2>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	77 c0       	rjmp	.+238    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
			default        : break;
		}
	}
	else if(Copy_u8Direction == INPUT_PIN)
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 23       	and	r24, r24
    1158:	09 f0       	breq	.+2      	; 0x115c <DIO_voidSetPinDirection+0x108>
    115a:	73 c0       	rjmp	.+230    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3d 83       	std	Y+5, r19	; 0x05
    1164:	2c 83       	std	Y+4, r18	; 0x04
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	59 f1       	breq	.+86     	; 0x11c6 <DIO_voidSetPinDirection+0x172>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	2c f4       	brge	.+10     	; 0x1184 <DIO_voidSetPinDirection+0x130>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f0       	breq	.+26     	; 0x119c <DIO_voidSetPinDirection+0x148>
    1182:	5f c0       	rjmp	.+190    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
    1184:	2c 81       	ldd	r18, Y+4	; 0x04
    1186:	3d 81       	ldd	r19, Y+5	; 0x05
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	89 f1       	breq	.+98     	; 0x11f0 <DIO_voidSetPinDirection+0x19c>
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <DIO_voidSetPinDirection+0x146>
    1198:	40 c0       	rjmp	.+128    	; 0x121a <DIO_voidSetPinDirection+0x1c6>
    119a:	53 c0       	rjmp	.+166    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin) ; break;
    119c:	aa e3       	ldi	r26, 0x3A	; 58
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ea e3       	ldi	r30, 0x3A	; 58
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_voidSetPinDirection+0x166>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_voidSetPinDirection+0x162>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	3e c0       	rjmp	.+124    	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin) ; break;
    11c6:	a7 e3       	ldi	r26, 0x37	; 55
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e7 e3       	ldi	r30, 0x37	; 55
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_voidSetPinDirection+0x190>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_voidSetPinDirection+0x18c>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	29 c0       	rjmp	.+82     	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin) ; break;
    11f0:	a4 e3       	ldi	r26, 0x34	; 52
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e4 e3       	ldi	r30, 0x34	; 52
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_voidSetPinDirection+0x1ba>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_voidSetPinDirection+0x1b6>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	14 c0       	rjmp	.+40     	; 0x1242 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin) ; break;
    121a:	a1 e3       	ldi	r26, 0x31	; 49
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e1 e3       	ldi	r30, 0x31	; 49
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_voidSetPinDirection+0x1e4>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_voidSetPinDirection+0x1e0>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
			default        : break;
		}
	}
}
    1242:	27 96       	adiw	r28, 0x07	; 7
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	29 97       	sbiw	r28, 0x09	; 9
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	6a 83       	std	Y+2, r22	; 0x02
    126c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == HIGH)
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	09 f0       	breq	.+2      	; 0x1276 <DIO_voidSetPinValue+0x22>
    1274:	6f c0       	rjmp	.+222    	; 0x1354 <DIO_voidSetPinValue+0x100>
	{
		switch (Copy_u8Port)
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	39 87       	std	Y+9, r19	; 0x09
    127e:	28 87       	std	Y+8, r18	; 0x08
    1280:	88 85       	ldd	r24, Y+8	; 0x08
    1282:	99 85       	ldd	r25, Y+9	; 0x09
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	49 f1       	breq	.+82     	; 0x12dc <DIO_voidSetPinValue+0x88>
    128a:	28 85       	ldd	r18, Y+8	; 0x08
    128c:	39 85       	ldd	r19, Y+9	; 0x09
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	2c f4       	brge	.+10     	; 0x129e <DIO_voidSetPinValue+0x4a>
    1294:	88 85       	ldd	r24, Y+8	; 0x08
    1296:	99 85       	ldd	r25, Y+9	; 0x09
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	61 f0       	breq	.+24     	; 0x12b4 <DIO_voidSetPinValue+0x60>
    129c:	45 c1       	rjmp	.+650    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
    129e:	28 85       	ldd	r18, Y+8	; 0x08
    12a0:	39 85       	ldd	r19, Y+9	; 0x09
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	71 f1       	breq	.+92     	; 0x1304 <DIO_voidSetPinValue+0xb0>
    12a8:	88 85       	ldd	r24, Y+8	; 0x08
    12aa:	99 85       	ldd	r25, Y+9	; 0x09
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	e9 f1       	breq	.+122    	; 0x132c <DIO_voidSetPinValue+0xd8>
    12b2:	3a c1       	rjmp	.+628    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
		{
			case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin) ; break;
    12b4:	ab e3       	ldi	r26, 0x3B	; 59
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	eb e3       	ldi	r30, 0x3B	; 59
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_voidSetPinValue+0x7e>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_voidSetPinValue+0x7a>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	26 c1       	rjmp	.+588    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin) ; break;
    12dc:	a8 e3       	ldi	r26, 0x38	; 56
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e8 e3       	ldi	r30, 0x38	; 56
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_voidSetPinValue+0xa6>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_voidSetPinValue+0xa2>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	12 c1       	rjmp	.+548    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin) ; break;
    1304:	a5 e3       	ldi	r26, 0x35	; 53
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e5 e3       	ldi	r30, 0x35	; 53
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_voidSetPinValue+0xce>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_voidSetPinValue+0xca>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	fe c0       	rjmp	.+508    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin) ; break;
    132c:	a2 e3       	ldi	r26, 0x32	; 50
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e2 e3       	ldi	r30, 0x32	; 50
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_voidSetPinValue+0xf6>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_voidSetPinValue+0xf2>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	ea c0       	rjmp	.+468    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			default        : break;
		}
	}
	else if(Copy_u8Value == LOW)
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 23       	and	r24, r24
    1358:	09 f0       	breq	.+2      	; 0x135c <DIO_voidSetPinValue+0x108>
    135a:	74 c0       	rjmp	.+232    	; 0x1444 <DIO_voidSetPinValue+0x1f0>
	{
		switch (Copy_u8Port)
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3f 83       	std	Y+7, r19	; 0x07
    1364:	2e 83       	std	Y+6, r18	; 0x06
    1366:	8e 81       	ldd	r24, Y+6	; 0x06
    1368:	9f 81       	ldd	r25, Y+7	; 0x07
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	59 f1       	breq	.+86     	; 0x13c6 <DIO_voidSetPinValue+0x172>
    1370:	2e 81       	ldd	r18, Y+6	; 0x06
    1372:	3f 81       	ldd	r19, Y+7	; 0x07
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	2c f4       	brge	.+10     	; 0x1384 <DIO_voidSetPinValue+0x130>
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	69 f0       	breq	.+26     	; 0x139c <DIO_voidSetPinValue+0x148>
    1382:	d2 c0       	rjmp	.+420    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
    1384:	2e 81       	ldd	r18, Y+6	; 0x06
    1386:	3f 81       	ldd	r19, Y+7	; 0x07
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	89 f1       	breq	.+98     	; 0x13f0 <DIO_voidSetPinValue+0x19c>
    138e:	8e 81       	ldd	r24, Y+6	; 0x06
    1390:	9f 81       	ldd	r25, Y+7	; 0x07
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <DIO_voidSetPinValue+0x146>
    1398:	40 c0       	rjmp	.+128    	; 0x141a <DIO_voidSetPinValue+0x1c6>
    139a:	c6 c0       	rjmp	.+396    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
		{
			case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin) ; break;
    139c:	ab e3       	ldi	r26, 0x3B	; 59
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	eb e3       	ldi	r30, 0x3B	; 59
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_voidSetPinValue+0x166>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_voidSetPinValue+0x162>
    13be:	80 95       	com	r24
    13c0:	84 23       	and	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	b1 c0       	rjmp	.+354    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin) ; break;
    13c6:	a8 e3       	ldi	r26, 0x38	; 56
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e8 e3       	ldi	r30, 0x38	; 56
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_voidSetPinValue+0x190>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_voidSetPinValue+0x18c>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	9c c0       	rjmp	.+312    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin) ; break;
    13f0:	a5 e3       	ldi	r26, 0x35	; 53
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e3       	ldi	r30, 0x35	; 53
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_voidSetPinValue+0x1ba>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_voidSetPinValue+0x1b6>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	87 c0       	rjmp	.+270    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin) ; break;
    141a:	a2 e3       	ldi	r26, 0x32	; 50
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e2 e3       	ldi	r30, 0x32	; 50
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_voidSetPinValue+0x1e4>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_voidSetPinValue+0x1e0>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	72 c0       	rjmp	.+228    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			default        : break;
		}
	}
	else if(Copy_u8Value == TOGG)
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	82 30       	cpi	r24, 0x02	; 2
    1448:	09 f0       	breq	.+2      	; 0x144c <DIO_voidSetPinValue+0x1f8>
    144a:	6e c0       	rjmp	.+220    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
	{
		switch (Copy_u8Port)
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3d 83       	std	Y+5, r19	; 0x05
    1454:	2c 83       	std	Y+4, r18	; 0x04
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	9d 81       	ldd	r25, Y+5	; 0x05
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	49 f1       	breq	.+82     	; 0x14b2 <DIO_voidSetPinValue+0x25e>
    1460:	2c 81       	ldd	r18, Y+4	; 0x04
    1462:	3d 81       	ldd	r19, Y+5	; 0x05
    1464:	22 30       	cpi	r18, 0x02	; 2
    1466:	31 05       	cpc	r19, r1
    1468:	2c f4       	brge	.+10     	; 0x1474 <DIO_voidSetPinValue+0x220>
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	61 f0       	breq	.+24     	; 0x148a <DIO_voidSetPinValue+0x236>
    1472:	5a c0       	rjmp	.+180    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
    1474:	2c 81       	ldd	r18, Y+4	; 0x04
    1476:	3d 81       	ldd	r19, Y+5	; 0x05
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	71 f1       	breq	.+92     	; 0x14da <DIO_voidSetPinValue+0x286>
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	91 05       	cpc	r25, r1
    1486:	e9 f1       	breq	.+122    	; 0x1502 <DIO_voidSetPinValue+0x2ae>
    1488:	4f c0       	rjmp	.+158    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
		{
			case DIO_PORTA : TOG_BIT(PORTA,Copy_u8Pin) ; break;
    148a:	ab e3       	ldi	r26, 0x3B	; 59
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	eb e3       	ldi	r30, 0x3B	; 59
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_voidSetPinValue+0x254>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_voidSetPinValue+0x250>
    14ac:	84 27       	eor	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	3b c0       	rjmp	.+118    	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTB : TOG_BIT(PORTB,Copy_u8Pin) ; break;
    14b2:	a8 e3       	ldi	r26, 0x38	; 56
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e8 e3       	ldi	r30, 0x38	; 56
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_voidSetPinValue+0x27c>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_voidSetPinValue+0x278>
    14d4:	84 27       	eor	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	27 c0       	rjmp	.+78     	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTC : TOG_BIT(PORTC,Copy_u8Pin) ; break;
    14da:	a5 e3       	ldi	r26, 0x35	; 53
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e5 e3       	ldi	r30, 0x35	; 53
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_voidSetPinValue+0x2a4>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_voidSetPinValue+0x2a0>
    14fc:	84 27       	eor	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	13 c0       	rjmp	.+38     	; 0x1528 <DIO_voidSetPinValue+0x2d4>
			case DIO_PORTD : TOG_BIT(PORTD,Copy_u8Pin) ; break;
    1502:	a2 e3       	ldi	r26, 0x32	; 50
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_voidSetPinValue+0x2cc>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_voidSetPinValue+0x2c8>
    1524:	84 27       	eor	r24, r20
    1526:	8c 93       	st	X, r24
			default        : break;
		}
	}
}
    1528:	29 96       	adiw	r28, 0x09	; 9
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <DIO_u8GetPinValue+0x6>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <DIO_u8GetPinValue+0x8>
    1542:	0f 92       	push	r0
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	8a 83       	std	Y+2, r24	; 0x02
    154a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnPinValue;
	switch (Copy_u8Port)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3d 83       	std	Y+5, r19	; 0x05
    1554:	2c 83       	std	Y+4, r18	; 0x04
    1556:	4c 81       	ldd	r20, Y+4	; 0x04
    1558:	5d 81       	ldd	r21, Y+5	; 0x05
    155a:	41 30       	cpi	r20, 0x01	; 1
    155c:	51 05       	cpc	r21, r1
    155e:	41 f1       	breq	.+80     	; 0x15b0 <DIO_u8GetPinValue+0x76>
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	9d 81       	ldd	r25, Y+5	; 0x05
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	91 05       	cpc	r25, r1
    1568:	34 f4       	brge	.+12     	; 0x1576 <DIO_u8GetPinValue+0x3c>
    156a:	2c 81       	ldd	r18, Y+4	; 0x04
    156c:	3d 81       	ldd	r19, Y+5	; 0x05
    156e:	21 15       	cp	r18, r1
    1570:	31 05       	cpc	r19, r1
    1572:	61 f0       	breq	.+24     	; 0x158c <DIO_u8GetPinValue+0x52>
    1574:	52 c0       	rjmp	.+164    	; 0x161a <DIO_u8GetPinValue+0xe0>
    1576:	4c 81       	ldd	r20, Y+4	; 0x04
    1578:	5d 81       	ldd	r21, Y+5	; 0x05
    157a:	42 30       	cpi	r20, 0x02	; 2
    157c:	51 05       	cpc	r21, r1
    157e:	51 f1       	breq	.+84     	; 0x15d4 <DIO_u8GetPinValue+0x9a>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	b9 f1       	breq	.+110    	; 0x15f8 <DIO_u8GetPinValue+0xbe>
    158a:	47 c0       	rjmp	.+142    	; 0x161a <DIO_u8GetPinValue+0xe0>
	{
		case DIO_PORTA : Local_u8ReturnPinValue = GET_BIT(PINA,Copy_u8Pin) ; break;
    158c:	e9 e3       	ldi	r30, 0x39	; 57
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a9 01       	movw	r20, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_u8GetPinValue+0x6a>
    15a0:	55 95       	asr	r21
    15a2:	47 95       	ror	r20
    15a4:	8a 95       	dec	r24
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_u8GetPinValue+0x66>
    15a8:	ca 01       	movw	r24, r20
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	35 c0       	rjmp	.+106    	; 0x161a <DIO_u8GetPinValue+0xe0>
		case DIO_PORTB : Local_u8ReturnPinValue = GET_BIT(PINB,Copy_u8Pin) ; break;
    15b0:	e6 e3       	ldi	r30, 0x36	; 54
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a9 01       	movw	r20, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_u8GetPinValue+0x8e>
    15c4:	55 95       	asr	r21
    15c6:	47 95       	ror	r20
    15c8:	8a 95       	dec	r24
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_u8GetPinValue+0x8a>
    15cc:	ca 01       	movw	r24, r20
    15ce:	81 70       	andi	r24, 0x01	; 1
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	23 c0       	rjmp	.+70     	; 0x161a <DIO_u8GetPinValue+0xe0>
		case DIO_PORTC : Local_u8ReturnPinValue = GET_BIT(PINC,Copy_u8Pin) ; break;
    15d4:	e3 e3       	ldi	r30, 0x33	; 51
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_u8GetPinValue+0xb2>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_u8GetPinValue+0xae>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	11 c0       	rjmp	.+34     	; 0x161a <DIO_u8GetPinValue+0xe0>
		case DIO_PORTD : Local_u8ReturnPinValue = GET_BIT(PIND,Copy_u8Pin) ; break;
    15f8:	e0 e3       	ldi	r30, 0x30	; 48
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_u8GetPinValue+0xd6>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <DIO_u8GetPinValue+0xd2>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
		default        : break;
	}
	return Local_u8ReturnPinValue;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <LCD_voidSendCommand>:
#include "LCD_Interface.h"

#include <util/delay.h>

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	2f 97       	sbiw	r28, 0x0f	; 15
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS by Low for Command*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_RS_PIN , LOW);
    1642:	83 e0       	ldi	r24, 0x03	; 3
    1644:	62 e0       	ldi	r22, 0x02	; 2
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>

	/*Set RW by Low for Write*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_RW_PIN , LOW);
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	63 e0       	ldi	r22, 0x03	; 3
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>

	/*Send the Command*/
	DIO_voidSetPortValue(LCD_DATA_PORT , Copy_u8Command);
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	6f 85       	ldd	r22, Y+15	; 0x0f
    165a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>

	/*Enable LCD*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_E_PIN , HIGH);
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	64 e0       	ldi	r22, 0x04	; 4
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a0 e0       	ldi	r26, 0x00	; 0
    166e:	b0 e4       	ldi	r27, 0x40	; 64
    1670:	8b 87       	std	Y+11, r24	; 0x0b
    1672:	9c 87       	std	Y+12, r25	; 0x0c
    1674:	ad 87       	std	Y+13, r26	; 0x0d
    1676:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1678:	6b 85       	ldd	r22, Y+11	; 0x0b
    167a:	7c 85       	ldd	r23, Y+12	; 0x0c
    167c:	8d 85       	ldd	r24, Y+13	; 0x0d
    167e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a ef       	ldi	r20, 0xFA	; 250
    1686:	54 e4       	ldi	r21, 0x44	; 68
    1688:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8f 83       	std	Y+7, r24	; 0x07
    1692:	98 87       	std	Y+8, r25	; 0x08
    1694:	a9 87       	std	Y+9, r26	; 0x09
    1696:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1698:	6f 81       	ldd	r22, Y+7	; 0x07
    169a:	78 85       	ldd	r23, Y+8	; 0x08
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	2c f4       	brge	.+10     	; 0x16ba <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	3f c0       	rjmp	.+126    	; 0x1738 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16ce:	18 16       	cp	r1, r24
    16d0:	4c f5       	brge	.+82     	; 0x1724 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9e 83       	std	Y+6, r25	; 0x06
    16f8:	8d 83       	std	Y+5, r24	; 0x05
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <LCD_voidSendCommand+0xee>
    16fc:	88 ec       	ldi	r24, 0xC8	; 200
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <LCD_voidSendCommand+0xdc>
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	69 f7       	brne	.-38     	; 0x16fc <LCD_voidSendCommand+0xd0>
    1722:	14 c0       	rjmp	.+40     	; 0x174c <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	6f 81       	ldd	r22, Y+7	; 0x07
    1726:	78 85       	ldd	r23, Y+8	; 0x08
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	9a 81       	ldd	r25, Y+2	; 0x02
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_voidSendCommand+0x118>
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // wait till it become high
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_E_PIN , LOW);
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	64 e0       	ldi	r22, 0x04	; 4
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>
}
    1756:	2f 96       	adiw	r28, 0x0f	; 15
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	2f 97       	sbiw	r28, 0x0f	; 15
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS by High for Data*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_RS_PIN , HIGH);
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	62 e0       	ldi	r22, 0x02	; 2
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>

	/*Set RW by Low for Write*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_RW_PIN , LOW);
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	63 e0       	ldi	r22, 0x03	; 3
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>

	/*Send the Data*/
	DIO_voidSetPortValue(LCD_DATA_PORT , Copy_u8Data);
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	6f 85       	ldd	r22, Y+15	; 0x0f
    1796:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>

	/*Enable LCD*/
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_E_PIN , HIGH);
    179a:	83 e0       	ldi	r24, 0x03	; 3
    179c:	64 e0       	ldi	r22, 0x04	; 4
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	b0 e4       	ldi	r27, 0x40	; 64
    17ac:	8b 87       	std	Y+11, r24	; 0x0b
    17ae:	9c 87       	std	Y+12, r25	; 0x0c
    17b0:	ad 87       	std	Y+13, r26	; 0x0d
    17b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8f 83       	std	Y+7, r24	; 0x07
    17ce:	98 87       	std	Y+8, r25	; 0x08
    17d0:	a9 87       	std	Y+9, r26	; 0x09
    17d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <LCD_voidSendData+0x8e>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <LCD_voidSendData+0xee>
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_voidSendData+0xdc>
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <LCD_voidSendData+0xd0>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6f 81       	ldd	r22, Y+7	; 0x07
    1862:	78 85       	ldd	r23, Y+8	; 0x08
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_voidSendData+0x118>
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // wait till it become high
	DIO_voidSetPinValue(LCD_CRTL_PORT , LCD_E_PIN , LOW);
    1888:	83 e0       	ldi	r24, 0x03	; 3
    188a:	64 e0       	ldi	r22, 0x04	; 4
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>

}
    1892:	2f 96       	adiw	r28, 0x0f	; 15
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <LCD_voidInit>:

void LCD_voidInit()
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	2e 97       	sbiw	r28, 0x0e	; 14
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	ac e0       	ldi	r26, 0x0C	; 12
    18be:	b2 e4       	ldi	r27, 0x42	; 66
    18c0:	8b 87       	std	Y+11, r24	; 0x0b
    18c2:	9c 87       	std	Y+12, r25	; 0x0c
    18c4:	ad 87       	std	Y+13, r26	; 0x0d
    18c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    18cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a ef       	ldi	r20, 0xFA	; 250
    18d6:	54 e4       	ldi	r21, 0x44	; 68
    18d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8f 83       	std	Y+7, r24	; 0x07
    18e2:	98 87       	std	Y+8, r25	; 0x08
    18e4:	a9 87       	std	Y+9, r26	; 0x09
    18e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <LCD_voidInit+0x66>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9e 83       	std	Y+6, r25	; 0x06
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	0f c0       	rjmp	.+30     	; 0x196a <LCD_voidInit+0xc6>
    194c:	88 ec       	ldi	r24, 0xC8	; 200
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9c 83       	std	Y+4, r25	; 0x04
    1952:	8b 83       	std	Y+3, r24	; 0x03
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_voidInit+0xb4>
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <LCD_voidInit+0xa8>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	6f 81       	ldd	r22, Y+7	; 0x07
    1976:	78 85       	ldd	r23, Y+8	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_voidInit+0xf0>
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
	/*Wait after the power on for 35 ms*/
	_delay_ms(35);

	/*Function Set
	 * 2 Lines  - 5x8 size */
	LCD_voidSendCommand(0b00111100);
    199c:	8c e3       	ldi	r24, 0x3C	; 60
    199e:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>

	/*Display on/off Control
	 * Display on  -  Cursor off  -  Blink off */
	LCD_voidSendCommand(0b00001100);
    19a2:	8c e0       	ldi	r24, 0x0C	; 12
    19a4:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>

	/*Display Clear */
	LCD_voidSendCommand(0b00000001);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>

}
    19ae:	2e 96       	adiw	r28, 0x0e	; 14
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_u8String)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <LCD_voidWriteString+0x6>
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	9b 83       	std	Y+3, r25	; 0x03
    19ce:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    19d0:	19 82       	std	Y+1, r1	; 0x01
    19d2:	0e c0       	rjmp	.+28     	; 0x19f0 <LCD_voidWriteString+0x30>

	while(Copy_u8String[Local_u8Counter] != '\0')
	{
		LCD_voidSendData(Copy_u8String[Local_u8Counter]);
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	fc 01       	movw	r30, r24
    19e0:	e2 0f       	add	r30, r18
    19e2:	f3 1f       	adc	r31, r19
    19e4:	80 81       	ld	r24, Z
    19e6:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
		Local_u8Counter++;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	8f 5f       	subi	r24, 0xFF	; 255
    19ee:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8* Copy_u8String)
{
	u8 Local_u8Counter = 0;

	while(Copy_u8String[Local_u8Counter] != '\0')
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	fc 01       	movw	r30, r24
    19fc:	e2 0f       	add	r30, r18
    19fe:	f3 1f       	adc	r31, r19
    1a00:	80 81       	ld	r24, Z
    1a02:	88 23       	and	r24, r24
    1a04:	39 f7       	brne	.-50     	; 0x19d4 <LCD_voidWriteString+0x14>
	{
		LCD_voidSendData(Copy_u8String[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <LCD_voidWriteDecimalNumber>:

void LCD_voidWriteDecimalNumber(s16 Copy_s16Number)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <LCD_voidWriteDecimalNumber+0x6>
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_s16Number>=0 && Copy_s16Number<=9)
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	99 23       	and	r25, r25
    1a26:	54 f0       	brlt	.+20     	; 0x1a3c <LCD_voidWriteDecimalNumber+0x2a>
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	8a 30       	cpi	r24, 0x0A	; 10
    1a2e:	91 05       	cpc	r25, r1
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <LCD_voidWriteDecimalNumber+0x2a>
	LCD_voidSendData(Copy_s16Number+48);
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	80 5d       	subi	r24, 0xD0	; 208
    1a36:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
    1a3a:	71 c0       	rjmp	.+226    	; 0x1b1e <LCD_voidWriteDecimalNumber+0x10c>
	else if(Copy_s16Number>(-10000) && Copy_s16Number<=(-1))
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	28 ed       	ldi	r18, 0xD8	; 216
    1a42:	81 3f       	cpi	r24, 0xF1	; 241
    1a44:	92 07       	cpc	r25, r18
    1a46:	7c f0       	brlt	.+30     	; 0x1a66 <LCD_voidWriteDecimalNumber+0x54>
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4c:	99 23       	and	r25, r25
    1a4e:	5c f4       	brge	.+22     	; 0x1a66 <LCD_voidWriteDecimalNumber+0x54>
	{
		LCD_voidSendData('-');
    1a50:	8d e2       	ldi	r24, 0x2D	; 45
    1a52:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
		LCD_voidWriteDecimalNumber((-1)*Copy_s16Number);
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	90 95       	com	r25
    1a5c:	81 95       	neg	r24
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    1a64:	5c c0       	rjmp	.+184    	; 0x1b1e <LCD_voidWriteDecimalNumber+0x10c>
	}
	else if(Copy_s16Number>9 && Copy_s16Number<100)
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	8a 30       	cpi	r24, 0x0A	; 10
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	cc f0       	brlt	.+50     	; 0x1aa2 <LCD_voidWriteDecimalNumber+0x90>
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	84 36       	cpi	r24, 0x64	; 100
    1a76:	91 05       	cpc	r25, r1
    1a78:	a4 f4       	brge	.+40     	; 0x1aa2 <LCD_voidWriteDecimalNumber+0x90>
	{
		LCD_voidWriteDecimalNumber(Copy_s16Number/10);
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	2a e0       	ldi	r18, 0x0A	; 10
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	b9 01       	movw	r22, r18
    1a84:	0e 94 3b 19 	call	0x3276	; 0x3276 <__divmodhi4>
    1a88:	cb 01       	movw	r24, r22
    1a8a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
		LCD_voidWriteDecimalNumber(Copy_s16Number%10);
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	2a e0       	ldi	r18, 0x0A	; 10
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	b9 01       	movw	r22, r18
    1a98:	0e 94 3b 19 	call	0x3276	; 0x3276 <__divmodhi4>
    1a9c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    1aa0:	3e c0       	rjmp	.+124    	; 0x1b1e <LCD_voidWriteDecimalNumber+0x10c>
	}
	else if(Copy_s16Number>=100 && Copy_s16Number<1000)
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa6:	84 36       	cpi	r24, 0x64	; 100
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	d4 f0       	brlt	.+52     	; 0x1ae0 <LCD_voidWriteDecimalNumber+0xce>
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab0:	23 e0       	ldi	r18, 0x03	; 3
    1ab2:	88 3e       	cpi	r24, 0xE8	; 232
    1ab4:	92 07       	cpc	r25, r18
    1ab6:	a4 f4       	brge	.+40     	; 0x1ae0 <LCD_voidWriteDecimalNumber+0xce>
	{
		LCD_voidWriteDecimalNumber(Copy_s16Number/10);
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	9a 81       	ldd	r25, Y+2	; 0x02
    1abc:	2a e0       	ldi	r18, 0x0A	; 10
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 3b 19 	call	0x3276	; 0x3276 <__divmodhi4>
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
		LCD_voidWriteDecimalNumber(Copy_s16Number%10);
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	2a e0       	ldi	r18, 0x0A	; 10
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	b9 01       	movw	r22, r18
    1ad6:	0e 94 3b 19 	call	0x3276	; 0x3276 <__divmodhi4>
    1ada:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    1ade:	1f c0       	rjmp	.+62     	; 0x1b1e <LCD_voidWriteDecimalNumber+0x10c>
	}
	else if(Copy_s16Number>=1000 && Copy_s16Number<10000)
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	23 e0       	ldi	r18, 0x03	; 3
    1ae6:	88 3e       	cpi	r24, 0xE8	; 232
    1ae8:	92 07       	cpc	r25, r18
    1aea:	cc f0       	brlt	.+50     	; 0x1b1e <LCD_voidWriteDecimalNumber+0x10c>
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	27 e2       	ldi	r18, 0x27	; 39
    1af2:	80 31       	cpi	r24, 0x10	; 16
    1af4:	92 07       	cpc	r25, r18
    1af6:	9c f4       	brge	.+38     	; 0x1b1e <LCD_voidWriteDecimalNumber+0x10c>
	{
		LCD_voidWriteDecimalNumber(Copy_s16Number/10);
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	2a e0       	ldi	r18, 0x0A	; 10
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	b9 01       	movw	r22, r18
    1b02:	0e 94 3b 19 	call	0x3276	; 0x3276 <__divmodhi4>
    1b06:	cb 01       	movw	r24, r22
    1b08:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
		LCD_voidWriteDecimalNumber(Copy_s16Number%10);
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b10:	2a e0       	ldi	r18, 0x0A	; 10
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	b9 01       	movw	r22, r18
    1b16:	0e 94 3b 19 	call	0x3276	; 0x3276 <__divmodhi4>
    1b1a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
	}
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <LCD_voidWriteFloatNumber>:

void LCD_voidWriteFloatNumber(f32 Copy_f32Number)
{
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <LCD_voidWriteFloatNumber+0xa>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <LCD_voidWriteFloatNumber+0xc>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	69 83       	std	Y+1, r22	; 0x01
    1b3a:	7a 83       	std	Y+2, r23	; 0x02
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
	LCD_voidWriteDecimalNumber((s16)Copy_f32Number);
    1b40:	69 81       	ldd	r22, Y+1	; 0x01
    1b42:	7a 81       	ldd	r23, Y+2	; 0x02
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
	LCD_voidSendData('.');
    1b54:	8e e2       	ldi	r24, 0x2E	; 46
    1b56:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
	if(((s16)(Copy_f32Number*10))%((s16)(Copy_f32Number)) > 0)
    1b5a:	69 81       	ldd	r22, Y+1	; 0x01
    1b5c:	7a 81       	ldd	r23, Y+2	; 0x02
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8c 01       	movw	r16, r24
    1b80:	69 81       	ldd	r22, Y+1	; 0x01
    1b82:	7a 81       	ldd	r23, Y+2	; 0x02
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9c 01       	movw	r18, r24
    1b92:	c8 01       	movw	r24, r16
    1b94:	b9 01       	movw	r22, r18
    1b96:	0e 94 3b 19 	call	0x3276	; 0x3276 <__divmodhi4>
    1b9a:	18 16       	cp	r1, r24
    1b9c:	19 06       	cpc	r1, r25
    1b9e:	1c f5       	brge	.+70     	; 0x1be6 <LCD_voidWriteFloatNumber+0xbe>
		LCD_voidWriteDecimalNumber(((s16)(Copy_f32Number*10))%((s16)(Copy_f32Number)));
    1ba0:	69 81       	ldd	r22, Y+1	; 0x01
    1ba2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e2       	ldi	r20, 0x20	; 32
    1bae:	51 e4       	ldi	r21, 0x41	; 65
    1bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8c 01       	movw	r16, r24
    1bc6:	69 81       	ldd	r22, Y+1	; 0x01
    1bc8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9c 01       	movw	r18, r24
    1bd8:	c8 01       	movw	r24, r16
    1bda:	b9 01       	movw	r22, r18
    1bdc:	0e 94 3b 19 	call	0x3276	; 0x3276 <__divmodhi4>
    1be0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    1be4:	25 c0       	rjmp	.+74     	; 0x1c30 <LCD_voidWriteFloatNumber+0x108>
	else
		LCD_voidWriteDecimalNumber(((s16)(Copy_f32Number*(-10)))%((s16)((-1)*Copy_f32Number)));
    1be6:	69 81       	ldd	r22, Y+1	; 0x01
    1be8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 ec       	ldi	r21, 0xC1	; 193
    1bf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	ab 81       	ldd	r26, Y+3	; 0x03
    1c12:	bc 81       	ldd	r27, Y+4	; 0x04
    1c14:	b0 58       	subi	r27, 0x80	; 128
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9c 01       	movw	r18, r24
    1c24:	c8 01       	movw	r24, r16
    1c26:	b9 01       	movw	r22, r18
    1c28:	0e 94 3b 19 	call	0x3276	; 0x3276 <__divmodhi4>
    1c2c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>

}
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	08 95       	ret

00001c42 <LCD_voidWriteStringNumber>:

void LCD_voidWriteStringNumber(u16 Copy_u16Number)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	a2 97       	sbiw	r28, 0x22	; 34
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	9a a3       	std	Y+34, r25	; 0x22
    1c58:	89 a3       	std	Y+33, r24	; 0x21
	u32 num[8];
	itoa(Copy_u16Number,num,10);
    1c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5e:	9e 01       	movw	r18, r28
    1c60:	2f 5f       	subi	r18, 0xFF	; 255
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	b9 01       	movw	r22, r18
    1c66:	4a e0       	ldi	r20, 0x0A	; 10
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	0e 94 99 19 	call	0x3332	; 0x3332 <itoa>
	LCD_voidWriteString(num);
    1c6e:	ce 01       	movw	r24, r28
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
}
    1c76:	a2 96       	adiw	r28, 0x22	; 34
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <LCD_voidConfigDirection>:

void LCD_voidConfigDirection()
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	/*Set the direction for LCD pins */
	DIO_voidSetPortDirection(LCD_DATA_PORT, OUTPUT_PORT);
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	6f ef       	ldi	r22, 0xFF	; 255
    1c94:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(LCD_CRTL_PORT , LCD_RS_PIN , OUTPUT_PIN);
    1c98:	83 e0       	ldi	r24, 0x03	; 3
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CRTL_PORT , LCD_RW_PIN , OUTPUT_PIN);
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	63 e0       	ldi	r22, 0x03	; 3
    1ca6:	41 e0       	ldi	r20, 0x01	; 1
    1ca8:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CRTL_PORT , LCD_E_PIN  , OUTPUT_PIN);
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	64 e0       	ldi	r22, 0x04	; 4
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_voidSetPinDirection>
}
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <LCD_voidGoToXY+0x6>
    1cc2:	0f 92       	push	r0
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
    1cca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAM_Address;
	if(Copy_u8YPos == LCD_LINE_ONE)
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	88 23       	and	r24, r24
    1cd0:	19 f4       	brne	.+6      	; 0x1cd8 <LCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAM_Address = Copy_u8XPos;
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	06 c0       	rjmp	.+12     	; 0x1ce4 <LCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos == LCD_LINE_TWO)
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	19 f4       	brne	.+6      	; 0x1ce4 <LCD_voidGoToXY+0x28>
	{
		Local_u8DDRAM_Address = Copy_u8XPos+0x40;
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	80 5c       	subi	r24, 0xC0	; 192
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_voidSendCommand(Local_u8DDRAM_Address+128);
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	80 58       	subi	r24, 0x80	; 128
    1ce8:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <LCD_voidWriteSpecialCharacter>:


void LCD_voidWriteSpecialCharacter(u8 *Copy_u8XPattern,u8 Copy_u8XPatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	27 97       	sbiw	r28, 0x07	; 7
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    1d10:	6d 83       	std	Y+5, r22	; 0x05
    1d12:	4e 83       	std	Y+6, r20	; 0x06
    1d14:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAM_Address = Copy_u8XPatternNumber*8; //Address at CGRAM with number =Copy_u8XPatternNumber
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidSendCommand(Local_u8CGRAM_Address+64);
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	80 5c       	subi	r24, 0xC0	; 192
    1d2e:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>

	for(u8 Local_u8Counter=0 ; Local_u8Counter<8 ; Local_u8Counter++)
    1d32:	19 82       	std	Y+1, r1	; 0x01
    1d34:	0e c0       	rjmp	.+28     	; 0x1d52 <LCD_voidWriteSpecialCharacter+0x5a>
	{
		LCD_voidSendData(Copy_u8XPattern[Local_u8Counter]);
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	fc 01       	movw	r30, r24
    1d42:	e2 0f       	add	r30, r18
    1d44:	f3 1f       	adc	r31, r19
    1d46:	80 81       	ld	r24, Z
    1d48:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
{
	u8 Local_u8CGRAM_Address = Copy_u8XPatternNumber*8; //Address at CGRAM with number =Copy_u8XPatternNumber

	LCD_voidSendCommand(Local_u8CGRAM_Address+64);

	for(u8 Local_u8Counter=0 ; Local_u8Counter<8 ; Local_u8Counter++)
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	8f 5f       	subi	r24, 0xFF	; 255
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	88 30       	cpi	r24, 0x08	; 8
    1d56:	78 f3       	brcs	.-34     	; 0x1d36 <LCD_voidWriteSpecialCharacter+0x3e>
	{
		LCD_voidSendData(Copy_u8XPattern[Local_u8Counter]);
	}

	LCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos); //DDRAM Location selection
    1d58:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>

	LCD_voidSendData(Copy_u8XPatternNumber); //DDRAM prints the value saved at address Copy_u8XPatternNumber
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
}
    1d66:	27 96       	adiw	r28, 0x07	; 7
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <Lm35_f32GetTemperature>:
#include "Lm35_Config.h"
#include "Lm35_Interface.h"
#include "avr/delay.h"

f32 Lm35_f32GetTemperature()
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	2e 97       	sbiw	r28, 0x0e	; 14
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
	u16 ADC_val = ADC_u16Read(LM35_PIN);
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	0e 94 37 07 	call	0xe6e	; 0xe6e <ADC_u16Read>
    1d92:	9e 87       	std	Y+14, r25	; 0x0e
    1d94:	8d 87       	std	Y+13, r24	; 0x0d
	f32 volt = ADC_f32ADCtoVolt(ADC_val);
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	0e 94 6d 07 	call	0xeda	; 0xeda <ADC_f32ADCtoVolt>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	89 87       	std	Y+9, r24	; 0x09
    1da4:	9a 87       	std	Y+10, r25	; 0x0a
    1da6:	ab 87       	std	Y+11, r26	; 0x0b
    1da8:	bc 87       	std	Y+12, r27	; 0x0c
	f32 mvolt = volt*1000;
    1daa:	69 85       	ldd	r22, Y+9	; 0x09
    1dac:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dae:	8b 85       	ldd	r24, Y+11	; 0x0b
    1db0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a e7       	ldi	r20, 0x7A	; 122
    1db8:	54 e4       	ldi	r21, 0x44	; 68
    1dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	af 83       	std	Y+7, r26	; 0x07
    1dc8:	b8 87       	std	Y+8, r27	; 0x08
	f32 temp = mvolt/10;
    1dca:	6d 81       	ldd	r22, Y+5	; 0x05
    1dcc:	7e 81       	ldd	r23, Y+6	; 0x06
    1dce:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd0:	98 85       	ldd	r25, Y+8	; 0x08
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	ab 83       	std	Y+3, r26	; 0x03
    1de8:	bc 83       	std	Y+4, r27	; 0x04
	return temp;
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	9a 81       	ldd	r25, Y+2	; 0x02
    1dee:	ab 81       	ldd	r26, Y+3	; 0x03
    1df0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	2e 96       	adiw	r28, 0x0e	; 14
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <Servo_voidInit>:
#include "Timer1_Interface.h"
#include "Servo_Interface.h"
#include "avr/delay.h"

void Servo_voidInit()
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTD,PIN5,OUTPUT_PIN);
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	65 e0       	ldi	r22, 0x05	; 5
    1e14:	41 e0       	ldi	r20, 0x01	; 1
    1e16:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_voidSetPinDirection>
	Timer1_voidInitPWM();
    1e1a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <Timer1_voidInitPWM>
}
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <Servo_voidMove>:
void Servo_voidMove(u16 Copy_u16Degree)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	60 97       	sbiw	r28, 0x10	; 16
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	98 8b       	std	Y+16, r25	; 0x10
    1e3a:	8f 87       	std	Y+15, r24	; 0x0f
	Timer1_voidSetCompareMatchValueChannalA(Copy_u16Degree);
    1e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3e:	98 89       	ldd	r25, Y+16	; 0x10
    1e40:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <Timer1_voidSetCompareMatchValueChannalA>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a0 e8       	ldi	r26, 0x80	; 128
    1e4a:	bf e3       	ldi	r27, 0x3F	; 63
    1e4c:	8b 87       	std	Y+11, r24	; 0x0b
    1e4e:	9c 87       	std	Y+12, r25	; 0x0c
    1e50:	ad 87       	std	Y+13, r26	; 0x0d
    1e52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a ef       	ldi	r20, 0xFA	; 250
    1e62:	54 e4       	ldi	r21, 0x44	; 68
    1e64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	8f 83       	std	Y+7, r24	; 0x07
    1e6e:	98 87       	std	Y+8, r25	; 0x08
    1e70:	a9 87       	std	Y+9, r26	; 0x09
    1e72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e74:	6f 81       	ldd	r22, Y+7	; 0x07
    1e76:	78 85       	ldd	r23, Y+8	; 0x08
    1e78:	89 85       	ldd	r24, Y+9	; 0x09
    1e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e8       	ldi	r20, 0x80	; 128
    1e82:	5f e3       	ldi	r21, 0x3F	; 63
    1e84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e88:	88 23       	and	r24, r24
    1e8a:	2c f4       	brge	.+10     	; 0x1e96 <Servo_voidMove+0x72>
		__ticks = 1;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	3f c0       	rjmp	.+126    	; 0x1f14 <Servo_voidMove+0xf0>
	else if (__tmp > 65535)
    1e96:	6f 81       	ldd	r22, Y+7	; 0x07
    1e98:	78 85       	ldd	r23, Y+8	; 0x08
    1e9a:	89 85       	ldd	r24, Y+9	; 0x09
    1e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	3f ef       	ldi	r19, 0xFF	; 255
    1ea2:	4f e7       	ldi	r20, 0x7F	; 127
    1ea4:	57 e4       	ldi	r21, 0x47	; 71
    1ea6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eaa:	18 16       	cp	r1, r24
    1eac:	4c f5       	brge	.+82     	; 0x1f00 <Servo_voidMove+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e2       	ldi	r20, 0x20	; 32
    1ebc:	51 e4       	ldi	r21, 0x41	; 65
    1ebe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	bc 01       	movw	r22, r24
    1ec8:	cd 01       	movw	r24, r26
    1eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <Servo_voidMove+0xd2>
    1ed8:	88 ec       	ldi	r24, 0xC8	; 200
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <Servo_voidMove+0xc0>
    1ee8:	9c 83       	std	Y+4, r25	; 0x04
    1eea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	69 f7       	brne	.-38     	; 0x1ed8 <Servo_voidMove+0xb4>
    1efe:	14 c0       	rjmp	.+40     	; 0x1f28 <Servo_voidMove+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f00:	6f 81       	ldd	r22, Y+7	; 0x07
    1f02:	78 85       	ldd	r23, Y+8	; 0x08
    1f04:	89 85       	ldd	r24, Y+9	; 0x09
    1f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9e 83       	std	Y+6, r25	; 0x06
    1f12:	8d 83       	std	Y+5, r24	; 0x05
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <Servo_voidMove+0xfc>
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f28:	60 96       	adiw	r28, 0x10	; 16
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <Timer1_voidInitPWM>:
#include "Timer1_Interface.h"
#include "Timer1_Register.h"


void Timer1_voidInitPWM()
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	//Select Compare Output Mode Fast PWM Mode Non Inverted
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1f42:	af e4       	ldi	r26, 0x4F	; 79
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	ef e4       	ldi	r30, 0x4F	; 79
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8f 7b       	andi	r24, 0xBF	; 191
    1f4e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1f50:	af e4       	ldi	r26, 0x4F	; 79
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	ef e4       	ldi	r30, 0x4F	; 79
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	80 68       	ori	r24, 0x80	; 128
    1f5c:	8c 93       	st	X, r24

	//Select Mode 14
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1f5e:	af e4       	ldi	r26, 0x4F	; 79
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	ef e4       	ldi	r30, 0x4F	; 79
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	8e 7f       	andi	r24, 0xFE	; 254
    1f6a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f6c:	af e4       	ldi	r26, 0x4F	; 79
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	ef e4       	ldi	r30, 0x4F	; 79
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	82 60       	ori	r24, 0x02	; 2
    1f78:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f7a:	ae e4       	ldi	r26, 0x4E	; 78
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	ee e4       	ldi	r30, 0x4E	; 78
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	88 60       	ori	r24, 0x08	; 8
    1f86:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1f88:	ae e4       	ldi	r26, 0x4E	; 78
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	ee e4       	ldi	r30, 0x4E	; 78
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 61       	ori	r24, 0x10	; 16
    1f94:	8c 93       	st	X, r24

	//Select PreScaler 8
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1f96:	ae e4       	ldi	r26, 0x4E	; 78
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	ee e4       	ldi	r30, 0x4E	; 78
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8e 7f       	andi	r24, 0xFE	; 254
    1fa2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1fa4:	ae e4       	ldi	r26, 0x4E	; 78
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	ee e4       	ldi	r30, 0x4E	; 78
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	82 60       	ori	r24, 0x02	; 2
    1fb0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1fb2:	ae e4       	ldi	r26, 0x4E	; 78
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	ee e4       	ldi	r30, 0x4E	; 78
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8b 7f       	andi	r24, 0xFB	; 251
    1fbe:	8c 93       	st	X, r24

	//Set OverFlow Value for 20 msec
	ICR1 = 20000;
    1fc0:	e6 e4       	ldi	r30, 0x46	; 70
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 e2       	ldi	r24, 0x20	; 32
    1fc6:	9e e4       	ldi	r25, 0x4E	; 78
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24

	//Set Compare Value for 0.75 msec
	OCR1A = 750;
    1fcc:	ea e4       	ldi	r30, 0x4A	; 74
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	8e ee       	ldi	r24, 0xEE	; 238
    1fd2:	92 e0       	ldi	r25, 0x02	; 2
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
}
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <Timer1_voidSetCompareMatchValueChannalA>:

void Timer1_voidSetCompareMatchValueChannalA(u16 Copy_u16CompareValue)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <Timer1_voidSetCompareMatchValueChannalA+0x6>
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1fec:	ea e4       	ldi	r30, 0x4A	; 74
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <UART_voidInit>:

#include "UART_Register.h"
#include "UART_Interface.h"

void UART_voidInit()
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
	/*Select the character size in bit 2*/
	CLR_BIT(UCSRB , UCSRB_UCSZ2);
    200a:	aa e2       	ldi	r26, 0x2A	; 42
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	ea e2       	ldi	r30, 0x2A	; 42
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8b 7f       	andi	r24, 0xFB	; 251
    2016:	8c 93       	st	X, r24
	 * - Asynchronous mode
	 * - no parity
	 * - 1 stop bit
	 * - 8 bit character size
	 * - polarity = 0*/
	UCSRC = 0b10000110;
    2018:	e0 e4       	ldi	r30, 0x40	; 64
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	86 e8       	ldi	r24, 0x86	; 134
    201e:	80 83       	st	Z, r24

	/*Set the baudrate 9600 bps*/
	UBRRL = 51;
    2020:	e9 e2       	ldi	r30, 0x29	; 41
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	83 e3       	ldi	r24, 0x33	; 51
    2026:	80 83       	st	Z, r24

	/*Enable the RX and TX*/
	SET_BIT(UCSRB , UCSRB_RXEN);
    2028:	aa e2       	ldi	r26, 0x2A	; 42
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	ea e2       	ldi	r30, 0x2A	; 42
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 61       	ori	r24, 0x10	; 16
    2034:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
    2036:	aa e2       	ldi	r26, 0x2A	; 42
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	ea e2       	ldi	r30, 0x2A	; 42
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	88 60       	ori	r24, 0x08	; 8
    2042:	8c 93       	st	X, r24
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <UART_voidWriteData>:

void UART_voidWriteData(u8 Copy_u8Data)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
	/*Waiting until the transmit buffer empty and ready for new data*/
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
    2056:	eb e2       	ldi	r30, 0x2B	; 43
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	82 95       	swap	r24
    205e:	86 95       	lsr	r24
    2060:	87 70       	andi	r24, 0x07	; 7
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	81 70       	andi	r24, 0x01	; 1
    2068:	90 70       	andi	r25, 0x00	; 0
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	a1 f3       	breq	.-24     	; 0x2056 <UART_voidWriteData+0xc>

	/*Put the new data*/
	UDR = Copy_u8Data;
    206e:	ec e2       	ldi	r30, 0x2C	; 44
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	80 83       	st	Z, r24
}
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <UART_u8ReadData>:

u8 UART_u8ReadData()
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
	/*Waiting until the receive buffer complete and the data be ready in UDR*/
	while(GET_BIT(UCSRA , UCSRA_RXC) == 0);
    2086:	eb e2       	ldi	r30, 0x2B	; 43
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	88 23       	and	r24, r24
    208e:	dc f7       	brge	.-10     	; 0x2086 <UART_u8ReadData+0x8>

	/*Read or return the data */
	return UDR;
    2090:	ec e2       	ldi	r30, 0x2C	; 44
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
}
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <main>:

#define DONE		'='


void main(void)
{
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	c9 58       	subi	r28, 0x89	; 137
    20aa:	d0 40       	sbci	r29, 0x00	; 0
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8State=DISABLE;
    20b6:	fe 01       	movw	r30, r28
    20b8:	e5 58       	subi	r30, 0x85	; 133
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	80 83       	st	Z, r24
	u8 Local_u8Trails=0;
    20c0:	fe 01       	movw	r30, r28
    20c2:	e6 58       	subi	r30, 0x86	; 134
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	10 82       	st	Z, r1

	//Leds
	DIO_voidSetPortDirection(DIO_PORTB, OUTPUT_PORT);
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	6f ef       	ldi	r22, 0xFF	; 255
    20cc:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(DIO_PORTB,LOW);
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>

	//Motor(Fan)
	DIO_voidSetPinDirection(DIO_PORTA,PIN2,OUTPUT_PIN);
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_voidSetPinDirection>

	Servo_voidInit();
    20e2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <Servo_voidInit>
	ADC_voidInit();
    20e6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_voidInit>
	LCD_voidConfigDirection();
    20ea:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_voidConfigDirection>
	LCD_voidInit();
    20ee:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <LCD_voidInit>
	UART_voidInit();
    20f2:	0e 94 01 10 	call	0x2002	; 0x2002 <UART_voidInit>

	while(1)
	{
		Local_u8State=DISABLE;
    20f6:	fe 01       	movw	r30, r28
    20f8:	e5 58       	subi	r30, 0x85	; 133
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	80 83       	st	Z, r24
    2100:	db c0       	rjmp	.+438    	; 0x22b8 <main+0x21c>
		while(Local_u8State==DISABLE)
		{
			Servo_voidMove(ZERO);
    2102:	8b ed       	ldi	r24, 0xDB	; 219
    2104:	95 e0       	ldi	r25, 0x05	; 5
    2106:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Servo_voidMove>
			Local_u8State=UART_u8ReadData();
    210a:	0e 94 3f 10 	call	0x207e	; 0x207e <UART_u8ReadData>
    210e:	fe 01       	movw	r30, r28
    2110:	e5 58       	subi	r30, 0x85	; 133
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 83       	st	Z, r24
			if(Local_u8State==ENABLE)
    2116:	fe 01       	movw	r30, r28
    2118:	e5 58       	subi	r30, 0x85	; 133
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	83 30       	cpi	r24, 0x03	; 3
    2120:	09 f0       	breq	.+2      	; 0x2124 <main+0x88>
    2122:	ca c0       	rjmp	.+404    	; 0x22b8 <main+0x21c>
			{
				LCD_voidGoToXY(0,0);
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteString("Welcome to Smart");
    212c:	80 e6       	ldi	r24, 0x60	; 96
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
				LCD_voidGoToXY(2,1);
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	61 e0       	ldi	r22, 0x01	; 1
    2138:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteString("Home System");
    213c:	81 e7       	ldi	r24, 0x71	; 113
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
    2144:	fe 01       	movw	r30, r28
    2146:	e3 59       	subi	r30, 0x93	; 147
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e4       	ldi	r25, 0x40	; 64
    214e:	ac e9       	ldi	r26, 0x9C	; 156
    2150:	b5 e4       	ldi	r27, 0x45	; 69
    2152:	80 83       	st	Z, r24
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	a2 83       	std	Z+2, r26	; 0x02
    2158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	8e 01       	movw	r16, r28
    215c:	07 59       	subi	r16, 0x97	; 151
    215e:	1f 4f       	sbci	r17, 0xFF	; 255
    2160:	fe 01       	movw	r30, r28
    2162:	e3 59       	subi	r30, 0x93	; 147
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4a ef       	ldi	r20, 0xFA	; 250
    2174:	54 e4       	ldi	r21, 0x44	; 68
    2176:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	f8 01       	movw	r30, r16
    2180:	80 83       	st	Z, r24
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	a2 83       	std	Z+2, r26	; 0x02
    2186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2188:	fe 01       	movw	r30, r28
    218a:	e7 59       	subi	r30, 0x97	; 151
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	60 81       	ld	r22, Z
    2190:	71 81       	ldd	r23, Z+1	; 0x01
    2192:	82 81       	ldd	r24, Z+2	; 0x02
    2194:	93 81       	ldd	r25, Z+3	; 0x03
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	44 f4       	brge	.+16     	; 0x21b6 <main+0x11a>
		__ticks = 1;
    21a6:	fe 01       	movw	r30, r28
    21a8:	e9 59       	subi	r30, 0x99	; 153
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	80 83       	st	Z, r24
    21b4:	64 c0       	rjmp	.+200    	; 0x227e <main+0x1e2>
	else if (__tmp > 65535)
    21b6:	fe 01       	movw	r30, r28
    21b8:	e7 59       	subi	r30, 0x97	; 151
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	4f e7       	ldi	r20, 0x7F	; 127
    21ca:	57 e4       	ldi	r21, 0x47	; 71
    21cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21d0:	18 16       	cp	r1, r24
    21d2:	0c f0       	brlt	.+2      	; 0x21d6 <main+0x13a>
    21d4:	43 c0       	rjmp	.+134    	; 0x225c <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	fe 01       	movw	r30, r28
    21d8:	e3 59       	subi	r30, 0x93	; 147
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e2       	ldi	r20, 0x20	; 32
    21ea:	51 e4       	ldi	r21, 0x41	; 65
    21ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8e 01       	movw	r16, r28
    21f6:	09 59       	subi	r16, 0x99	; 153
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	f8 01       	movw	r30, r16
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	80 83       	st	Z, r24
    220c:	1f c0       	rjmp	.+62     	; 0x224c <main+0x1b0>
    220e:	fe 01       	movw	r30, r28
    2210:	eb 59       	subi	r30, 0x9B	; 155
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	88 ec       	ldi	r24, 0xC8	; 200
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	fe 01       	movw	r30, r28
    221e:	eb 59       	subi	r30, 0x9B	; 155
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	80 81       	ld	r24, Z
    2224:	91 81       	ldd	r25, Z+1	; 0x01
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <main+0x18a>
    222a:	fe 01       	movw	r30, r28
    222c:	eb 59       	subi	r30, 0x9B	; 155
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	91 83       	std	Z+1, r25	; 0x01
    2232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	de 01       	movw	r26, r28
    2236:	a9 59       	subi	r26, 0x99	; 153
    2238:	bf 4f       	sbci	r27, 0xFF	; 255
    223a:	fe 01       	movw	r30, r28
    223c:	e9 59       	subi	r30, 0x99	; 153
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
    2242:	91 81       	ldd	r25, Z+1	; 0x01
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	11 96       	adiw	r26, 0x01	; 1
    2248:	9c 93       	st	X, r25
    224a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224c:	fe 01       	movw	r30, r28
    224e:	e9 59       	subi	r30, 0x99	; 153
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	d1 f6       	brne	.-76     	; 0x220e <main+0x172>
    225a:	27 c0       	rjmp	.+78     	; 0x22aa <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225c:	8e 01       	movw	r16, r28
    225e:	09 59       	subi	r16, 0x99	; 153
    2260:	1f 4f       	sbci	r17, 0xFF	; 255
    2262:	fe 01       	movw	r30, r28
    2264:	e7 59       	subi	r30, 0x97	; 151
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	f8 01       	movw	r30, r16
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	80 83       	st	Z, r24
    227e:	de 01       	movw	r26, r28
    2280:	ad 59       	subi	r26, 0x9D	; 157
    2282:	bf 4f       	sbci	r27, 0xFF	; 255
    2284:	fe 01       	movw	r30, r28
    2286:	e9 59       	subi	r30, 0x99	; 153
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	8d 93       	st	X+, r24
    2290:	9c 93       	st	X, r25
    2292:	fe 01       	movw	r30, r28
    2294:	ed 59       	subi	r30, 0x9D	; 157
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <main+0x200>
    22a0:	fe 01       	movw	r30, r28
    22a2:	ed 59       	subi	r30, 0x9D	; 157
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	80 83       	st	Z, r24
				_delay_ms(5000);
				LCD_voidSendCommand(1);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>
				Local_u8State=CLOSED;
    22b0:	fe 01       	movw	r30, r28
    22b2:	e5 58       	subi	r30, 0x85	; 133
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	10 82       	st	Z, r1
	UART_voidInit();

	while(1)
	{
		Local_u8State=DISABLE;
		while(Local_u8State==DISABLE)
    22b8:	fe 01       	movw	r30, r28
    22ba:	e5 58       	subi	r30, 0x85	; 133
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <main+0x22a>
    22c4:	1e cf       	rjmp	.-452    	; 0x2102 <main+0x66>
    22c6:	61 c4       	rjmp	.+2242   	; 0x2b8a <main+0xaee>
				Local_u8State=CLOSED;
			}
		}
		while(Local_u8State==CLOSED && Local_u8Trails<3)
		{
			UART_voidWriteData(DONE);
    22c8:	8d e3       	ldi	r24, 0x3D	; 61
    22ca:	0e 94 25 10 	call	0x204a	; 0x204a <UART_voidWriteData>
			LCD_voidSendCommand(1);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>
			Servo_voidMove(ZERO);
    22d4:	8b ed       	ldi	r24, 0xDB	; 219
    22d6:	95 e0       	ldi	r25, 0x05	; 5
    22d8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Servo_voidMove>
			LCD_voidGoToXY(0,0);
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
			LCD_voidWriteString("USER:");
    22e4:	8d e7       	ldi	r24, 0x7D	; 125
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
			u8 i=0;
    22ec:	fe 01       	movw	r30, r28
    22ee:	e7 58       	subi	r30, 0x87	; 135
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	10 82       	st	Z, r1
			u8 j=0;
    22f4:	fe 01       	movw	r30, r28
    22f6:	e8 58       	subi	r30, 0x88	; 136
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	10 82       	st	Z, r1
			u8 Num=0;
    22fc:	fe 01       	movw	r30, r28
    22fe:	e9 58       	subi	r30, 0x89	; 137
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	10 82       	st	Z, r1
    2304:	27 c0       	rjmp	.+78     	; 0x2354 <main+0x2b8>
			while(Num!=DONE)
			{
				Num=UART_u8ReadData();
    2306:	0e 94 3f 10 	call	0x207e	; 0x207e <UART_u8ReadData>
    230a:	fe 01       	movw	r30, r28
    230c:	e9 58       	subi	r30, 0x89	; 137
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 83       	st	Z, r24
				if(Num >='0' && Num <='9' && i<4)
    2312:	fe 01       	movw	r30, r28
    2314:	e9 58       	subi	r30, 0x89	; 137
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	80 33       	cpi	r24, 0x30	; 48
    231c:	d8 f0       	brcs	.+54     	; 0x2354 <main+0x2b8>
    231e:	fe 01       	movw	r30, r28
    2320:	e9 58       	subi	r30, 0x89	; 137
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	80 81       	ld	r24, Z
    2326:	8a 33       	cpi	r24, 0x3A	; 58
    2328:	a8 f4       	brcc	.+42     	; 0x2354 <main+0x2b8>
    232a:	fe 01       	movw	r30, r28
    232c:	e7 58       	subi	r30, 0x87	; 135
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 81       	ld	r24, Z
    2332:	84 30       	cpi	r24, 0x04	; 4
    2334:	78 f4       	brcc	.+30     	; 0x2354 <main+0x2b8>
				{
					LCD_voidSendData(Num);
    2336:	fe 01       	movw	r30, r28
    2338:	e9 58       	subi	r30, 0x89	; 137
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
					i++;
    2342:	de 01       	movw	r26, r28
    2344:	a7 58       	subi	r26, 0x87	; 135
    2346:	bf 4f       	sbci	r27, 0xFF	; 255
    2348:	fe 01       	movw	r30, r28
    234a:	e7 58       	subi	r30, 0x87	; 135
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	8f 5f       	subi	r24, 0xFF	; 255
    2352:	8c 93       	st	X, r24
			LCD_voidGoToXY(0,0);
			LCD_voidWriteString("USER:");
			u8 i=0;
			u8 j=0;
			u8 Num=0;
			while(Num!=DONE)
    2354:	fe 01       	movw	r30, r28
    2356:	e9 58       	subi	r30, 0x89	; 137
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 81       	ld	r24, Z
    235c:	8d 33       	cpi	r24, 0x3D	; 61
    235e:	99 f6       	brne	.-90     	; 0x2306 <main+0x26a>
				{
					LCD_voidSendData(Num);
					i++;
				}
			}
			Num=UART_u8ReadData();
    2360:	0e 94 3f 10 	call	0x207e	; 0x207e <UART_u8ReadData>
    2364:	fe 01       	movw	r30, r28
    2366:	e9 58       	subi	r30, 0x89	; 137
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 83       	st	Z, r24
			if(Num == RIGHT)
    236c:	fe 01       	movw	r30, r28
    236e:	e9 58       	subi	r30, 0x89	; 137
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	85 30       	cpi	r24, 0x05	; 5
    2376:	09 f0       	breq	.+2      	; 0x237a <main+0x2de>
    2378:	f6 c2       	rjmp	.+1516   	; 0x2966 <main+0x8ca>
			{
				LCD_voidGoToXY(0,1);
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	61 e0       	ldi	r22, 0x01	; 1
    237e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteString("Password:");
    2382:	83 e8       	ldi	r24, 0x83	; 131
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
    238a:	f0 c0       	rjmp	.+480    	; 0x256c <main+0x4d0>
				while(Num!=DONE)
				{
					Num=UART_u8ReadData();
    238c:	0e 94 3f 10 	call	0x207e	; 0x207e <UART_u8ReadData>
    2390:	fe 01       	movw	r30, r28
    2392:	e9 58       	subi	r30, 0x89	; 137
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 83       	st	Z, r24
					if(j<4 && Num>='0' && Num<='9')
    2398:	fe 01       	movw	r30, r28
    239a:	e8 58       	subi	r30, 0x88	; 136
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	84 30       	cpi	r24, 0x04	; 4
    23a2:	08 f0       	brcs	.+2      	; 0x23a6 <main+0x30a>
    23a4:	e3 c0       	rjmp	.+454    	; 0x256c <main+0x4d0>
    23a6:	fe 01       	movw	r30, r28
    23a8:	e9 58       	subi	r30, 0x89	; 137
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	80 33       	cpi	r24, 0x30	; 48
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <main+0x318>
    23b2:	dc c0       	rjmp	.+440    	; 0x256c <main+0x4d0>
    23b4:	fe 01       	movw	r30, r28
    23b6:	e9 58       	subi	r30, 0x89	; 137
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	8a 33       	cpi	r24, 0x3A	; 58
    23be:	08 f0       	brcs	.+2      	; 0x23c2 <main+0x326>
    23c0:	d5 c0       	rjmp	.+426    	; 0x256c <main+0x4d0>
					{
						LCD_voidGoToXY(9+j,1);
    23c2:	fe 01       	movw	r30, r28
    23c4:	e8 58       	subi	r30, 0x88	; 136
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	87 5f       	subi	r24, 0xF7	; 247
    23cc:	61 e0       	ldi	r22, 0x01	; 1
    23ce:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
						LCD_voidSendData(Num);
    23d2:	fe 01       	movw	r30, r28
    23d4:	e9 58       	subi	r30, 0x89	; 137
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
    23de:	fe 01       	movw	r30, r28
    23e0:	e1 5a       	subi	r30, 0xA1	; 161
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	a8 ec       	ldi	r26, 0xC8	; 200
    23ea:	b2 e4       	ldi	r27, 0x42	; 66
    23ec:	80 83       	st	Z, r24
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	a2 83       	std	Z+2, r26	; 0x02
    23f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f4:	8e 01       	movw	r16, r28
    23f6:	05 5a       	subi	r16, 0xA5	; 165
    23f8:	1f 4f       	sbci	r17, 0xFF	; 255
    23fa:	fe 01       	movw	r30, r28
    23fc:	e1 5a       	subi	r30, 0xA1	; 161
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	60 81       	ld	r22, Z
    2402:	71 81       	ldd	r23, Z+1	; 0x01
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	4a ef       	ldi	r20, 0xFA	; 250
    240e:	54 e4       	ldi	r21, 0x44	; 68
    2410:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	f8 01       	movw	r30, r16
    241a:	80 83       	st	Z, r24
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	a2 83       	std	Z+2, r26	; 0x02
    2420:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2422:	fe 01       	movw	r30, r28
    2424:	e5 5a       	subi	r30, 0xA5	; 165
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	60 81       	ld	r22, Z
    242a:	71 81       	ldd	r23, Z+1	; 0x01
    242c:	82 81       	ldd	r24, Z+2	; 0x02
    242e:	93 81       	ldd	r25, Z+3	; 0x03
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	5f e3       	ldi	r21, 0x3F	; 63
    2438:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	44 f4       	brge	.+16     	; 0x2450 <main+0x3b4>
		__ticks = 1;
    2440:	fe 01       	movw	r30, r28
    2442:	e7 5a       	subi	r30, 0xA7	; 167
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
    244e:	64 c0       	rjmp	.+200    	; 0x2518 <main+0x47c>
	else if (__tmp > 65535)
    2450:	fe 01       	movw	r30, r28
    2452:	e5 5a       	subi	r30, 0xA5	; 165
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	60 81       	ld	r22, Z
    2458:	71 81       	ldd	r23, Z+1	; 0x01
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	3f ef       	ldi	r19, 0xFF	; 255
    2462:	4f e7       	ldi	r20, 0x7F	; 127
    2464:	57 e4       	ldi	r21, 0x47	; 71
    2466:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    246a:	18 16       	cp	r1, r24
    246c:	0c f0       	brlt	.+2      	; 0x2470 <main+0x3d4>
    246e:	43 c0       	rjmp	.+134    	; 0x24f6 <main+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	fe 01       	movw	r30, r28
    2472:	e1 5a       	subi	r30, 0xA1	; 161
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e2       	ldi	r20, 0x20	; 32
    2484:	51 e4       	ldi	r21, 0x41	; 65
    2486:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	8e 01       	movw	r16, r28
    2490:	07 5a       	subi	r16, 0xA7	; 167
    2492:	1f 4f       	sbci	r17, 0xFF	; 255
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	f8 01       	movw	r30, r16
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	80 83       	st	Z, r24
    24a6:	1f c0       	rjmp	.+62     	; 0x24e6 <main+0x44a>
    24a8:	fe 01       	movw	r30, r28
    24aa:	e9 5a       	subi	r30, 0xA9	; 169
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	88 ec       	ldi	r24, 0xC8	; 200
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
    24b6:	fe 01       	movw	r30, r28
    24b8:	e9 5a       	subi	r30, 0xA9	; 169
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	80 81       	ld	r24, Z
    24be:	91 81       	ldd	r25, Z+1	; 0x01
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <main+0x424>
    24c4:	fe 01       	movw	r30, r28
    24c6:	e9 5a       	subi	r30, 0xA9	; 169
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	de 01       	movw	r26, r28
    24d0:	a7 5a       	subi	r26, 0xA7	; 167
    24d2:	bf 4f       	sbci	r27, 0xFF	; 255
    24d4:	fe 01       	movw	r30, r28
    24d6:	e7 5a       	subi	r30, 0xA7	; 167
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	9c 93       	st	X, r25
    24e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e6:	fe 01       	movw	r30, r28
    24e8:	e7 5a       	subi	r30, 0xA7	; 167
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	80 81       	ld	r24, Z
    24ee:	91 81       	ldd	r25, Z+1	; 0x01
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	d1 f6       	brne	.-76     	; 0x24a8 <main+0x40c>
    24f4:	27 c0       	rjmp	.+78     	; 0x2544 <main+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f6:	8e 01       	movw	r16, r28
    24f8:	07 5a       	subi	r16, 0xA7	; 167
    24fa:	1f 4f       	sbci	r17, 0xFF	; 255
    24fc:	fe 01       	movw	r30, r28
    24fe:	e5 5a       	subi	r30, 0xA5	; 165
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	f8 01       	movw	r30, r16
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
    2518:	de 01       	movw	r26, r28
    251a:	ab 5a       	subi	r26, 0xAB	; 171
    251c:	bf 4f       	sbci	r27, 0xFF	; 255
    251e:	fe 01       	movw	r30, r28
    2520:	e7 5a       	subi	r30, 0xA7	; 167
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	8d 93       	st	X+, r24
    252a:	9c 93       	st	X, r25
    252c:	fe 01       	movw	r30, r28
    252e:	eb 5a       	subi	r30, 0xAB	; 171
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <main+0x49a>
    253a:	fe 01       	movw	r30, r28
    253c:	eb 5a       	subi	r30, 0xAB	; 171
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
						_delay_ms(100);
						LCD_voidGoToXY(9+j,1);
    2544:	fe 01       	movw	r30, r28
    2546:	e8 58       	subi	r30, 0x88	; 136
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	87 5f       	subi	r24, 0xF7	; 247
    254e:	61 e0       	ldi	r22, 0x01	; 1
    2550:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
						LCD_voidSendData('*');
    2554:	8a e2       	ldi	r24, 0x2A	; 42
    2556:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
						j++;
    255a:	de 01       	movw	r26, r28
    255c:	a8 58       	subi	r26, 0x88	; 136
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	e8 58       	subi	r30, 0x88	; 136
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	8f 5f       	subi	r24, 0xFF	; 255
    256a:	8c 93       	st	X, r24
			Num=UART_u8ReadData();
			if(Num == RIGHT)
			{
				LCD_voidGoToXY(0,1);
				LCD_voidWriteString("Password:");
				while(Num!=DONE)
    256c:	fe 01       	movw	r30, r28
    256e:	e9 58       	subi	r30, 0x89	; 137
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	8d 33       	cpi	r24, 0x3D	; 61
    2576:	09 f0       	breq	.+2      	; 0x257a <main+0x4de>
    2578:	09 cf       	rjmp	.-494    	; 0x238c <main+0x2f0>
						LCD_voidGoToXY(9+j,1);
						LCD_voidSendData('*');
						j++;
					}
				}
				Num=UART_u8ReadData();
    257a:	0e 94 3f 10 	call	0x207e	; 0x207e <UART_u8ReadData>
    257e:	fe 01       	movw	r30, r28
    2580:	e9 58       	subi	r30, 0x89	; 137
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 83       	st	Z, r24
				if(Num == RIGHT)
    2586:	fe 01       	movw	r30, r28
    2588:	e9 58       	subi	r30, 0x89	; 137
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	85 30       	cpi	r24, 0x05	; 5
    2590:	09 f0       	breq	.+2      	; 0x2594 <main+0x4f8>
    2592:	c7 c0       	rjmp	.+398    	; 0x2722 <main+0x686>
				{
					LCD_voidSendCommand(1);
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>
					LCD_voidGoToXY(5,0);
    259a:	85 e0       	ldi	r24, 0x05	; 5
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
					LCD_voidWriteString("Welcome");
    25a2:	8d e8       	ldi	r24, 0x8D	; 141
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
    25aa:	fe 01       	movw	r30, r28
    25ac:	ef 5a       	subi	r30, 0xAF	; 175
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	aa e7       	ldi	r26, 0x7A	; 122
    25b6:	b4 e4       	ldi	r27, 0x44	; 68
    25b8:	80 83       	st	Z, r24
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	a2 83       	std	Z+2, r26	; 0x02
    25be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c0:	8e 01       	movw	r16, r28
    25c2:	03 5b       	subi	r16, 0xB3	; 179
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	fe 01       	movw	r30, r28
    25c8:	ef 5a       	subi	r30, 0xAF	; 175
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	4a ef       	ldi	r20, 0xFA	; 250
    25da:	54 e4       	ldi	r21, 0x44	; 68
    25dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	f8 01       	movw	r30, r16
    25e6:	80 83       	st	Z, r24
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ee:	fe 01       	movw	r30, r28
    25f0:	e3 5b       	subi	r30, 0xB3	; 179
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	44 f4       	brge	.+16     	; 0x261c <main+0x580>
		__ticks = 1;
    260c:	fe 01       	movw	r30, r28
    260e:	e5 5b       	subi	r30, 0xB5	; 181
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	80 83       	st	Z, r24
    261a:	64 c0       	rjmp	.+200    	; 0x26e4 <main+0x648>
	else if (__tmp > 65535)
    261c:	fe 01       	movw	r30, r28
    261e:	e3 5b       	subi	r30, 0xB3	; 179
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	0c f0       	brlt	.+2      	; 0x263c <main+0x5a0>
    263a:	43 c0       	rjmp	.+134    	; 0x26c2 <main+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	fe 01       	movw	r30, r28
    263e:	ef 5a       	subi	r30, 0xAF	; 175
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	8e 01       	movw	r16, r28
    265c:	05 5b       	subi	r16, 0xB5	; 181
    265e:	1f 4f       	sbci	r17, 0xFF	; 255
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	f8 01       	movw	r30, r16
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	1f c0       	rjmp	.+62     	; 0x26b2 <main+0x616>
    2674:	fe 01       	movw	r30, r28
    2676:	e7 5b       	subi	r30, 0xB7	; 183
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	80 83       	st	Z, r24
    2682:	fe 01       	movw	r30, r28
    2684:	e7 5b       	subi	r30, 0xB7	; 183
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <main+0x5f0>
    2690:	fe 01       	movw	r30, r28
    2692:	e7 5b       	subi	r30, 0xB7	; 183
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	de 01       	movw	r26, r28
    269c:	a5 5b       	subi	r26, 0xB5	; 181
    269e:	bf 4f       	sbci	r27, 0xFF	; 255
    26a0:	fe 01       	movw	r30, r28
    26a2:	e5 5b       	subi	r30, 0xB5	; 181
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	91 81       	ldd	r25, Z+1	; 0x01
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	11 96       	adiw	r26, 0x01	; 1
    26ae:	9c 93       	st	X, r25
    26b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	fe 01       	movw	r30, r28
    26b4:	e5 5b       	subi	r30, 0xB5	; 181
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	d1 f6       	brne	.-76     	; 0x2674 <main+0x5d8>
    26c0:	27 c0       	rjmp	.+78     	; 0x2710 <main+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	8e 01       	movw	r16, r28
    26c4:	05 5b       	subi	r16, 0xB5	; 181
    26c6:	1f 4f       	sbci	r17, 0xFF	; 255
    26c8:	fe 01       	movw	r30, r28
    26ca:	e3 5b       	subi	r30, 0xB3	; 179
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	f8 01       	movw	r30, r16
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	de 01       	movw	r26, r28
    26e6:	a9 5b       	subi	r26, 0xB9	; 185
    26e8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	e5 5b       	subi	r30, 0xB5	; 181
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	8d 93       	st	X+, r24
    26f6:	9c 93       	st	X, r25
    26f8:	fe 01       	movw	r30, r28
    26fa:	e9 5b       	subi	r30, 0xB9	; 185
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <main+0x666>
    2706:	fe 01       	movw	r30, r28
    2708:	e9 5b       	subi	r30, 0xB9	; 185
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_voidSendCommand(1);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>
					Local_u8State = OPEN;
    2716:	fe 01       	movw	r30, r28
    2718:	e5 58       	subi	r30, 0x85	; 133
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	80 83       	st	Z, r24
    2720:	34 c2       	rjmp	.+1128   	; 0x2b8a <main+0xaee>
				}
				else if(Num == WRONG)
    2722:	fe 01       	movw	r30, r28
    2724:	e9 58       	subi	r30, 0x89	; 137
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	80 81       	ld	r24, Z
    272a:	84 30       	cpi	r24, 0x04	; 4
    272c:	09 f0       	breq	.+2      	; 0x2730 <main+0x694>
    272e:	2d c2       	rjmp	.+1114   	; 0x2b8a <main+0xaee>
				{
					Local_u8Trails++;
    2730:	de 01       	movw	r26, r28
    2732:	a6 58       	subi	r26, 0x86	; 134
    2734:	bf 4f       	sbci	r27, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	e6 58       	subi	r30, 0x86	; 134
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	8f 5f       	subi	r24, 0xFF	; 255
    2740:	8c 93       	st	X, r24
					LCD_voidSendCommand(1);
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>
					LCD_voidGoToXY(0,0);
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
					LCD_voidWriteString("WRONG Password");
    2750:	85 e9       	ldi	r24, 0x95	; 149
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
    2758:	fe 01       	movw	r30, r28
    275a:	ed 5b       	subi	r30, 0xBD	; 189
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	a6 e9       	ldi	r26, 0x96	; 150
    2764:	b3 e4       	ldi	r27, 0x43	; 67
    2766:	80 83       	st	Z, r24
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	a2 83       	std	Z+2, r26	; 0x02
    276c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276e:	8e 01       	movw	r16, r28
    2770:	01 5c       	subi	r16, 0xC1	; 193
    2772:	1f 4f       	sbci	r17, 0xFF	; 255
    2774:	fe 01       	movw	r30, r28
    2776:	ed 5b       	subi	r30, 0xBD	; 189
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	60 81       	ld	r22, Z
    277c:	71 81       	ldd	r23, Z+1	; 0x01
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	93 81       	ldd	r25, Z+3	; 0x03
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a ef       	ldi	r20, 0xFA	; 250
    2788:	54 e4       	ldi	r21, 0x44	; 68
    278a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	f8 01       	movw	r30, r16
    2794:	80 83       	st	Z, r24
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	a2 83       	std	Z+2, r26	; 0x02
    279a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    279c:	fe 01       	movw	r30, r28
    279e:	ff 96       	adiw	r30, 0x3f	; 63
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e8       	ldi	r20, 0x80	; 128
    27ae:	5f e3       	ldi	r21, 0x3F	; 63
    27b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27b4:	88 23       	and	r24, r24
    27b6:	2c f4       	brge	.+10     	; 0x27c2 <main+0x726>
		__ticks = 1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9e af       	std	Y+62, r25	; 0x3e
    27be:	8d af       	std	Y+61, r24	; 0x3d
    27c0:	46 c0       	rjmp	.+140    	; 0x284e <main+0x7b2>
	else if (__tmp > 65535)
    27c2:	fe 01       	movw	r30, r28
    27c4:	ff 96       	adiw	r30, 0x3f	; 63
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	3f ef       	ldi	r19, 0xFF	; 255
    27d2:	4f e7       	ldi	r20, 0x7F	; 127
    27d4:	57 e4       	ldi	r21, 0x47	; 71
    27d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27da:	18 16       	cp	r1, r24
    27dc:	64 f5       	brge	.+88     	; 0x2836 <main+0x79a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	fe 01       	movw	r30, r28
    27e0:	ed 5b       	subi	r30, 0xBD	; 189
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9e af       	std	Y+62, r25	; 0x3e
    280a:	8d af       	std	Y+61, r24	; 0x3d
    280c:	0f c0       	rjmp	.+30     	; 0x282c <main+0x790>
    280e:	88 ec       	ldi	r24, 0xC8	; 200
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9c af       	std	Y+60, r25	; 0x3c
    2814:	8b af       	std	Y+59, r24	; 0x3b
    2816:	8b ad       	ldd	r24, Y+59	; 0x3b
    2818:	9c ad       	ldd	r25, Y+60	; 0x3c
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <main+0x77e>
    281e:	9c af       	std	Y+60, r25	; 0x3c
    2820:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2822:	8d ad       	ldd	r24, Y+61	; 0x3d
    2824:	9e ad       	ldd	r25, Y+62	; 0x3e
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	9e af       	std	Y+62, r25	; 0x3e
    282a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282c:	8d ad       	ldd	r24, Y+61	; 0x3d
    282e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	69 f7       	brne	.-38     	; 0x280e <main+0x772>
    2834:	16 c0       	rjmp	.+44     	; 0x2862 <main+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	fe 01       	movw	r30, r28
    2838:	ff 96       	adiw	r30, 0x3f	; 63
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9e af       	std	Y+62, r25	; 0x3e
    284c:	8d af       	std	Y+61, r24	; 0x3d
    284e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2850:	9e ad       	ldd	r25, Y+62	; 0x3e
    2852:	9a af       	std	Y+58, r25	; 0x3a
    2854:	89 af       	std	Y+57, r24	; 0x39
    2856:	89 ad       	ldd	r24, Y+57	; 0x39
    2858:	9a ad       	ldd	r25, Y+58	; 0x3a
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <main+0x7be>
    285e:	9a af       	std	Y+58, r25	; 0x3a
    2860:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(300);
					if(Local_u8Trails<3)
    2862:	fe 01       	movw	r30, r28
    2864:	e6 58       	subi	r30, 0x86	; 134
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	83 30       	cpi	r24, 0x03	; 3
    286c:	08 f0       	brcs	.+2      	; 0x2870 <main+0x7d4>
    286e:	8d c1       	rjmp	.+794    	; 0x2b8a <main+0xaee>
					{
						LCD_voidGoToXY(4,1);
    2870:	84 e0       	ldi	r24, 0x04	; 4
    2872:	61 e0       	ldi	r22, 0x01	; 1
    2874:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
						LCD_voidWriteString("Try Again");
    2878:	84 ea       	ldi	r24, 0xA4	; 164
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	aa e7       	ldi	r26, 0x7A	; 122
    2886:	b4 e4       	ldi	r27, 0x44	; 68
    2888:	8d ab       	std	Y+53, r24	; 0x35
    288a:	9e ab       	std	Y+54, r25	; 0x36
    288c:	af ab       	std	Y+55, r26	; 0x37
    288e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2890:	6d a9       	ldd	r22, Y+53	; 0x35
    2892:	7e a9       	ldd	r23, Y+54	; 0x36
    2894:	8f a9       	ldd	r24, Y+55	; 0x37
    2896:	98 ad       	ldd	r25, Y+56	; 0x38
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a ef       	ldi	r20, 0xFA	; 250
    289e:	54 e4       	ldi	r21, 0x44	; 68
    28a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	89 ab       	std	Y+49, r24	; 0x31
    28aa:	9a ab       	std	Y+50, r25	; 0x32
    28ac:	ab ab       	std	Y+51, r26	; 0x33
    28ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28b0:	69 a9       	ldd	r22, Y+49	; 0x31
    28b2:	7a a9       	ldd	r23, Y+50	; 0x32
    28b4:	8b a9       	ldd	r24, Y+51	; 0x33
    28b6:	9c a9       	ldd	r25, Y+52	; 0x34
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	2c f4       	brge	.+10     	; 0x28d2 <main+0x836>
		__ticks = 1;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	98 ab       	std	Y+48, r25	; 0x30
    28ce:	8f a7       	std	Y+47, r24	; 0x2f
    28d0:	3f c0       	rjmp	.+126    	; 0x2950 <main+0x8b4>
	else if (__tmp > 65535)
    28d2:	69 a9       	ldd	r22, Y+49	; 0x31
    28d4:	7a a9       	ldd	r23, Y+50	; 0x32
    28d6:	8b a9       	ldd	r24, Y+51	; 0x33
    28d8:	9c a9       	ldd	r25, Y+52	; 0x34
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	4c f5       	brge	.+82     	; 0x293c <main+0x8a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	6d a9       	ldd	r22, Y+53	; 0x35
    28ec:	7e a9       	ldd	r23, Y+54	; 0x36
    28ee:	8f a9       	ldd	r24, Y+55	; 0x37
    28f0:	98 ad       	ldd	r25, Y+56	; 0x38
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	98 ab       	std	Y+48, r25	; 0x30
    2910:	8f a7       	std	Y+47, r24	; 0x2f
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <main+0x896>
    2914:	88 ec       	ldi	r24, 0xC8	; 200
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9e a7       	std	Y+46, r25	; 0x2e
    291a:	8d a7       	std	Y+45, r24	; 0x2d
    291c:	8d a5       	ldd	r24, Y+45	; 0x2d
    291e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <main+0x884>
    2924:	9e a7       	std	Y+46, r25	; 0x2e
    2926:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	8f a5       	ldd	r24, Y+47	; 0x2f
    292a:	98 a9       	ldd	r25, Y+48	; 0x30
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	98 ab       	std	Y+48, r25	; 0x30
    2930:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	8f a5       	ldd	r24, Y+47	; 0x2f
    2934:	98 a9       	ldd	r25, Y+48	; 0x30
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	69 f7       	brne	.-38     	; 0x2914 <main+0x878>
    293a:	27 c1       	rjmp	.+590    	; 0x2b8a <main+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	69 a9       	ldd	r22, Y+49	; 0x31
    293e:	7a a9       	ldd	r23, Y+50	; 0x32
    2940:	8b a9       	ldd	r24, Y+51	; 0x33
    2942:	9c a9       	ldd	r25, Y+52	; 0x34
    2944:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	98 ab       	std	Y+48, r25	; 0x30
    294e:	8f a7       	std	Y+47, r24	; 0x2f
    2950:	8f a5       	ldd	r24, Y+47	; 0x2f
    2952:	98 a9       	ldd	r25, Y+48	; 0x30
    2954:	9c a7       	std	Y+44, r25	; 0x2c
    2956:	8b a7       	std	Y+43, r24	; 0x2b
    2958:	8b a5       	ldd	r24, Y+43	; 0x2b
    295a:	9c a5       	ldd	r25, Y+44	; 0x2c
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <main+0x8c0>
    2960:	9c a7       	std	Y+44, r25	; 0x2c
    2962:	8b a7       	std	Y+43, r24	; 0x2b
    2964:	12 c1       	rjmp	.+548    	; 0x2b8a <main+0xaee>
						_delay_ms(1000);
					}
				}
			}
			else if(Num == WRONG)
    2966:	fe 01       	movw	r30, r28
    2968:	e9 58       	subi	r30, 0x89	; 137
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	84 30       	cpi	r24, 0x04	; 4
    2970:	09 f0       	breq	.+2      	; 0x2974 <main+0x8d8>
    2972:	0b c1       	rjmp	.+534    	; 0x2b8a <main+0xaee>
			{
				LCD_voidWriteDecimalNumber(WRONG);
    2974:	84 e0       	ldi	r24, 0x04	; 4
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
				Local_u8Trails++;
    297c:	de 01       	movw	r26, r28
    297e:	a6 58       	subi	r26, 0x86	; 134
    2980:	bf 4f       	sbci	r27, 0xFF	; 255
    2982:	fe 01       	movw	r30, r28
    2984:	e6 58       	subi	r30, 0x86	; 134
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 81       	ld	r24, Z
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	8c 93       	st	X, r24
				LCD_voidSendCommand(1);
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>
				LCD_voidGoToXY(0,0);
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteString("WRONG User");
    299c:	8e ea       	ldi	r24, 0xAE	; 174
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	a6 e9       	ldi	r26, 0x96	; 150
    29aa:	b3 e4       	ldi	r27, 0x43	; 67
    29ac:	8f a3       	std	Y+39, r24	; 0x27
    29ae:	98 a7       	std	Y+40, r25	; 0x28
    29b0:	a9 a7       	std	Y+41, r26	; 0x29
    29b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b4:	6f a1       	ldd	r22, Y+39	; 0x27
    29b6:	78 a5       	ldd	r23, Y+40	; 0x28
    29b8:	89 a5       	ldd	r24, Y+41	; 0x29
    29ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	4a ef       	ldi	r20, 0xFA	; 250
    29c2:	54 e4       	ldi	r21, 0x44	; 68
    29c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	8b a3       	std	Y+35, r24	; 0x23
    29ce:	9c a3       	std	Y+36, r25	; 0x24
    29d0:	ad a3       	std	Y+37, r26	; 0x25
    29d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29d4:	6b a1       	ldd	r22, Y+35	; 0x23
    29d6:	7c a1       	ldd	r23, Y+36	; 0x24
    29d8:	8d a1       	ldd	r24, Y+37	; 0x25
    29da:	9e a1       	ldd	r25, Y+38	; 0x26
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e8       	ldi	r20, 0x80	; 128
    29e2:	5f e3       	ldi	r21, 0x3F	; 63
    29e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29e8:	88 23       	and	r24, r24
    29ea:	2c f4       	brge	.+10     	; 0x29f6 <main+0x95a>
		__ticks = 1;
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	9a a3       	std	Y+34, r25	; 0x22
    29f2:	89 a3       	std	Y+33, r24	; 0x21
    29f4:	3f c0       	rjmp	.+126    	; 0x2a74 <main+0x9d8>
	else if (__tmp > 65535)
    29f6:	6b a1       	ldd	r22, Y+35	; 0x23
    29f8:	7c a1       	ldd	r23, Y+36	; 0x24
    29fa:	8d a1       	ldd	r24, Y+37	; 0x25
    29fc:	9e a1       	ldd	r25, Y+38	; 0x26
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	3f ef       	ldi	r19, 0xFF	; 255
    2a02:	4f e7       	ldi	r20, 0x7F	; 127
    2a04:	57 e4       	ldi	r21, 0x47	; 71
    2a06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a0a:	18 16       	cp	r1, r24
    2a0c:	4c f5       	brge	.+82     	; 0x2a60 <main+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a10:	78 a5       	ldd	r23, Y+40	; 0x28
    2a12:	89 a5       	ldd	r24, Y+41	; 0x29
    2a14:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e2       	ldi	r20, 0x20	; 32
    2a1c:	51 e4       	ldi	r21, 0x41	; 65
    2a1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	9a a3       	std	Y+34, r25	; 0x22
    2a34:	89 a3       	std	Y+33, r24	; 0x21
    2a36:	0f c0       	rjmp	.+30     	; 0x2a56 <main+0x9ba>
    2a38:	88 ec       	ldi	r24, 0xC8	; 200
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	98 a3       	std	Y+32, r25	; 0x20
    2a3e:	8f 8f       	std	Y+31, r24	; 0x1f
    2a40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a42:	98 a1       	ldd	r25, Y+32	; 0x20
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <main+0x9a8>
    2a48:	98 a3       	std	Y+32, r25	; 0x20
    2a4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	9a a3       	std	Y+34, r25	; 0x22
    2a54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a56:	89 a1       	ldd	r24, Y+33	; 0x21
    2a58:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	69 f7       	brne	.-38     	; 0x2a38 <main+0x99c>
    2a5e:	14 c0       	rjmp	.+40     	; 0x2a88 <main+0x9ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a60:	6b a1       	ldd	r22, Y+35	; 0x23
    2a62:	7c a1       	ldd	r23, Y+36	; 0x24
    2a64:	8d a1       	ldd	r24, Y+37	; 0x25
    2a66:	9e a1       	ldd	r25, Y+38	; 0x26
    2a68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	9a a3       	std	Y+34, r25	; 0x22
    2a72:	89 a3       	std	Y+33, r24	; 0x21
    2a74:	89 a1       	ldd	r24, Y+33	; 0x21
    2a76:	9a a1       	ldd	r25, Y+34	; 0x22
    2a78:	9e 8f       	std	Y+30, r25	; 0x1e
    2a7a:	8d 8f       	std	Y+29, r24	; 0x1d
    2a7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <main+0x9e4>
    2a84:	9e 8f       	std	Y+30, r25	; 0x1e
    2a86:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(300);
				if(Local_u8Trails<3)
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e6 58       	subi	r30, 0x86	; 134
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 81       	ld	r24, Z
    2a90:	83 30       	cpi	r24, 0x03	; 3
    2a92:	08 f0       	brcs	.+2      	; 0x2a96 <main+0x9fa>
    2a94:	7a c0       	rjmp	.+244    	; 0x2b8a <main+0xaee>
				{
					LCD_voidGoToXY(4,1);
    2a96:	84 e0       	ldi	r24, 0x04	; 4
    2a98:	61 e0       	ldi	r22, 0x01	; 1
    2a9a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
					LCD_voidWriteString("Try Again");
    2a9e:	84 ea       	ldi	r24, 0xA4	; 164
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	aa e7       	ldi	r26, 0x7A	; 122
    2aac:	b4 e4       	ldi	r27, 0x44	; 68
    2aae:	89 8f       	std	Y+25, r24	; 0x19
    2ab0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ab4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	4a ef       	ldi	r20, 0xFA	; 250
    2ac4:	54 e4       	ldi	r21, 0x44	; 68
    2ac6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	8d 8b       	std	Y+21, r24	; 0x15
    2ad0:	9e 8b       	std	Y+22, r25	; 0x16
    2ad2:	af 8b       	std	Y+23, r26	; 0x17
    2ad4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ada:	8f 89       	ldd	r24, Y+23	; 0x17
    2adc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e8       	ldi	r20, 0x80	; 128
    2ae4:	5f e3       	ldi	r21, 0x3F	; 63
    2ae6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2aea:	88 23       	and	r24, r24
    2aec:	2c f4       	brge	.+10     	; 0x2af8 <main+0xa5c>
		__ticks = 1;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9c 8b       	std	Y+20, r25	; 0x14
    2af4:	8b 8b       	std	Y+19, r24	; 0x13
    2af6:	3f c0       	rjmp	.+126    	; 0x2b76 <main+0xada>
	else if (__tmp > 65535)
    2af8:	6d 89       	ldd	r22, Y+21	; 0x15
    2afa:	7e 89       	ldd	r23, Y+22	; 0x16
    2afc:	8f 89       	ldd	r24, Y+23	; 0x17
    2afe:	98 8d       	ldd	r25, Y+24	; 0x18
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	57 e4       	ldi	r21, 0x47	; 71
    2b08:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	4c f5       	brge	.+82     	; 0x2b62 <main+0xac6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b10:	69 8d       	ldd	r22, Y+25	; 0x19
    2b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e2       	ldi	r20, 0x20	; 32
    2b1e:	51 e4       	ldi	r21, 0x41	; 65
    2b20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	9c 8b       	std	Y+20, r25	; 0x14
    2b36:	8b 8b       	std	Y+19, r24	; 0x13
    2b38:	0f c0       	rjmp	.+30     	; 0x2b58 <main+0xabc>
    2b3a:	88 ec       	ldi	r24, 0xC8	; 200
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9a 8b       	std	Y+18, r25	; 0x12
    2b40:	89 8b       	std	Y+17, r24	; 0x11
    2b42:	89 89       	ldd	r24, Y+17	; 0x11
    2b44:	9a 89       	ldd	r25, Y+18	; 0x12
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <main+0xaaa>
    2b4a:	9a 8b       	std	Y+18, r25	; 0x12
    2b4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b50:	9c 89       	ldd	r25, Y+20	; 0x14
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	9c 8b       	std	Y+20, r25	; 0x14
    2b56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b58:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	69 f7       	brne	.-38     	; 0x2b3a <main+0xa9e>
    2b60:	14 c0       	rjmp	.+40     	; 0x2b8a <main+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b62:	6d 89       	ldd	r22, Y+21	; 0x15
    2b64:	7e 89       	ldd	r23, Y+22	; 0x16
    2b66:	8f 89       	ldd	r24, Y+23	; 0x17
    2b68:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
    2b76:	8b 89       	ldd	r24, Y+19	; 0x13
    2b78:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7a:	98 8b       	std	Y+16, r25	; 0x10
    2b7c:	8f 87       	std	Y+15, r24	; 0x0f
    2b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b80:	98 89       	ldd	r25, Y+16	; 0x10
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <main+0xae6>
    2b86:	98 8b       	std	Y+16, r25	; 0x10
    2b88:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(5000);
				LCD_voidSendCommand(1);
				Local_u8State=CLOSED;
			}
		}
		while(Local_u8State==CLOSED && Local_u8Trails<3)
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e5 58       	subi	r30, 0x85	; 133
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	88 23       	and	r24, r24
    2b94:	39 f4       	brne	.+14     	; 0x2ba4 <main+0xb08>
    2b96:	fe 01       	movw	r30, r28
    2b98:	e6 58       	subi	r30, 0x86	; 134
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 81       	ld	r24, Z
    2b9e:	83 30       	cpi	r24, 0x03	; 3
    2ba0:	08 f4       	brcc	.+2      	; 0x2ba4 <main+0xb08>
    2ba2:	92 cb       	rjmp	.-2268   	; 0x22c8 <main+0x22c>
					_delay_ms(1000);
				}
			}
		}

		if(Local_u8Trails==3)
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e6 58       	subi	r30, 0x86	; 134
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	83 30       	cpi	r24, 0x03	; 3
    2bae:	09 f0       	breq	.+2      	; 0x2bb2 <main+0xb16>
    2bb0:	59 c3       	rjmp	.+1714   	; 0x3264 <main+0x11c8>
		{
			Local_u8Trails=0;
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e6 58       	subi	r30, 0x86	; 134
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	10 82       	st	Z, r1
			Local_u8State = DISABLE;
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e5 58       	subi	r30, 0x85	; 133
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	80 83       	st	Z, r24
			LCD_voidSendCommand(1);
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>
			LCD_voidGoToXY(5,0);
    2bca:	85 e0       	ldi	r24, 0x05	; 5
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
			LCD_voidWriteString("Goodbye");
    2bd2:	89 eb       	ldi	r24, 0xB9	; 185
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	aa e7       	ldi	r26, 0x7A	; 122
    2be0:	b4 e4       	ldi	r27, 0x44	; 68
    2be2:	8b 87       	std	Y+11, r24	; 0x0b
    2be4:	9c 87       	std	Y+12, r25	; 0x0c
    2be6:	ad 87       	std	Y+13, r26	; 0x0d
    2be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a ef       	ldi	r20, 0xFA	; 250
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8f 83       	std	Y+7, r24	; 0x07
    2c04:	98 87       	std	Y+8, r25	; 0x08
    2c06:	a9 87       	std	Y+9, r26	; 0x09
    2c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0c:	78 85       	ldd	r23, Y+8	; 0x08
    2c0e:	89 85       	ldd	r24, Y+9	; 0x09
    2c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <main+0xb90>
		__ticks = 1;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	3f c0       	rjmp	.+126    	; 0x2caa <main+0xc0e>
	else if (__tmp > 65535)
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	4c f5       	brge	.+82     	; 0x2c96 <main+0xbfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <main+0xbf0>
    2c6e:	88 ec       	ldi	r24, 0xC8	; 200
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <main+0xbde>
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <main+0xbd2>
    2c94:	14 c0       	rjmp	.+40     	; 0x2cbe <main+0xc22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <main+0xc1a>
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_voidSendCommand(1);
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_voidSendCommand>
    2cc4:	cf c2       	rjmp	.+1438   	; 0x3264 <main+0x11c8>
		}
      while(Local_u8State!=DISABLE)
      {
		if(Local_u8State!=DISABLE)
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	e5 58       	subi	r30, 0x85	; 133
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 81       	ld	r24, Z
    2cce:	82 30       	cpi	r24, 0x02	; 2
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <main+0xc38>
    2cd2:	c8 c2       	rjmp	.+1424   	; 0x3264 <main+0x11c8>
		{
			Servo_voidMove(NINETY);
    2cd4:	84 ec       	ldi	r24, 0xC4	; 196
    2cd6:	99 e0       	ldi	r25, 0x09	; 9
    2cd8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Servo_voidMove>

			//Temperature Sensor
			LCD_voidGoToXY(0,0);
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
			LCD_voidWriteString("Temp : ");
    2ce4:	81 ec       	ldi	r24, 0xC1	; 193
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
			LCD_voidWriteFloatNumber(Lm35_f32GetTemperature());
    2cec:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <Lm35_f32GetTemperature>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	bc 01       	movw	r22, r24
    2cf6:	cd 01       	movw	r24, r26
    2cf8:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_voidWriteFloatNumber>
			LCD_voidSendData('c');
    2cfc:	83 e6       	ldi	r24, 0x63	; 99
    2cfe:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
			if(Lm35_f32GetTemperature()>=26.0)
    2d02:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <Lm35_f32GetTemperature>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	bc 01       	movw	r22, r24
    2d0c:	cd 01       	movw	r24, r26
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 ed       	ldi	r20, 0xD0	; 208
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    2d1a:	88 23       	and	r24, r24
    2d1c:	6c f0       	brlt	.+26     	; 0x2d38 <main+0xc9c>
			{
				DIO_voidSetPinValue(DIO_PORTA,PIN2,HIGH);
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	62 e0       	ldi	r22, 0x02	; 2
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>
				LCD_voidGoToXY(15,0);
    2d28:	8f e0       	ldi	r24, 0x0F	; 15
    2d2a:	60 e0       	ldi	r22, 0x00	; 0
    2d2c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidSendData('M');
    2d30:	8d e4       	ldi	r24, 0x4D	; 77
    2d32:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
    2d36:	0c c0       	rjmp	.+24     	; 0x2d50 <main+0xcb4>
			}
			else
			{
				DIO_voidSetPinValue(DIO_PORTA,PIN2,LOW);
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	62 e0       	ldi	r22, 0x02	; 2
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_voidSetPinValue>
				LCD_voidGoToXY(15,0);
    2d42:	8f e0       	ldi	r24, 0x0F	; 15
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidSendData(' ');
    2d4a:	80 e2       	ldi	r24, 0x20	; 32
    2d4c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidSendData>
			}

			//LDR Sensor
			LCD_voidGoToXY(0,1);
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
			LCD_voidWriteString("On Leds : ");
    2d58:	89 ec       	ldi	r24, 0xC9	; 201
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_voidWriteString>
			u16 Local_u16ADCVal = ADC_u16Read(ADC1);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	0e 94 37 07 	call	0xe6e	; 0xe6e <ADC_u16Read>
    2d66:	fe 01       	movw	r30, r28
    2d68:	eb 58       	subi	r30, 0x8B	; 139
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
			f32 Local_f32LDR_Volt = ADC_f32ADCtoVolt(Local_u16ADCVal);
    2d70:	fe 01       	movw	r30, r28
    2d72:	eb 58       	subi	r30, 0x8B	; 139
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	0e 94 6d 07 	call	0xeda	; 0xeda <ADC_f32ADCtoVolt>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	fe 01       	movw	r30, r28
    2d84:	ef 58       	subi	r30, 0x8F	; 143
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 83       	st	Z, r24
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	a2 83       	std	Z+2, r26	; 0x02
    2d8e:	b3 83       	std	Z+3, r27	; 0x03

			if(Local_f32LDR_Volt>=4.97)
    2d90:	fe 01       	movw	r30, r28
    2d92:	ef 58       	subi	r30, 0x8F	; 143
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	60 81       	ld	r22, Z
    2d98:	71 81       	ldd	r23, Z+1	; 0x01
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	2d e3       	ldi	r18, 0x3D	; 61
    2da0:	3a e0       	ldi	r19, 0x0A	; 10
    2da2:	4f e9       	ldi	r20, 0x9F	; 159
    2da4:	50 e4       	ldi	r21, 0x40	; 64
    2da6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    2daa:	88 23       	and	r24, r24
    2dac:	6c f0       	brlt	.+26     	; 0x2dc8 <main+0xd2c>
			{
				DIO_voidSetPortValue(DIO_PORTB,0b11111111);
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	6f ef       	ldi	r22, 0xFF	; 255
    2db2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>
				LCD_voidGoToXY(11,1);
    2db6:	8b e0       	ldi	r24, 0x0B	; 11
    2db8:	61 e0       	ldi	r22, 0x01	; 1
    2dba:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteDecimalNumber(8);
    2dbe:	88 e0       	ldi	r24, 0x08	; 8
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    2dc6:	4e c2       	rjmp	.+1180   	; 0x3264 <main+0x11c8>
			}
			else if(Local_f32LDR_Volt>=4.95 && Local_f32LDR_Volt<4.97)
    2dc8:	c7 57       	subi	r28, 0x77	; 119
    2dca:	df 4f       	sbci	r29, 0xFF	; 255
    2dcc:	18 82       	st	Y, r1
    2dce:	c9 58       	subi	r28, 0x89	; 137
    2dd0:	d0 40       	sbci	r29, 0x00	; 0
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	ef 58       	subi	r30, 0x8F	; 143
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	60 81       	ld	r22, Z
    2dda:	71 81       	ldd	r23, Z+1	; 0x01
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	93 81       	ldd	r25, Z+3	; 0x03
    2de0:	26 e6       	ldi	r18, 0x66	; 102
    2de2:	36 e6       	ldi	r19, 0x66	; 102
    2de4:	4e e9       	ldi	r20, 0x9E	; 158
    2de6:	50 e4       	ldi	r21, 0x40	; 64
    2de8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    2dec:	88 23       	and	r24, r24
    2dee:	34 f0       	brlt	.+12     	; 0x2dfc <main+0xd60>
    2df0:	f1 e0       	ldi	r31, 0x01	; 1
    2df2:	c7 57       	subi	r28, 0x77	; 119
    2df4:	df 4f       	sbci	r29, 0xFF	; 255
    2df6:	f8 83       	st	Y, r31
    2df8:	c9 58       	subi	r28, 0x89	; 137
    2dfa:	d0 40       	sbci	r29, 0x00	; 0
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	c7 57       	subi	r28, 0x77	; 119
    2e00:	df 4f       	sbci	r29, 0xFF	; 255
    2e02:	98 81       	ld	r25, Y
    2e04:	c9 58       	subi	r28, 0x89	; 137
    2e06:	d0 40       	sbci	r29, 0x00	; 0
    2e08:	89 27       	eor	r24, r25
    2e0a:	88 23       	and	r24, r24
    2e0c:	81 f5       	brne	.+96     	; 0x2e6e <main+0xdd2>
    2e0e:	c8 57       	subi	r28, 0x78	; 120
    2e10:	df 4f       	sbci	r29, 0xFF	; 255
    2e12:	18 82       	st	Y, r1
    2e14:	c8 58       	subi	r28, 0x88	; 136
    2e16:	d0 40       	sbci	r29, 0x00	; 0
    2e18:	fe 01       	movw	r30, r28
    2e1a:	ef 58       	subi	r30, 0x8F	; 143
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	2d e3       	ldi	r18, 0x3D	; 61
    2e28:	3a e0       	ldi	r19, 0x0A	; 10
    2e2a:	4f e9       	ldi	r20, 0x9F	; 159
    2e2c:	50 e4       	ldi	r21, 0x40	; 64
    2e2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	34 f4       	brge	.+12     	; 0x2e42 <main+0xda6>
    2e36:	e1 e0       	ldi	r30, 0x01	; 1
    2e38:	c8 57       	subi	r28, 0x78	; 120
    2e3a:	df 4f       	sbci	r29, 0xFF	; 255
    2e3c:	e8 83       	st	Y, r30
    2e3e:	c8 58       	subi	r28, 0x88	; 136
    2e40:	d0 40       	sbci	r29, 0x00	; 0
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	c8 57       	subi	r28, 0x78	; 120
    2e46:	df 4f       	sbci	r29, 0xFF	; 255
    2e48:	f8 81       	ld	r31, Y
    2e4a:	c8 58       	subi	r28, 0x88	; 136
    2e4c:	d0 40       	sbci	r29, 0x00	; 0
    2e4e:	8f 27       	eor	r24, r31
    2e50:	88 23       	and	r24, r24
    2e52:	69 f4       	brne	.+26     	; 0x2e6e <main+0xdd2>
			{
				DIO_voidSetPortValue(DIO_PORTB,0b01111111);
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	6f e7       	ldi	r22, 0x7F	; 127
    2e58:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>
				LCD_voidGoToXY(11,1);
    2e5c:	8b e0       	ldi	r24, 0x0B	; 11
    2e5e:	61 e0       	ldi	r22, 0x01	; 1
    2e60:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteDecimalNumber(7);
    2e64:	87 e0       	ldi	r24, 0x07	; 7
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    2e6c:	fb c1       	rjmp	.+1014   	; 0x3264 <main+0x11c8>
			}
			else if(Local_f32LDR_Volt>=4.90 && Local_f32LDR_Volt<4.95)
    2e6e:	c9 57       	subi	r28, 0x79	; 121
    2e70:	df 4f       	sbci	r29, 0xFF	; 255
    2e72:	18 82       	st	Y, r1
    2e74:	c7 58       	subi	r28, 0x87	; 135
    2e76:	d0 40       	sbci	r29, 0x00	; 0
    2e78:	fe 01       	movw	r30, r28
    2e7a:	ef 58       	subi	r30, 0x8F	; 143
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	2d ec       	ldi	r18, 0xCD	; 205
    2e88:	3c ec       	ldi	r19, 0xCC	; 204
    2e8a:	4c e9       	ldi	r20, 0x9C	; 156
    2e8c:	50 e4       	ldi	r21, 0x40	; 64
    2e8e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    2e92:	88 23       	and	r24, r24
    2e94:	34 f0       	brlt	.+12     	; 0x2ea2 <main+0xe06>
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	c9 57       	subi	r28, 0x79	; 121
    2e9a:	df 4f       	sbci	r29, 0xFF	; 255
    2e9c:	88 83       	st	Y, r24
    2e9e:	c7 58       	subi	r28, 0x87	; 135
    2ea0:	d0 40       	sbci	r29, 0x00	; 0
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	c9 57       	subi	r28, 0x79	; 121
    2ea6:	df 4f       	sbci	r29, 0xFF	; 255
    2ea8:	98 81       	ld	r25, Y
    2eaa:	c7 58       	subi	r28, 0x87	; 135
    2eac:	d0 40       	sbci	r29, 0x00	; 0
    2eae:	89 27       	eor	r24, r25
    2eb0:	88 23       	and	r24, r24
    2eb2:	81 f5       	brne	.+96     	; 0x2f14 <main+0xe78>
    2eb4:	ca 57       	subi	r28, 0x7A	; 122
    2eb6:	df 4f       	sbci	r29, 0xFF	; 255
    2eb8:	18 82       	st	Y, r1
    2eba:	c6 58       	subi	r28, 0x86	; 134
    2ebc:	d0 40       	sbci	r29, 0x00	; 0
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ef 58       	subi	r30, 0x8F	; 143
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	26 e6       	ldi	r18, 0x66	; 102
    2ece:	36 e6       	ldi	r19, 0x66	; 102
    2ed0:	4e e9       	ldi	r20, 0x9E	; 158
    2ed2:	50 e4       	ldi	r21, 0x40	; 64
    2ed4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ed8:	88 23       	and	r24, r24
    2eda:	34 f4       	brge	.+12     	; 0x2ee8 <main+0xe4c>
    2edc:	e1 e0       	ldi	r30, 0x01	; 1
    2ede:	ca 57       	subi	r28, 0x7A	; 122
    2ee0:	df 4f       	sbci	r29, 0xFF	; 255
    2ee2:	e8 83       	st	Y, r30
    2ee4:	c6 58       	subi	r28, 0x86	; 134
    2ee6:	d0 40       	sbci	r29, 0x00	; 0
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	ca 57       	subi	r28, 0x7A	; 122
    2eec:	df 4f       	sbci	r29, 0xFF	; 255
    2eee:	f8 81       	ld	r31, Y
    2ef0:	c6 58       	subi	r28, 0x86	; 134
    2ef2:	d0 40       	sbci	r29, 0x00	; 0
    2ef4:	8f 27       	eor	r24, r31
    2ef6:	88 23       	and	r24, r24
    2ef8:	69 f4       	brne	.+26     	; 0x2f14 <main+0xe78>
			{
				DIO_voidSetPortValue(DIO_PORTB,0b00111111);
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	6f e3       	ldi	r22, 0x3F	; 63
    2efe:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>
				LCD_voidGoToXY(11,1);
    2f02:	8b e0       	ldi	r24, 0x0B	; 11
    2f04:	61 e0       	ldi	r22, 0x01	; 1
    2f06:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteDecimalNumber(6);
    2f0a:	86 e0       	ldi	r24, 0x06	; 6
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    2f12:	a8 c1       	rjmp	.+848    	; 0x3264 <main+0x11c8>
			}
			else if(Local_f32LDR_Volt>=4.76 && Local_f32LDR_Volt<4.90)
    2f14:	cb 57       	subi	r28, 0x7B	; 123
    2f16:	df 4f       	sbci	r29, 0xFF	; 255
    2f18:	18 82       	st	Y, r1
    2f1a:	c5 58       	subi	r28, 0x85	; 133
    2f1c:	d0 40       	sbci	r29, 0x00	; 0
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ef 58       	subi	r30, 0x8F	; 143
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	60 81       	ld	r22, Z
    2f26:	71 81       	ldd	r23, Z+1	; 0x01
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	93 81       	ldd	r25, Z+3	; 0x03
    2f2c:	2c ee       	ldi	r18, 0xEC	; 236
    2f2e:	31 e5       	ldi	r19, 0x51	; 81
    2f30:	48 e9       	ldi	r20, 0x98	; 152
    2f32:	50 e4       	ldi	r21, 0x40	; 64
    2f34:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    2f38:	88 23       	and	r24, r24
    2f3a:	34 f0       	brlt	.+12     	; 0x2f48 <main+0xeac>
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	cb 57       	subi	r28, 0x7B	; 123
    2f40:	df 4f       	sbci	r29, 0xFF	; 255
    2f42:	88 83       	st	Y, r24
    2f44:	c5 58       	subi	r28, 0x85	; 133
    2f46:	d0 40       	sbci	r29, 0x00	; 0
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	cb 57       	subi	r28, 0x7B	; 123
    2f4c:	df 4f       	sbci	r29, 0xFF	; 255
    2f4e:	98 81       	ld	r25, Y
    2f50:	c5 58       	subi	r28, 0x85	; 133
    2f52:	d0 40       	sbci	r29, 0x00	; 0
    2f54:	89 27       	eor	r24, r25
    2f56:	88 23       	and	r24, r24
    2f58:	81 f5       	brne	.+96     	; 0x2fba <main+0xf1e>
    2f5a:	cc 57       	subi	r28, 0x7C	; 124
    2f5c:	df 4f       	sbci	r29, 0xFF	; 255
    2f5e:	18 82       	st	Y, r1
    2f60:	c4 58       	subi	r28, 0x84	; 132
    2f62:	d0 40       	sbci	r29, 0x00	; 0
    2f64:	fe 01       	movw	r30, r28
    2f66:	ef 58       	subi	r30, 0x8F	; 143
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	60 81       	ld	r22, Z
    2f6c:	71 81       	ldd	r23, Z+1	; 0x01
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	2d ec       	ldi	r18, 0xCD	; 205
    2f74:	3c ec       	ldi	r19, 0xCC	; 204
    2f76:	4c e9       	ldi	r20, 0x9C	; 156
    2f78:	50 e4       	ldi	r21, 0x40	; 64
    2f7a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f7e:	88 23       	and	r24, r24
    2f80:	34 f4       	brge	.+12     	; 0x2f8e <main+0xef2>
    2f82:	e1 e0       	ldi	r30, 0x01	; 1
    2f84:	cc 57       	subi	r28, 0x7C	; 124
    2f86:	df 4f       	sbci	r29, 0xFF	; 255
    2f88:	e8 83       	st	Y, r30
    2f8a:	c4 58       	subi	r28, 0x84	; 132
    2f8c:	d0 40       	sbci	r29, 0x00	; 0
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	cc 57       	subi	r28, 0x7C	; 124
    2f92:	df 4f       	sbci	r29, 0xFF	; 255
    2f94:	f8 81       	ld	r31, Y
    2f96:	c4 58       	subi	r28, 0x84	; 132
    2f98:	d0 40       	sbci	r29, 0x00	; 0
    2f9a:	8f 27       	eor	r24, r31
    2f9c:	88 23       	and	r24, r24
    2f9e:	69 f4       	brne	.+26     	; 0x2fba <main+0xf1e>
			{
				DIO_voidSetPortValue(DIO_PORTB,0b00011111);
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	6f e1       	ldi	r22, 0x1F	; 31
    2fa4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>
				LCD_voidGoToXY(11,1);
    2fa8:	8b e0       	ldi	r24, 0x0B	; 11
    2faa:	61 e0       	ldi	r22, 0x01	; 1
    2fac:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteDecimalNumber(5);
    2fb0:	85 e0       	ldi	r24, 0x05	; 5
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    2fb8:	55 c1       	rjmp	.+682    	; 0x3264 <main+0x11c8>
			}
			else if(Local_f32LDR_Volt>=4.54 && Local_f32LDR_Volt<4.76)
    2fba:	cd 57       	subi	r28, 0x7D	; 125
    2fbc:	df 4f       	sbci	r29, 0xFF	; 255
    2fbe:	18 82       	st	Y, r1
    2fc0:	c3 58       	subi	r28, 0x83	; 131
    2fc2:	d0 40       	sbci	r29, 0x00	; 0
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	ef 58       	subi	r30, 0x8F	; 143
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	60 81       	ld	r22, Z
    2fcc:	71 81       	ldd	r23, Z+1	; 0x01
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	2e ea       	ldi	r18, 0xAE	; 174
    2fd4:	37 e4       	ldi	r19, 0x47	; 71
    2fd6:	41 e9       	ldi	r20, 0x91	; 145
    2fd8:	50 e4       	ldi	r21, 0x40	; 64
    2fda:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    2fde:	88 23       	and	r24, r24
    2fe0:	34 f0       	brlt	.+12     	; 0x2fee <main+0xf52>
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	cd 57       	subi	r28, 0x7D	; 125
    2fe6:	df 4f       	sbci	r29, 0xFF	; 255
    2fe8:	88 83       	st	Y, r24
    2fea:	c3 58       	subi	r28, 0x83	; 131
    2fec:	d0 40       	sbci	r29, 0x00	; 0
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	cd 57       	subi	r28, 0x7D	; 125
    2ff2:	df 4f       	sbci	r29, 0xFF	; 255
    2ff4:	98 81       	ld	r25, Y
    2ff6:	c3 58       	subi	r28, 0x83	; 131
    2ff8:	d0 40       	sbci	r29, 0x00	; 0
    2ffa:	89 27       	eor	r24, r25
    2ffc:	88 23       	and	r24, r24
    2ffe:	81 f5       	brne	.+96     	; 0x3060 <main+0xfc4>
    3000:	ce 57       	subi	r28, 0x7E	; 126
    3002:	df 4f       	sbci	r29, 0xFF	; 255
    3004:	18 82       	st	Y, r1
    3006:	c2 58       	subi	r28, 0x82	; 130
    3008:	d0 40       	sbci	r29, 0x00	; 0
    300a:	fe 01       	movw	r30, r28
    300c:	ef 58       	subi	r30, 0x8F	; 143
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	60 81       	ld	r22, Z
    3012:	71 81       	ldd	r23, Z+1	; 0x01
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	93 81       	ldd	r25, Z+3	; 0x03
    3018:	2c ee       	ldi	r18, 0xEC	; 236
    301a:	31 e5       	ldi	r19, 0x51	; 81
    301c:	48 e9       	ldi	r20, 0x98	; 152
    301e:	50 e4       	ldi	r21, 0x40	; 64
    3020:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3024:	88 23       	and	r24, r24
    3026:	34 f4       	brge	.+12     	; 0x3034 <main+0xf98>
    3028:	e1 e0       	ldi	r30, 0x01	; 1
    302a:	ce 57       	subi	r28, 0x7E	; 126
    302c:	df 4f       	sbci	r29, 0xFF	; 255
    302e:	e8 83       	st	Y, r30
    3030:	c2 58       	subi	r28, 0x82	; 130
    3032:	d0 40       	sbci	r29, 0x00	; 0
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	ce 57       	subi	r28, 0x7E	; 126
    3038:	df 4f       	sbci	r29, 0xFF	; 255
    303a:	f8 81       	ld	r31, Y
    303c:	c2 58       	subi	r28, 0x82	; 130
    303e:	d0 40       	sbci	r29, 0x00	; 0
    3040:	8f 27       	eor	r24, r31
    3042:	88 23       	and	r24, r24
    3044:	69 f4       	brne	.+26     	; 0x3060 <main+0xfc4>
			{
				DIO_voidSetPortValue(DIO_PORTB,0b00001111);
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	6f e0       	ldi	r22, 0x0F	; 15
    304a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>
				LCD_voidGoToXY(11,1);
    304e:	8b e0       	ldi	r24, 0x0B	; 11
    3050:	61 e0       	ldi	r22, 0x01	; 1
    3052:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteDecimalNumber(4);
    3056:	84 e0       	ldi	r24, 0x04	; 4
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    305e:	02 c1       	rjmp	.+516    	; 0x3264 <main+0x11c8>
			}
			else if(Local_f32LDR_Volt>=4.16 && Local_f32LDR_Volt<4.54)
    3060:	cf 57       	subi	r28, 0x7F	; 127
    3062:	df 4f       	sbci	r29, 0xFF	; 255
    3064:	18 82       	st	Y, r1
    3066:	c1 58       	subi	r28, 0x81	; 129
    3068:	d0 40       	sbci	r29, 0x00	; 0
    306a:	fe 01       	movw	r30, r28
    306c:	ef 58       	subi	r30, 0x8F	; 143
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	60 81       	ld	r22, Z
    3072:	71 81       	ldd	r23, Z+1	; 0x01
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	28 eb       	ldi	r18, 0xB8	; 184
    307a:	3e e1       	ldi	r19, 0x1E	; 30
    307c:	45 e8       	ldi	r20, 0x85	; 133
    307e:	50 e4       	ldi	r21, 0x40	; 64
    3080:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    3084:	88 23       	and	r24, r24
    3086:	34 f0       	brlt	.+12     	; 0x3094 <main+0xff8>
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	cf 57       	subi	r28, 0x7F	; 127
    308c:	df 4f       	sbci	r29, 0xFF	; 255
    308e:	88 83       	st	Y, r24
    3090:	c1 58       	subi	r28, 0x81	; 129
    3092:	d0 40       	sbci	r29, 0x00	; 0
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	cf 57       	subi	r28, 0x7F	; 127
    3098:	df 4f       	sbci	r29, 0xFF	; 255
    309a:	98 81       	ld	r25, Y
    309c:	c1 58       	subi	r28, 0x81	; 129
    309e:	d0 40       	sbci	r29, 0x00	; 0
    30a0:	89 27       	eor	r24, r25
    30a2:	88 23       	and	r24, r24
    30a4:	81 f5       	brne	.+96     	; 0x3106 <main+0x106a>
    30a6:	c0 58       	subi	r28, 0x80	; 128
    30a8:	df 4f       	sbci	r29, 0xFF	; 255
    30aa:	18 82       	st	Y, r1
    30ac:	c0 58       	subi	r28, 0x80	; 128
    30ae:	d0 40       	sbci	r29, 0x00	; 0
    30b0:	fe 01       	movw	r30, r28
    30b2:	ef 58       	subi	r30, 0x8F	; 143
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	60 81       	ld	r22, Z
    30b8:	71 81       	ldd	r23, Z+1	; 0x01
    30ba:	82 81       	ldd	r24, Z+2	; 0x02
    30bc:	93 81       	ldd	r25, Z+3	; 0x03
    30be:	2e ea       	ldi	r18, 0xAE	; 174
    30c0:	37 e4       	ldi	r19, 0x47	; 71
    30c2:	41 e9       	ldi	r20, 0x91	; 145
    30c4:	50 e4       	ldi	r21, 0x40	; 64
    30c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30ca:	88 23       	and	r24, r24
    30cc:	34 f4       	brge	.+12     	; 0x30da <main+0x103e>
    30ce:	e1 e0       	ldi	r30, 0x01	; 1
    30d0:	c0 58       	subi	r28, 0x80	; 128
    30d2:	df 4f       	sbci	r29, 0xFF	; 255
    30d4:	e8 83       	st	Y, r30
    30d6:	c0 58       	subi	r28, 0x80	; 128
    30d8:	d0 40       	sbci	r29, 0x00	; 0
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	c0 58       	subi	r28, 0x80	; 128
    30de:	df 4f       	sbci	r29, 0xFF	; 255
    30e0:	f8 81       	ld	r31, Y
    30e2:	c0 58       	subi	r28, 0x80	; 128
    30e4:	d0 40       	sbci	r29, 0x00	; 0
    30e6:	8f 27       	eor	r24, r31
    30e8:	88 23       	and	r24, r24
    30ea:	69 f4       	brne	.+26     	; 0x3106 <main+0x106a>
			{
				DIO_voidSetPortValue(DIO_PORTB,0b00000111);
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	67 e0       	ldi	r22, 0x07	; 7
    30f0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>
				LCD_voidGoToXY(11,1);
    30f4:	8b e0       	ldi	r24, 0x0B	; 11
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteDecimalNumber(3);
    30fc:	83 e0       	ldi	r24, 0x03	; 3
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    3104:	af c0       	rjmp	.+350    	; 0x3264 <main+0x11c8>
			}
			else if(Local_f32LDR_Volt>=3.32 && Local_f32LDR_Volt<4.16)
    3106:	c1 58       	subi	r28, 0x81	; 129
    3108:	df 4f       	sbci	r29, 0xFF	; 255
    310a:	18 82       	st	Y, r1
    310c:	cf 57       	subi	r28, 0x7F	; 127
    310e:	d0 40       	sbci	r29, 0x00	; 0
    3110:	fe 01       	movw	r30, r28
    3112:	ef 58       	subi	r30, 0x8F	; 143
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	21 ee       	ldi	r18, 0xE1	; 225
    3120:	3a e7       	ldi	r19, 0x7A	; 122
    3122:	44 e5       	ldi	r20, 0x54	; 84
    3124:	50 e4       	ldi	r21, 0x40	; 64
    3126:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    312a:	88 23       	and	r24, r24
    312c:	34 f0       	brlt	.+12     	; 0x313a <main+0x109e>
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	c1 58       	subi	r28, 0x81	; 129
    3132:	df 4f       	sbci	r29, 0xFF	; 255
    3134:	88 83       	st	Y, r24
    3136:	cf 57       	subi	r28, 0x7F	; 127
    3138:	d0 40       	sbci	r29, 0x00	; 0
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	c1 58       	subi	r28, 0x81	; 129
    313e:	df 4f       	sbci	r29, 0xFF	; 255
    3140:	98 81       	ld	r25, Y
    3142:	cf 57       	subi	r28, 0x7F	; 127
    3144:	d0 40       	sbci	r29, 0x00	; 0
    3146:	89 27       	eor	r24, r25
    3148:	88 23       	and	r24, r24
    314a:	51 f5       	brne	.+84     	; 0x31a0 <main+0x1104>
    314c:	ef 96       	adiw	r28, 0x3f	; 63
    314e:	1f ae       	std	Y+63, r1	; 0x3f
    3150:	ef 97       	sbiw	r28, 0x3f	; 63
    3152:	fe 01       	movw	r30, r28
    3154:	ef 58       	subi	r30, 0x8F	; 143
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	60 81       	ld	r22, Z
    315a:	71 81       	ldd	r23, Z+1	; 0x01
    315c:	82 81       	ldd	r24, Z+2	; 0x02
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	28 eb       	ldi	r18, 0xB8	; 184
    3162:	3e e1       	ldi	r19, 0x1E	; 30
    3164:	45 e8       	ldi	r20, 0x85	; 133
    3166:	50 e4       	ldi	r21, 0x40	; 64
    3168:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    316c:	88 23       	and	r24, r24
    316e:	24 f4       	brge	.+8      	; 0x3178 <main+0x10dc>
    3170:	e1 e0       	ldi	r30, 0x01	; 1
    3172:	ef 96       	adiw	r28, 0x3f	; 63
    3174:	ef af       	std	Y+63, r30	; 0x3f
    3176:	ef 97       	sbiw	r28, 0x3f	; 63
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	ef 96       	adiw	r28, 0x3f	; 63
    317c:	ff ad       	ldd	r31, Y+63	; 0x3f
    317e:	ef 97       	sbiw	r28, 0x3f	; 63
    3180:	8f 27       	eor	r24, r31
    3182:	88 23       	and	r24, r24
    3184:	69 f4       	brne	.+26     	; 0x31a0 <main+0x1104>
			{
				DIO_voidSetPortValue(DIO_PORTB,0b00000011);
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	63 e0       	ldi	r22, 0x03	; 3
    318a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>
				LCD_voidGoToXY(11,1);
    318e:	8b e0       	ldi	r24, 0x0B	; 11
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteDecimalNumber(2);
    3196:	82 e0       	ldi	r24, 0x02	; 2
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    319e:	62 c0       	rjmp	.+196    	; 0x3264 <main+0x11c8>
			}
			else if(Local_f32LDR_Volt>=2.5 && Local_f32LDR_Volt<3.32)
    31a0:	ee 96       	adiw	r28, 0x3e	; 62
    31a2:	1f ae       	std	Y+63, r1	; 0x3f
    31a4:	ee 97       	sbiw	r28, 0x3e	; 62
    31a6:	fe 01       	movw	r30, r28
    31a8:	ef 58       	subi	r30, 0x8F	; 143
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	50 e4       	ldi	r21, 0x40	; 64
    31bc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    31c0:	88 23       	and	r24, r24
    31c2:	24 f0       	brlt	.+8      	; 0x31cc <main+0x1130>
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	ee 96       	adiw	r28, 0x3e	; 62
    31c8:	8f af       	std	Y+63, r24	; 0x3f
    31ca:	ee 97       	sbiw	r28, 0x3e	; 62
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	ee 96       	adiw	r28, 0x3e	; 62
    31d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    31d2:	ee 97       	sbiw	r28, 0x3e	; 62
    31d4:	89 27       	eor	r24, r25
    31d6:	88 23       	and	r24, r24
    31d8:	51 f5       	brne	.+84     	; 0x322e <main+0x1192>
    31da:	ed 96       	adiw	r28, 0x3d	; 61
    31dc:	1f ae       	std	Y+63, r1	; 0x3f
    31de:	ed 97       	sbiw	r28, 0x3d	; 61
    31e0:	fe 01       	movw	r30, r28
    31e2:	ef 58       	subi	r30, 0x8F	; 143
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	21 ee       	ldi	r18, 0xE1	; 225
    31f0:	3a e7       	ldi	r19, 0x7A	; 122
    31f2:	44 e5       	ldi	r20, 0x54	; 84
    31f4:	50 e4       	ldi	r21, 0x40	; 64
    31f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    31fa:	88 23       	and	r24, r24
    31fc:	24 f4       	brge	.+8      	; 0x3206 <main+0x116a>
    31fe:	e1 e0       	ldi	r30, 0x01	; 1
    3200:	ed 96       	adiw	r28, 0x3d	; 61
    3202:	ef af       	std	Y+63, r30	; 0x3f
    3204:	ed 97       	sbiw	r28, 0x3d	; 61
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	ed 96       	adiw	r28, 0x3d	; 61
    320a:	ff ad       	ldd	r31, Y+63	; 0x3f
    320c:	ed 97       	sbiw	r28, 0x3d	; 61
    320e:	8f 27       	eor	r24, r31
    3210:	88 23       	and	r24, r24
    3212:	69 f4       	brne	.+26     	; 0x322e <main+0x1192>
			{
				DIO_voidSetPortValue(DIO_PORTB,0b00000001);
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	61 e0       	ldi	r22, 0x01	; 1
    3218:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>
				LCD_voidGoToXY(11,1);
    321c:	8b e0       	ldi	r24, 0x0B	; 11
    321e:	61 e0       	ldi	r22, 0x01	; 1
    3220:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteDecimalNumber(1);
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
    322c:	1b c0       	rjmp	.+54     	; 0x3264 <main+0x11c8>
			}
			else if(Local_f32LDR_Volt<2.5)
    322e:	fe 01       	movw	r30, r28
    3230:	ef 58       	subi	r30, 0x8F	; 143
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	60 81       	ld	r22, Z
    3236:	71 81       	ldd	r23, Z+1	; 0x01
    3238:	82 81       	ldd	r24, Z+2	; 0x02
    323a:	93 81       	ldd	r25, Z+3	; 0x03
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	50 e4       	ldi	r21, 0x40	; 64
    3244:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3248:	88 23       	and	r24, r24
    324a:	64 f4       	brge	.+24     	; 0x3264 <main+0x11c8>
			{
				DIO_voidSetPortValue(DIO_PORTB,0b00000000);
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetPortValue>
				LCD_voidGoToXY(11,1);
    3254:	8b e0       	ldi	r24, 0x0B	; 11
    3256:	61 e0       	ldi	r22, 0x01	; 1
    3258:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_voidGoToXY>
				LCD_voidWriteDecimalNumber(0);
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteDecimalNumber>
			LCD_voidGoToXY(5,0);
			LCD_voidWriteString("Goodbye");
			_delay_ms(1000);
			LCD_voidSendCommand(1);
		}
      while(Local_u8State!=DISABLE)
    3264:	fe 01       	movw	r30, r28
    3266:	e5 58       	subi	r30, 0x85	; 133
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	82 30       	cpi	r24, 0x02	; 2
    326e:	09 f0       	breq	.+2      	; 0x3272 <main+0x11d6>
    3270:	2a cd       	rjmp	.-1452   	; 0x2cc6 <main+0xc2a>
    3272:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <main+0x5a>

00003276 <__divmodhi4>:
    3276:	97 fb       	bst	r25, 7
    3278:	09 2e       	mov	r0, r25
    327a:	07 26       	eor	r0, r23
    327c:	0a d0       	rcall	.+20     	; 0x3292 <__divmodhi4_neg1>
    327e:	77 fd       	sbrc	r23, 7
    3280:	04 d0       	rcall	.+8      	; 0x328a <__divmodhi4_neg2>
    3282:	0c d0       	rcall	.+24     	; 0x329c <__udivmodhi4>
    3284:	06 d0       	rcall	.+12     	; 0x3292 <__divmodhi4_neg1>
    3286:	00 20       	and	r0, r0
    3288:	1a f4       	brpl	.+6      	; 0x3290 <__divmodhi4_exit>

0000328a <__divmodhi4_neg2>:
    328a:	70 95       	com	r23
    328c:	61 95       	neg	r22
    328e:	7f 4f       	sbci	r23, 0xFF	; 255

00003290 <__divmodhi4_exit>:
    3290:	08 95       	ret

00003292 <__divmodhi4_neg1>:
    3292:	f6 f7       	brtc	.-4      	; 0x3290 <__divmodhi4_exit>
    3294:	90 95       	com	r25
    3296:	81 95       	neg	r24
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	08 95       	ret

0000329c <__udivmodhi4>:
    329c:	aa 1b       	sub	r26, r26
    329e:	bb 1b       	sub	r27, r27
    32a0:	51 e1       	ldi	r21, 0x11	; 17
    32a2:	07 c0       	rjmp	.+14     	; 0x32b2 <__udivmodhi4_ep>

000032a4 <__udivmodhi4_loop>:
    32a4:	aa 1f       	adc	r26, r26
    32a6:	bb 1f       	adc	r27, r27
    32a8:	a6 17       	cp	r26, r22
    32aa:	b7 07       	cpc	r27, r23
    32ac:	10 f0       	brcs	.+4      	; 0x32b2 <__udivmodhi4_ep>
    32ae:	a6 1b       	sub	r26, r22
    32b0:	b7 0b       	sbc	r27, r23

000032b2 <__udivmodhi4_ep>:
    32b2:	88 1f       	adc	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	5a 95       	dec	r21
    32b8:	a9 f7       	brne	.-22     	; 0x32a4 <__udivmodhi4_loop>
    32ba:	80 95       	com	r24
    32bc:	90 95       	com	r25
    32be:	bc 01       	movw	r22, r24
    32c0:	cd 01       	movw	r24, r26
    32c2:	08 95       	ret

000032c4 <__prologue_saves__>:
    32c4:	2f 92       	push	r2
    32c6:	3f 92       	push	r3
    32c8:	4f 92       	push	r4
    32ca:	5f 92       	push	r5
    32cc:	6f 92       	push	r6
    32ce:	7f 92       	push	r7
    32d0:	8f 92       	push	r8
    32d2:	9f 92       	push	r9
    32d4:	af 92       	push	r10
    32d6:	bf 92       	push	r11
    32d8:	cf 92       	push	r12
    32da:	df 92       	push	r13
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	ca 1b       	sub	r28, r26
    32ee:	db 0b       	sbc	r29, r27
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	09 94       	ijmp

000032fc <__epilogue_restores__>:
    32fc:	2a 88       	ldd	r2, Y+18	; 0x12
    32fe:	39 88       	ldd	r3, Y+17	; 0x11
    3300:	48 88       	ldd	r4, Y+16	; 0x10
    3302:	5f 84       	ldd	r5, Y+15	; 0x0f
    3304:	6e 84       	ldd	r6, Y+14	; 0x0e
    3306:	7d 84       	ldd	r7, Y+13	; 0x0d
    3308:	8c 84       	ldd	r8, Y+12	; 0x0c
    330a:	9b 84       	ldd	r9, Y+11	; 0x0b
    330c:	aa 84       	ldd	r10, Y+10	; 0x0a
    330e:	b9 84       	ldd	r11, Y+9	; 0x09
    3310:	c8 84       	ldd	r12, Y+8	; 0x08
    3312:	df 80       	ldd	r13, Y+7	; 0x07
    3314:	ee 80       	ldd	r14, Y+6	; 0x06
    3316:	fd 80       	ldd	r15, Y+5	; 0x05
    3318:	0c 81       	ldd	r16, Y+4	; 0x04
    331a:	1b 81       	ldd	r17, Y+3	; 0x03
    331c:	aa 81       	ldd	r26, Y+2	; 0x02
    331e:	b9 81       	ldd	r27, Y+1	; 0x01
    3320:	ce 0f       	add	r28, r30
    3322:	d1 1d       	adc	r29, r1
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	ed 01       	movw	r28, r26
    3330:	08 95       	ret

00003332 <itoa>:
    3332:	fb 01       	movw	r30, r22
    3334:	9f 01       	movw	r18, r30
    3336:	e8 94       	clt
    3338:	42 30       	cpi	r20, 0x02	; 2
    333a:	c4 f0       	brlt	.+48     	; 0x336c <itoa+0x3a>
    333c:	45 32       	cpi	r20, 0x25	; 37
    333e:	b4 f4       	brge	.+44     	; 0x336c <itoa+0x3a>
    3340:	4a 30       	cpi	r20, 0x0A	; 10
    3342:	29 f4       	brne	.+10     	; 0x334e <itoa+0x1c>
    3344:	97 fb       	bst	r25, 7
    3346:	1e f4       	brtc	.+6      	; 0x334e <itoa+0x1c>
    3348:	90 95       	com	r25
    334a:	81 95       	neg	r24
    334c:	9f 4f       	sbci	r25, 0xFF	; 255
    334e:	64 2f       	mov	r22, r20
    3350:	77 27       	eor	r23, r23
    3352:	0e 94 4e 19 	call	0x329c	; 0x329c <__udivmodhi4>
    3356:	80 5d       	subi	r24, 0xD0	; 208
    3358:	8a 33       	cpi	r24, 0x3A	; 58
    335a:	0c f0       	brlt	.+2      	; 0x335e <itoa+0x2c>
    335c:	89 5d       	subi	r24, 0xD9	; 217
    335e:	81 93       	st	Z+, r24
    3360:	cb 01       	movw	r24, r22
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	a1 f7       	brne	.-24     	; 0x334e <itoa+0x1c>
    3366:	16 f4       	brtc	.+4      	; 0x336c <itoa+0x3a>
    3368:	5d e2       	ldi	r21, 0x2D	; 45
    336a:	51 93       	st	Z+, r21
    336c:	10 82       	st	Z, r1
    336e:	c9 01       	movw	r24, r18
    3370:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <strrev>

00003374 <strrev>:
    3374:	dc 01       	movw	r26, r24
    3376:	fc 01       	movw	r30, r24
    3378:	67 2f       	mov	r22, r23
    337a:	71 91       	ld	r23, Z+
    337c:	77 23       	and	r23, r23
    337e:	e1 f7       	brne	.-8      	; 0x3378 <strrev+0x4>
    3380:	32 97       	sbiw	r30, 0x02	; 2
    3382:	04 c0       	rjmp	.+8      	; 0x338c <strrev+0x18>
    3384:	7c 91       	ld	r23, X
    3386:	6d 93       	st	X+, r22
    3388:	70 83       	st	Z, r23
    338a:	62 91       	ld	r22, -Z
    338c:	ae 17       	cp	r26, r30
    338e:	bf 07       	cpc	r27, r31
    3390:	c8 f3       	brcs	.-14     	; 0x3384 <strrev+0x10>
    3392:	08 95       	ret

00003394 <_exit>:
    3394:	f8 94       	cli

00003396 <__stop_program>:
    3396:	ff cf       	rjmp	.-2      	; 0x3396 <__stop_program>
